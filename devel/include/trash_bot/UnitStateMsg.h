// Generated by gencpp from file trash_bot/UnitStateMsg.msg
// DO NOT EDIT!


#ifndef TRASH_BOT_MESSAGE_UNITSTATEMSG_H
#define TRASH_BOT_MESSAGE_UNITSTATEMSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace trash_bot
{
template <class ContainerAllocator>
struct UnitStateMsg_
{
  typedef UnitStateMsg_<ContainerAllocator> Type;

  UnitStateMsg_()
    : alive(0)
    , states()  {
    }
  UnitStateMsg_(const ContainerAllocator& _alloc)
    : alive(0)
    , states(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _alive_type;
  _alive_type alive;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _states_type;
  _states_type states;





  typedef boost::shared_ptr< ::trash_bot::UnitStateMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::trash_bot::UnitStateMsg_<ContainerAllocator> const> ConstPtr;

}; // struct UnitStateMsg_

typedef ::trash_bot::UnitStateMsg_<std::allocator<void> > UnitStateMsg;

typedef boost::shared_ptr< ::trash_bot::UnitStateMsg > UnitStateMsgPtr;
typedef boost::shared_ptr< ::trash_bot::UnitStateMsg const> UnitStateMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::trash_bot::UnitStateMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::trash_bot::UnitStateMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::trash_bot::UnitStateMsg_<ContainerAllocator1> & lhs, const ::trash_bot::UnitStateMsg_<ContainerAllocator2> & rhs)
{
  return lhs.alive == rhs.alive &&
    lhs.states == rhs.states;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::trash_bot::UnitStateMsg_<ContainerAllocator1> & lhs, const ::trash_bot::UnitStateMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace trash_bot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::trash_bot::UnitStateMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::trash_bot::UnitStateMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::trash_bot::UnitStateMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::trash_bot::UnitStateMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::trash_bot::UnitStateMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::trash_bot::UnitStateMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::trash_bot::UnitStateMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "090390084faae6402e136d50389ae081";
  }

  static const char* value(const ::trash_bot::UnitStateMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x090390084faae640ULL;
  static const uint64_t static_value2 = 0x2e136d50389ae081ULL;
};

template<class ContainerAllocator>
struct DataType< ::trash_bot::UnitStateMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "trash_bot/UnitStateMsg";
  }

  static const char* value(const ::trash_bot::UnitStateMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::trash_bot::UnitStateMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# UnitStateMsg.msg\n"
"\n"
"# bit flag를 통해 각 unit index와 1:1 매칭된다.\n"
"# 0:alive , 1:dead or timeout\n"
"int32 alive\n"
"\n"
"# Array for unit states\n"
"int32[] states\n"
;
  }

  static const char* value(const ::trash_bot::UnitStateMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::trash_bot::UnitStateMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.alive);
      stream.next(m.states);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UnitStateMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::trash_bot::UnitStateMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::trash_bot::UnitStateMsg_<ContainerAllocator>& v)
  {
    s << indent << "alive: ";
    Printer<int32_t>::stream(s, indent + "  ", v.alive);
    s << indent << "states[]" << std::endl;
    for (size_t i = 0; i < v.states.size(); ++i)
    {
      s << indent << "  states[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.states[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TRASH_BOT_MESSAGE_UNITSTATEMSG_H
