// Generated by gencpp from file trash_bot/UnitAliveMsg.msg
// DO NOT EDIT!


#ifndef TRASH_BOT_MESSAGE_UNITALIVEMSG_H
#define TRASH_BOT_MESSAGE_UNITALIVEMSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace trash_bot
{
template <class ContainerAllocator>
struct UnitAliveMsg_
{
  typedef UnitAliveMsg_<ContainerAllocator> Type;

  UnitAliveMsg_()
    : index(0)
    , state(0)  {
    }
  UnitAliveMsg_(const ContainerAllocator& _alloc)
    : index(0)
    , state(0)  {
  (void)_alloc;
    }



   typedef int32_t _index_type;
  _index_type index;

   typedef int32_t _state_type;
  _state_type state;





  typedef boost::shared_ptr< ::trash_bot::UnitAliveMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::trash_bot::UnitAliveMsg_<ContainerAllocator> const> ConstPtr;

}; // struct UnitAliveMsg_

typedef ::trash_bot::UnitAliveMsg_<std::allocator<void> > UnitAliveMsg;

typedef boost::shared_ptr< ::trash_bot::UnitAliveMsg > UnitAliveMsgPtr;
typedef boost::shared_ptr< ::trash_bot::UnitAliveMsg const> UnitAliveMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::trash_bot::UnitAliveMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::trash_bot::UnitAliveMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::trash_bot::UnitAliveMsg_<ContainerAllocator1> & lhs, const ::trash_bot::UnitAliveMsg_<ContainerAllocator2> & rhs)
{
  return lhs.index == rhs.index &&
    lhs.state == rhs.state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::trash_bot::UnitAliveMsg_<ContainerAllocator1> & lhs, const ::trash_bot::UnitAliveMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace trash_bot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::trash_bot::UnitAliveMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::trash_bot::UnitAliveMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::trash_bot::UnitAliveMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::trash_bot::UnitAliveMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::trash_bot::UnitAliveMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::trash_bot::UnitAliveMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::trash_bot::UnitAliveMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3580be06e9860f4561cd6b311dfacef3";
  }

  static const char* value(const ::trash_bot::UnitAliveMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3580be06e9860f45ULL;
  static const uint64_t static_value2 = 0x61cd6b311dfacef3ULL;
};

template<class ContainerAllocator>
struct DataType< ::trash_bot::UnitAliveMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "trash_bot/UnitAliveMsg";
  }

  static const char* value(const ::trash_bot::UnitAliveMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::trash_bot::UnitAliveMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"# UnitAliveMsg.msg\n"
"\n"
"# Unit index\n"
"int32 index\n"
"\n"
"# unit states\n"
"int32 state\n"
"\n"
;
  }

  static const char* value(const ::trash_bot::UnitAliveMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::trash_bot::UnitAliveMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.index);
      stream.next(m.state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UnitAliveMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::trash_bot::UnitAliveMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::trash_bot::UnitAliveMsg_<ContainerAllocator>& v)
  {
    s << indent << "index: ";
    Printer<int32_t>::stream(s, indent + "  ", v.index);
    s << indent << "state: ";
    Printer<int32_t>::stream(s, indent + "  ", v.state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TRASH_BOT_MESSAGE_UNITALIVEMSG_H
