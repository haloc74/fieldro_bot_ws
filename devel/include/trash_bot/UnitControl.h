// Generated by gencpp from file trash_bot/UnitControl.msg
// DO NOT EDIT!


#ifndef TRASH_BOT_MESSAGE_UNITCONTROL_H
#define TRASH_BOT_MESSAGE_UNITCONTROL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace trash_bot
{
template <class ContainerAllocator>
struct UnitControl_
{
  typedef UnitControl_<ContainerAllocator> Type;

  UnitControl_()
    : time_stamp()
    , target_object(0)
    , action(0)
    , command()  {
    }
  UnitControl_(const ContainerAllocator& _alloc)
    : time_stamp()
    , target_object(0)
    , action(0)
    , command(_alloc)  {
  (void)_alloc;
    }



   typedef ros::Time _time_stamp_type;
  _time_stamp_type time_stamp;

   typedef int32_t _target_object_type;
  _target_object_type target_object;

   typedef int32_t _action_type;
  _action_type action;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _command_type;
  _command_type command;





  typedef boost::shared_ptr< ::trash_bot::UnitControl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::trash_bot::UnitControl_<ContainerAllocator> const> ConstPtr;

}; // struct UnitControl_

typedef ::trash_bot::UnitControl_<std::allocator<void> > UnitControl;

typedef boost::shared_ptr< ::trash_bot::UnitControl > UnitControlPtr;
typedef boost::shared_ptr< ::trash_bot::UnitControl const> UnitControlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::trash_bot::UnitControl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::trash_bot::UnitControl_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::trash_bot::UnitControl_<ContainerAllocator1> & lhs, const ::trash_bot::UnitControl_<ContainerAllocator2> & rhs)
{
  return lhs.time_stamp == rhs.time_stamp &&
    lhs.target_object == rhs.target_object &&
    lhs.action == rhs.action &&
    lhs.command == rhs.command;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::trash_bot::UnitControl_<ContainerAllocator1> & lhs, const ::trash_bot::UnitControl_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace trash_bot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::trash_bot::UnitControl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::trash_bot::UnitControl_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::trash_bot::UnitControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::trash_bot::UnitControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::trash_bot::UnitControl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::trash_bot::UnitControl_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::trash_bot::UnitControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cb3cb3b598c0c81e52aabe15081f3bd1";
  }

  static const char* value(const ::trash_bot::UnitControl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcb3cb3b598c0c81eULL;
  static const uint64_t static_value2 = 0x52aabe15081f3bd1ULL;
};

template<class ContainerAllocator>
struct DataType< ::trash_bot::UnitControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "trash_bot/UnitControl";
  }

  static const char* value(const ::trash_bot::UnitControl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::trash_bot::UnitControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"\n"
"# 각 Unit에게 동작 요청하는 메세지 \n"
"\n"
"time  time_stamp        # 발행 시간 \n"
"int32 target_object     # 대상 객체 (H/W Index Enum, unit_index.h)\n"
"int32 action            # 명령 동작 Action Index , unit_action_index.h\n"
"string command          # 명령 문자열 (ex. \"start\", \"stop\", \"reset\", \"pause\", \"resume\")\n"
;
  }

  static const char* value(const ::trash_bot::UnitControl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::trash_bot::UnitControl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time_stamp);
      stream.next(m.target_object);
      stream.next(m.action);
      stream.next(m.command);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UnitControl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::trash_bot::UnitControl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::trash_bot::UnitControl_<ContainerAllocator>& v)
  {
    s << indent << "time_stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.time_stamp);
    s << indent << "target_object: ";
    Printer<int32_t>::stream(s, indent + "  ", v.target_object);
    s << indent << "action: ";
    Printer<int32_t>::stream(s, indent + "  ", v.action);
    s << indent << "command: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.command);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TRASH_BOT_MESSAGE_UNITCONTROL_H
