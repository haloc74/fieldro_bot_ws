// Generated by gencpp from file trash_bot/IOSignal.msg
// DO NOT EDIT!


#ifndef TRASH_BOT_MESSAGE_IOSIGNAL_H
#define TRASH_BOT_MESSAGE_IOSIGNAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace trash_bot
{
template <class ContainerAllocator>
struct IOSignal_
{
  typedef IOSignal_<ContainerAllocator> Type;

  IOSignal_()
    : time_stamp()
    , signal_bit(0)  {
    }
  IOSignal_(const ContainerAllocator& _alloc)
    : time_stamp()
    , signal_bit(0)  {
  (void)_alloc;
    }



   typedef ros::Time _time_stamp_type;
  _time_stamp_type time_stamp;

   typedef int64_t _signal_bit_type;
  _signal_bit_type signal_bit;





  typedef boost::shared_ptr< ::trash_bot::IOSignal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::trash_bot::IOSignal_<ContainerAllocator> const> ConstPtr;

}; // struct IOSignal_

typedef ::trash_bot::IOSignal_<std::allocator<void> > IOSignal;

typedef boost::shared_ptr< ::trash_bot::IOSignal > IOSignalPtr;
typedef boost::shared_ptr< ::trash_bot::IOSignal const> IOSignalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::trash_bot::IOSignal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::trash_bot::IOSignal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::trash_bot::IOSignal_<ContainerAllocator1> & lhs, const ::trash_bot::IOSignal_<ContainerAllocator2> & rhs)
{
  return lhs.time_stamp == rhs.time_stamp &&
    lhs.signal_bit == rhs.signal_bit;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::trash_bot::IOSignal_<ContainerAllocator1> & lhs, const ::trash_bot::IOSignal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace trash_bot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::trash_bot::IOSignal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::trash_bot::IOSignal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::trash_bot::IOSignal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::trash_bot::IOSignal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::trash_bot::IOSignal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::trash_bot::IOSignal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::trash_bot::IOSignal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4b2bc2f69e0aff659bc5c2a1a7f822b2";
  }

  static const char* value(const ::trash_bot::IOSignal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4b2bc2f69e0aff65ULL;
  static const uint64_t static_value2 = 0x9bc5c2a1a7f822b2ULL;
};

template<class ContainerAllocator>
struct DataType< ::trash_bot::IOSignal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "trash_bot/IOSignal";
  }

  static const char* value(const ::trash_bot::IOSignal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::trash_bot::IOSignal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"time time_stamp     # Message 발행 시간 (ros::Time)\n"
"int64 signal_bit    # Total Signal Value (bit operation)\n"
;
  }

  static const char* value(const ::trash_bot::IOSignal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::trash_bot::IOSignal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time_stamp);
      stream.next(m.signal_bit);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IOSignal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::trash_bot::IOSignal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::trash_bot::IOSignal_<ContainerAllocator>& v)
  {
    s << indent << "time_stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.time_stamp);
    s << indent << "signal_bit: ";
    Printer<int64_t>::stream(s, indent + "  ", v.signal_bit);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TRASH_BOT_MESSAGE_IOSIGNAL_H
