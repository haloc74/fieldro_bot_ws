// Generated by gencpp from file trash_bot/UnitActionComplete.msg
// DO NOT EDIT!


#ifndef TRASH_BOT_MESSAGE_UNITACTIONCOMPLETE_H
#define TRASH_BOT_MESSAGE_UNITACTIONCOMPLETE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace trash_bot
{
template <class ContainerAllocator>
struct UnitActionComplete_
{
  typedef UnitActionComplete_<ContainerAllocator> Type;

  UnitActionComplete_()
    : time_stamp()
    , receive_object(0)
    , action_object(0)
    , complete_action(0)
    , error_code(0)  {
    }
  UnitActionComplete_(const ContainerAllocator& _alloc)
    : time_stamp()
    , receive_object(0)
    , action_object(0)
    , complete_action(0)
    , error_code(0)  {
  (void)_alloc;
    }



   typedef ros::Time _time_stamp_type;
  _time_stamp_type time_stamp;

   typedef int32_t _receive_object_type;
  _receive_object_type receive_object;

   typedef int32_t _action_object_type;
  _action_object_type action_object;

   typedef int32_t _complete_action_type;
  _complete_action_type complete_action;

   typedef int32_t _error_code_type;
  _error_code_type error_code;





  typedef boost::shared_ptr< ::trash_bot::UnitActionComplete_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::trash_bot::UnitActionComplete_<ContainerAllocator> const> ConstPtr;

}; // struct UnitActionComplete_

typedef ::trash_bot::UnitActionComplete_<std::allocator<void> > UnitActionComplete;

typedef boost::shared_ptr< ::trash_bot::UnitActionComplete > UnitActionCompletePtr;
typedef boost::shared_ptr< ::trash_bot::UnitActionComplete const> UnitActionCompleteConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::trash_bot::UnitActionComplete_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::trash_bot::UnitActionComplete_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::trash_bot::UnitActionComplete_<ContainerAllocator1> & lhs, const ::trash_bot::UnitActionComplete_<ContainerAllocator2> & rhs)
{
  return lhs.time_stamp == rhs.time_stamp &&
    lhs.receive_object == rhs.receive_object &&
    lhs.action_object == rhs.action_object &&
    lhs.complete_action == rhs.complete_action &&
    lhs.error_code == rhs.error_code;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::trash_bot::UnitActionComplete_<ContainerAllocator1> & lhs, const ::trash_bot::UnitActionComplete_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace trash_bot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::trash_bot::UnitActionComplete_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::trash_bot::UnitActionComplete_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::trash_bot::UnitActionComplete_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::trash_bot::UnitActionComplete_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::trash_bot::UnitActionComplete_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::trash_bot::UnitActionComplete_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::trash_bot::UnitActionComplete_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8cfdf36b4b872dd50c9838483632d5fd";
  }

  static const char* value(const ::trash_bot::UnitActionComplete_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8cfdf36b4b872dd5ULL;
  static const uint64_t static_value2 = 0x0c9838483632d5fdULL;
};

template<class ContainerAllocator>
struct DataType< ::trash_bot::UnitActionComplete_<ContainerAllocator> >
{
  static const char* value()
  {
    return "trash_bot/UnitActionComplete";
  }

  static const char* value(const ::trash_bot::UnitActionComplete_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::trash_bot::UnitActionComplete_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"## 각 구성 unit이 요청된 동작을 완료 시킨면 발생되는 메세지\n"
"\n"
"time  time_stamp        # 발행시간\n"
"int32 receive_object    # 수신객체    (unit_index.h)\n"
"int32 action_object     # 동작 객체   (unit_index.h)\n"
"int32 complete_action   # 완료 동작   (unit_action_index.h)\n"
"int32 error_code        # Error-Code  (error_code.h) \n"
;
  }

  static const char* value(const ::trash_bot::UnitActionComplete_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::trash_bot::UnitActionComplete_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time_stamp);
      stream.next(m.receive_object);
      stream.next(m.action_object);
      stream.next(m.complete_action);
      stream.next(m.error_code);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UnitActionComplete_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::trash_bot::UnitActionComplete_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::trash_bot::UnitActionComplete_<ContainerAllocator>& v)
  {
    s << indent << "time_stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.time_stamp);
    s << indent << "receive_object: ";
    Printer<int32_t>::stream(s, indent + "  ", v.receive_object);
    s << indent << "action_object: ";
    Printer<int32_t>::stream(s, indent + "  ", v.action_object);
    s << indent << "complete_action: ";
    Printer<int32_t>::stream(s, indent + "  ", v.complete_action);
    s << indent << "error_code: ";
    Printer<int32_t>::stream(s, indent + "  ", v.error_code);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TRASH_BOT_MESSAGE_UNITACTIONCOMPLETE_H
