// Generated by gencpp from file twinny_msgs/PGVReport.msg
// DO NOT EDIT!


#ifndef TWINNY_MSGS_MESSAGE_PGVREPORT_H
#define TWINNY_MSGS_MESSAGE_PGVREPORT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace twinny_msgs
{
template <class ContainerAllocator>
struct PGVReport_
{
  typedef PGVReport_<ContainerAllocator> Type;

  PGVReport_()
    : header()
    , TagDetected(false)
    , TagID(0)
    , LineDetected(0)
    , LineID(0)
    , ControlDetected(false)
    , ControlID(0)
    , Fault(0)
    , Warning(0)
    , X(0.0)
    , Y(0.0)
    , theta(0.0)
    , test_cmd(0)  {
    }
  PGVReport_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , TagDetected(false)
    , TagID(0)
    , LineDetected(0)
    , LineID(0)
    , ControlDetected(false)
    , ControlID(0)
    , Fault(0)
    , Warning(0)
    , X(0.0)
    , Y(0.0)
    , theta(0.0)
    , test_cmd(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _TagDetected_type;
  _TagDetected_type TagDetected;

   typedef uint32_t _TagID_type;
  _TagID_type TagID;

   typedef uint8_t _LineDetected_type;
  _LineDetected_type LineDetected;

   typedef uint32_t _LineID_type;
  _LineID_type LineID;

   typedef uint8_t _ControlDetected_type;
  _ControlDetected_type ControlDetected;

   typedef uint32_t _ControlID_type;
  _ControlID_type ControlID;

   typedef int8_t _Fault_type;
  _Fault_type Fault;

   typedef int8_t _Warning_type;
  _Warning_type Warning;

   typedef float _X_type;
  _X_type X;

   typedef float _Y_type;
  _Y_type Y;

   typedef float _theta_type;
  _theta_type theta;

   typedef int8_t _test_cmd_type;
  _test_cmd_type test_cmd;





  typedef boost::shared_ptr< ::twinny_msgs::PGVReport_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::twinny_msgs::PGVReport_<ContainerAllocator> const> ConstPtr;

}; // struct PGVReport_

typedef ::twinny_msgs::PGVReport_<std::allocator<void> > PGVReport;

typedef boost::shared_ptr< ::twinny_msgs::PGVReport > PGVReportPtr;
typedef boost::shared_ptr< ::twinny_msgs::PGVReport const> PGVReportConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::twinny_msgs::PGVReport_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::twinny_msgs::PGVReport_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::twinny_msgs::PGVReport_<ContainerAllocator1> & lhs, const ::twinny_msgs::PGVReport_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.TagDetected == rhs.TagDetected &&
    lhs.TagID == rhs.TagID &&
    lhs.LineDetected == rhs.LineDetected &&
    lhs.LineID == rhs.LineID &&
    lhs.ControlDetected == rhs.ControlDetected &&
    lhs.ControlID == rhs.ControlID &&
    lhs.Fault == rhs.Fault &&
    lhs.Warning == rhs.Warning &&
    lhs.X == rhs.X &&
    lhs.Y == rhs.Y &&
    lhs.theta == rhs.theta &&
    lhs.test_cmd == rhs.test_cmd;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::twinny_msgs::PGVReport_<ContainerAllocator1> & lhs, const ::twinny_msgs::PGVReport_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace twinny_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::twinny_msgs::PGVReport_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::twinny_msgs::PGVReport_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::twinny_msgs::PGVReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::twinny_msgs::PGVReport_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::twinny_msgs::PGVReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::twinny_msgs::PGVReport_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::twinny_msgs::PGVReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "34222d408912e06515bf5962c05f1613";
  }

  static const char* value(const ::twinny_msgs::PGVReport_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x34222d408912e065ULL;
  static const uint64_t static_value2 = 0x15bf5962c05f1613ULL;
};

template<class ContainerAllocator>
struct DataType< ::twinny_msgs::PGVReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "twinny_msgs/PGVReport";
  }

  static const char* value(const ::twinny_msgs::PGVReport_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::twinny_msgs::PGVReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"bool TagDetected\n"
"uint32 TagID\n"
"\n"
"uint8 LineDetected\n"
"uint32 LineID\n"
"\n"
"bool ControlDetected\n"
"uint32 ControlID\n"
"\n"
"int8 Fault\n"
"int8 Warning\n"
"\n"
"float32 X\n"
"float32 Y\n"
"float32 theta\n"
"\n"
"int8 test_cmd\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::twinny_msgs::PGVReport_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::twinny_msgs::PGVReport_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.TagDetected);
      stream.next(m.TagID);
      stream.next(m.LineDetected);
      stream.next(m.LineID);
      stream.next(m.ControlDetected);
      stream.next(m.ControlID);
      stream.next(m.Fault);
      stream.next(m.Warning);
      stream.next(m.X);
      stream.next(m.Y);
      stream.next(m.theta);
      stream.next(m.test_cmd);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PGVReport_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::twinny_msgs::PGVReport_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::twinny_msgs::PGVReport_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "TagDetected: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.TagDetected);
    s << indent << "TagID: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.TagID);
    s << indent << "LineDetected: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.LineDetected);
    s << indent << "LineID: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.LineID);
    s << indent << "ControlDetected: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ControlDetected);
    s << indent << "ControlID: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.ControlID);
    s << indent << "Fault: ";
    Printer<int8_t>::stream(s, indent + "  ", v.Fault);
    s << indent << "Warning: ";
    Printer<int8_t>::stream(s, indent + "  ", v.Warning);
    s << indent << "X: ";
    Printer<float>::stream(s, indent + "  ", v.X);
    s << indent << "Y: ";
    Printer<float>::stream(s, indent + "  ", v.Y);
    s << indent << "theta: ";
    Printer<float>::stream(s, indent + "  ", v.theta);
    s << indent << "test_cmd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.test_cmd);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TWINNY_MSGS_MESSAGE_PGVREPORT_H
