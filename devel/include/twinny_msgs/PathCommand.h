// Generated by gencpp from file twinny_msgs/PathCommand.msg
// DO NOT EDIT!


#ifndef TWINNY_MSGS_MESSAGE_PATHCOMMAND_H
#define TWINNY_MSGS_MESSAGE_PATHCOMMAND_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Pose2D.h>
#include <geometry_msgs/Twist.h>
#include <geometry_msgs/Twist.h>
#include <geometry_msgs/Pose2D.h>

namespace twinny_msgs
{
template <class ContainerAllocator>
struct PathCommand_
{
  typedef PathCommand_<ContainerAllocator> Type;

  PathCommand_()
    : header()
    , valid_length(0)
    , path()
    , front_vel()
    , current_vel()
    , current_pose()
    , mode()  {
      mode.assign(0);
  }
  PathCommand_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , valid_length(0)
    , path()
    , front_vel(_alloc)
    , current_vel(_alloc)
    , current_pose(_alloc)
    , mode()  {
  (void)_alloc;
      path.assign( ::geometry_msgs::Pose2D_<ContainerAllocator> (_alloc));

      mode.assign(0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _valid_length_type;
  _valid_length_type valid_length;

   typedef boost::array< ::geometry_msgs::Pose2D_<ContainerAllocator> , 200>  _path_type;
  _path_type path;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _front_vel_type;
  _front_vel_type front_vel;

   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _current_vel_type;
  _current_vel_type current_vel;

   typedef  ::geometry_msgs::Pose2D_<ContainerAllocator>  _current_pose_type;
  _current_pose_type current_pose;

   typedef boost::array<uint8_t, 200>  _mode_type;
  _mode_type mode;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(MAX_LENGTH)
  #undef MAX_LENGTH
#endif
#if defined(_WIN32) && defined(DRIVING_MODE)
  #undef DRIVING_MODE
#endif
#if defined(_WIN32) && defined(ROTATING_MODE)
  #undef ROTATING_MODE
#endif
#if defined(_WIN32) && defined(ROTATING_MODE_IN)
  #undef ROTATING_MODE_IN
#endif
#if defined(_WIN32) && defined(ROTATING_MODE_OUT_CW)
  #undef ROTATING_MODE_OUT_CW
#endif
#if defined(_WIN32) && defined(ROTATING_MODE_OUT_CCW)
  #undef ROTATING_MODE_OUT_CCW
#endif

  enum {
    MAX_LENGTH = 200u,
    DRIVING_MODE = 1u,
    ROTATING_MODE = 2u,
    ROTATING_MODE_IN = 3u,
    ROTATING_MODE_OUT_CW = 4u,
    ROTATING_MODE_OUT_CCW = 5u,
  };


  typedef boost::shared_ptr< ::twinny_msgs::PathCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::twinny_msgs::PathCommand_<ContainerAllocator> const> ConstPtr;

}; // struct PathCommand_

typedef ::twinny_msgs::PathCommand_<std::allocator<void> > PathCommand;

typedef boost::shared_ptr< ::twinny_msgs::PathCommand > PathCommandPtr;
typedef boost::shared_ptr< ::twinny_msgs::PathCommand const> PathCommandConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::twinny_msgs::PathCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::twinny_msgs::PathCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::twinny_msgs::PathCommand_<ContainerAllocator1> & lhs, const ::twinny_msgs::PathCommand_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.valid_length == rhs.valid_length &&
    lhs.path == rhs.path &&
    lhs.front_vel == rhs.front_vel &&
    lhs.current_vel == rhs.current_vel &&
    lhs.current_pose == rhs.current_pose &&
    lhs.mode == rhs.mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::twinny_msgs::PathCommand_<ContainerAllocator1> & lhs, const ::twinny_msgs::PathCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace twinny_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::twinny_msgs::PathCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::twinny_msgs::PathCommand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::twinny_msgs::PathCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::twinny_msgs::PathCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::twinny_msgs::PathCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::twinny_msgs::PathCommand_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::twinny_msgs::PathCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "07a34c8ab221feb76ed11d3cef84b7c5";
  }

  static const char* value(const ::twinny_msgs::PathCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x07a34c8ab221feb7ULL;
  static const uint64_t static_value2 = 0x6ed11d3cef84b7c5ULL;
};

template<class ContainerAllocator>
struct DataType< ::twinny_msgs::PathCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "twinny_msgs/PathCommand";
  }

  static const char* value(const ::twinny_msgs::PathCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::twinny_msgs::PathCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"uint8 MAX_LENGTH=200\n"
"uint8 valid_length\n"
"\n"
"geometry_msgs/Pose2D[200] path\n"
"geometry_msgs/Twist front_vel\n"
"geometry_msgs/Twist current_vel\n"
"geometry_msgs/Pose2D current_pose\n"
"\n"
"uint8[200] mode\n"
"uint8 DRIVING_MODE=1\n"
"uint8 ROTATING_MODE=2\n"
"uint8 ROTATING_MODE_IN=3\n"
"uint8 ROTATING_MODE_OUT_CW=4\n"
"uint8 ROTATING_MODE_OUT_CCW=5\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose2D\n"
"# Deprecated\n"
"# Please use the full 3D pose.\n"
"\n"
"# In general our recommendation is to use a full 3D representation of everything and for 2D specific applications make the appropriate projections into the plane for their calculations but optimally will preserve the 3D information during processing.\n"
"\n"
"# If we have parallel copies of 2D datatypes every UI and other pipeline will end up needing to have dual interfaces to plot everything. And you will end up with not being able to use 3D tools for 2D use cases even if they're completely valid, as you'd have to reimplement it with different inputs and outputs. It's not particularly hard to plot the 2D pose or compute the yaw error for the Pose message and there are already tools and libraries that can do this for you.\n"
"\n"
"\n"
"# This expresses a position and orientation on a 2D manifold.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 theta\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::twinny_msgs::PathCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::twinny_msgs::PathCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.valid_length);
      stream.next(m.path);
      stream.next(m.front_vel);
      stream.next(m.current_vel);
      stream.next(m.current_pose);
      stream.next(m.mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PathCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::twinny_msgs::PathCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::twinny_msgs::PathCommand_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "valid_length: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.valid_length);
    s << indent << "path[]" << std::endl;
    for (size_t i = 0; i < v.path.size(); ++i)
    {
      s << indent << "  path[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Pose2D_<ContainerAllocator> >::stream(s, indent + "    ", v.path[i]);
    }
    s << indent << "front_vel: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.front_vel);
    s << indent << "current_vel: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.current_vel);
    s << indent << "current_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose2D_<ContainerAllocator> >::stream(s, indent + "  ", v.current_pose);
    s << indent << "mode[]" << std::endl;
    for (size_t i = 0; i < v.mode.size(); ++i)
    {
      s << indent << "  mode[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.mode[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TWINNY_MSGS_MESSAGE_PATHCOMMAND_H
