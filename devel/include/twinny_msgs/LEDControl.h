// Generated by gencpp from file twinny_msgs/LEDControl.msg
// DO NOT EDIT!


#ifndef TWINNY_MSGS_MESSAGE_LEDCONTROL_H
#define TWINNY_MSGS_MESSAGE_LEDCONTROL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace twinny_msgs
{
template <class ContainerAllocator>
struct LEDControl_
{
  typedef LEDControl_<ContainerAllocator> Type;

  LEDControl_()
    : header()
    , type()
    , ID(0)
    , STATE(0)  {
    }
  LEDControl_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , type(_alloc)
    , ID(0)
    , STATE(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _type_type;
  _type_type type;

   typedef uint8_t _ID_type;
  _ID_type ID;

   typedef uint8_t _STATE_type;
  _STATE_type STATE;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(LED_0)
  #undef LED_0
#endif
#if defined(_WIN32) && defined(LED_1)
  #undef LED_1
#endif
#if defined(_WIN32) && defined(LED_2)
  #undef LED_2
#endif
#if defined(_WIN32) && defined(LED_3)
  #undef LED_3
#endif
#if defined(_WIN32) && defined(LED_4)
  #undef LED_4
#endif
#if defined(_WIN32) && defined(LED_5)
  #undef LED_5
#endif
#if defined(_WIN32) && defined(LED_6)
  #undef LED_6
#endif
#if defined(_WIN32) && defined(LED_7)
  #undef LED_7
#endif
#if defined(_WIN32) && defined(LED_8)
  #undef LED_8
#endif
#if defined(_WIN32) && defined(LED_9)
  #undef LED_9
#endif
#if defined(_WIN32) && defined(LED_10)
  #undef LED_10
#endif
#if defined(_WIN32) && defined(LED_11)
  #undef LED_11
#endif
#if defined(_WIN32) && defined(LED_BAR_OFF)
  #undef LED_BAR_OFF
#endif
#if defined(_WIN32) && defined(LED_BAR_RED)
  #undef LED_BAR_RED
#endif
#if defined(_WIN32) && defined(LED_BAR_GREEN)
  #undef LED_BAR_GREEN
#endif
#if defined(_WIN32) && defined(LED_BAR_YELLOW)
  #undef LED_BAR_YELLOW
#endif
#if defined(_WIN32) && defined(LED_BAR_BLUE)
  #undef LED_BAR_BLUE
#endif
#if defined(_WIN32) && defined(LED_BAR_MAGENTA)
  #undef LED_BAR_MAGENTA
#endif
#if defined(_WIN32) && defined(LED_BAR_CYAN)
  #undef LED_BAR_CYAN
#endif
#if defined(_WIN32) && defined(LED_BAR_WHITE)
  #undef LED_BAR_WHITE
#endif
#if defined(_WIN32) && defined(LED_BAR_OFF_2)
  #undef LED_BAR_OFF_2
#endif
#if defined(_WIN32) && defined(LED_BAR_RED_2)
  #undef LED_BAR_RED_2
#endif
#if defined(_WIN32) && defined(LED_BAR_GREEN_2)
  #undef LED_BAR_GREEN_2
#endif
#if defined(_WIN32) && defined(LED_BAR_YELLOW_2)
  #undef LED_BAR_YELLOW_2
#endif
#if defined(_WIN32) && defined(LED_BAR_BLUE_2)
  #undef LED_BAR_BLUE_2
#endif
#if defined(_WIN32) && defined(LED_BAR_MAGENTA_2)
  #undef LED_BAR_MAGENTA_2
#endif
#if defined(_WIN32) && defined(LED_BAR_CYAN_2)
  #undef LED_BAR_CYAN_2
#endif
#if defined(_WIN32) && defined(LED_BAR_WHITE_2)
  #undef LED_BAR_WHITE_2
#endif
#if defined(_WIN32) && defined(LED_ALL)
  #undef LED_ALL
#endif
#if defined(_WIN32) && defined(STATE_OFF)
  #undef STATE_OFF
#endif
#if defined(_WIN32) && defined(STATE_ON)
  #undef STATE_ON
#endif
#if defined(_WIN32) && defined(STATE_BLINK)
  #undef STATE_BLINK
#endif
#if defined(_WIN32) && defined(STATE_KEEP)
  #undef STATE_KEEP
#endif

  enum {
    LED_0 = 0u,
    LED_1 = 1u,
    LED_2 = 2u,
    LED_3 = 3u,
    LED_4 = 4u,
    LED_5 = 5u,
    LED_6 = 6u,
    LED_7 = 7u,
    LED_8 = 8u,
    LED_9 = 9u,
    LED_10 = 10u,
    LED_11 = 11u,
    LED_BAR_OFF = 100u,
    LED_BAR_RED = 101u,
    LED_BAR_GREEN = 102u,
    LED_BAR_YELLOW = 103u,
    LED_BAR_BLUE = 104u,
    LED_BAR_MAGENTA = 105u,
    LED_BAR_CYAN = 106u,
    LED_BAR_WHITE = 107u,
    LED_BAR_OFF_2 = 200u,
    LED_BAR_RED_2 = 201u,
    LED_BAR_GREEN_2 = 202u,
    LED_BAR_YELLOW_2 = 203u,
    LED_BAR_BLUE_2 = 204u,
    LED_BAR_MAGENTA_2 = 205u,
    LED_BAR_CYAN_2 = 206u,
    LED_BAR_WHITE_2 = 207u,
    LED_ALL = 255u,
    STATE_OFF = 0u,
    STATE_ON = 1u,
    STATE_BLINK = 2u,
    STATE_KEEP = 3u,
  };


  typedef boost::shared_ptr< ::twinny_msgs::LEDControl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::twinny_msgs::LEDControl_<ContainerAllocator> const> ConstPtr;

}; // struct LEDControl_

typedef ::twinny_msgs::LEDControl_<std::allocator<void> > LEDControl;

typedef boost::shared_ptr< ::twinny_msgs::LEDControl > LEDControlPtr;
typedef boost::shared_ptr< ::twinny_msgs::LEDControl const> LEDControlConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::twinny_msgs::LEDControl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::twinny_msgs::LEDControl_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::twinny_msgs::LEDControl_<ContainerAllocator1> & lhs, const ::twinny_msgs::LEDControl_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.type == rhs.type &&
    lhs.ID == rhs.ID &&
    lhs.STATE == rhs.STATE;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::twinny_msgs::LEDControl_<ContainerAllocator1> & lhs, const ::twinny_msgs::LEDControl_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace twinny_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::twinny_msgs::LEDControl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::twinny_msgs::LEDControl_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::twinny_msgs::LEDControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::twinny_msgs::LEDControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::twinny_msgs::LEDControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::twinny_msgs::LEDControl_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::twinny_msgs::LEDControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "280cc3f1ed08eaa950d3ccca2f9e6e3e";
  }

  static const char* value(const ::twinny_msgs::LEDControl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x280cc3f1ed08eaa9ULL;
  static const uint64_t static_value2 = 0x50d3ccca2f9e6e3eULL;
};

template<class ContainerAllocator>
struct DataType< ::twinny_msgs::LEDControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "twinny_msgs/LEDControl";
  }

  static const char* value(const ::twinny_msgs::LEDControl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::twinny_msgs::LEDControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"string type\n"
"\n"
"uint8 LED_0=0\n"
"uint8 LED_1=1\n"
"uint8 LED_2=2\n"
"uint8 LED_3=3 \n"
"uint8 LED_4=4\n"
"uint8 LED_5=5\n"
"\n"
"uint8 LED_6=6\n"
"uint8 LED_7=7\n"
"uint8 LED_8=8\n"
"uint8 LED_9=9\n"
"uint8 LED_10=10\n"
"uint8 LED_11=11\n"
"\n"
"uint8 LED_BAR_OFF=100\n"
"uint8 LED_BAR_RED=101\n"
"uint8 LED_BAR_GREEN=102\n"
"uint8 LED_BAR_YELLOW=103\n"
"uint8 LED_BAR_BLUE=104\n"
"uint8 LED_BAR_MAGENTA=105\n"
"uint8 LED_BAR_CYAN=106\n"
"uint8 LED_BAR_WHITE=107\n"
"\n"
"uint8 LED_BAR_OFF_2=200\n"
"uint8 LED_BAR_RED_2=201\n"
"uint8 LED_BAR_GREEN_2=202\n"
"uint8 LED_BAR_YELLOW_2=203\n"
"uint8 LED_BAR_BLUE_2=204\n"
"uint8 LED_BAR_MAGENTA_2=205\n"
"uint8 LED_BAR_CYAN_2=206\n"
"uint8 LED_BAR_WHITE_2=207\n"
"\n"
"uint8 LED_ALL=255\n"
"\n"
"uint8 STATE_OFF=0\n"
"uint8 STATE_ON=1\n"
"uint8 STATE_BLINK=2\n"
"uint8 STATE_KEEP=3\n"
"\n"
"uint8 ID\n"
"uint8 STATE\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::twinny_msgs::LEDControl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::twinny_msgs::LEDControl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.type);
      stream.next(m.ID);
      stream.next(m.STATE);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LEDControl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::twinny_msgs::LEDControl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::twinny_msgs::LEDControl_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.type);
    s << indent << "ID: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ID);
    s << indent << "STATE: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.STATE);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TWINNY_MSGS_MESSAGE_LEDCONTROL_H
