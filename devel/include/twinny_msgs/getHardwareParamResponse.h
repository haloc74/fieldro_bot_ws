// Generated by gencpp from file twinny_msgs/getHardwareParamResponse.msg
// DO NOT EDIT!


#ifndef TWINNY_MSGS_MESSAGE_GETHARDWAREPARAMRESPONSE_H
#define TWINNY_MSGS_MESSAGE_GETHARDWAREPARAMRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace twinny_msgs
{
template <class ContainerAllocator>
struct getHardwareParamResponse_
{
  typedef getHardwareParamResponse_<ContainerAllocator> Type;

  getHardwareParamResponse_()
    : success(false)
    , data()  {
    }
  getHardwareParamResponse_(const ContainerAllocator& _alloc)
    : success(false)
    , data(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _success_type;
  _success_type success;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::twinny_msgs::getHardwareParamResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::twinny_msgs::getHardwareParamResponse_<ContainerAllocator> const> ConstPtr;

}; // struct getHardwareParamResponse_

typedef ::twinny_msgs::getHardwareParamResponse_<std::allocator<void> > getHardwareParamResponse;

typedef boost::shared_ptr< ::twinny_msgs::getHardwareParamResponse > getHardwareParamResponsePtr;
typedef boost::shared_ptr< ::twinny_msgs::getHardwareParamResponse const> getHardwareParamResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::twinny_msgs::getHardwareParamResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::twinny_msgs::getHardwareParamResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::twinny_msgs::getHardwareParamResponse_<ContainerAllocator1> & lhs, const ::twinny_msgs::getHardwareParamResponse_<ContainerAllocator2> & rhs)
{
  return lhs.success == rhs.success &&
    lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::twinny_msgs::getHardwareParamResponse_<ContainerAllocator1> & lhs, const ::twinny_msgs::getHardwareParamResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace twinny_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::twinny_msgs::getHardwareParamResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::twinny_msgs::getHardwareParamResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::twinny_msgs::getHardwareParamResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::twinny_msgs::getHardwareParamResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::twinny_msgs::getHardwareParamResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::twinny_msgs::getHardwareParamResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::twinny_msgs::getHardwareParamResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "18fa309f5109d7d404151da58f11cb68";
  }

  static const char* value(const ::twinny_msgs::getHardwareParamResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x18fa309f5109d7d4ULL;
  static const uint64_t static_value2 = 0x04151da58f11cb68ULL;
};

template<class ContainerAllocator>
struct DataType< ::twinny_msgs::getHardwareParamResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "twinny_msgs/getHardwareParamResponse";
  }

  static const char* value(const ::twinny_msgs::getHardwareParamResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::twinny_msgs::getHardwareParamResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool success                # 요청 성공시 success flag = true\n"
"string data                 # 응답: 저장된 json 데이터\n"
"\n"
"\n"
;
  }

  static const char* value(const ::twinny_msgs::getHardwareParamResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::twinny_msgs::getHardwareParamResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.success);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct getHardwareParamResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::twinny_msgs::getHardwareParamResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::twinny_msgs::getHardwareParamResponse_<ContainerAllocator>& v)
  {
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    s << indent << "data: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TWINNY_MSGS_MESSAGE_GETHARDWAREPARAMRESPONSE_H
