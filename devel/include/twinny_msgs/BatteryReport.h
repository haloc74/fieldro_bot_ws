// Generated by gencpp from file twinny_msgs/BatteryReport.msg
// DO NOT EDIT!


#ifndef TWINNY_MSGS_MESSAGE_BATTERYREPORT_H
#define TWINNY_MSGS_MESSAGE_BATTERYREPORT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace twinny_msgs
{
template <class ContainerAllocator>
struct BatteryReport_
{
  typedef BatteryReport_<ContainerAllocator> Type;

  BatteryReport_()
    : header()
    , STATE(0)
    , Battery_power(0)
    , Battery_current(0.0)
    , Battery_voltage(0.0)
    , Charge_flag(0)
    , Docking_sensor_flag(0)
    , Charger_relay_status(0)
    , Power_saving_mode(0)
    , Wire_charging_mode(0)
    , Docking_charge_enable(0)
    , Battery_full_flag(0)
    , Battery_empty_flag(0)  {
    }
  BatteryReport_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , STATE(0)
    , Battery_power(0)
    , Battery_current(0.0)
    , Battery_voltage(0.0)
    , Charge_flag(0)
    , Docking_sensor_flag(0)
    , Charger_relay_status(0)
    , Power_saving_mode(0)
    , Wire_charging_mode(0)
    , Docking_charge_enable(0)
    , Battery_full_flag(0)
    , Battery_empty_flag(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _STATE_type;
  _STATE_type STATE;

   typedef uint8_t _Battery_power_type;
  _Battery_power_type Battery_power;

   typedef double _Battery_current_type;
  _Battery_current_type Battery_current;

   typedef double _Battery_voltage_type;
  _Battery_voltage_type Battery_voltage;

   typedef uint8_t _Charge_flag_type;
  _Charge_flag_type Charge_flag;

   typedef uint8_t _Docking_sensor_flag_type;
  _Docking_sensor_flag_type Docking_sensor_flag;

   typedef uint8_t _Charger_relay_status_type;
  _Charger_relay_status_type Charger_relay_status;

   typedef uint8_t _Power_saving_mode_type;
  _Power_saving_mode_type Power_saving_mode;

   typedef uint8_t _Wire_charging_mode_type;
  _Wire_charging_mode_type Wire_charging_mode;

   typedef uint8_t _Docking_charge_enable_type;
  _Docking_charge_enable_type Docking_charge_enable;

   typedef uint8_t _Battery_full_flag_type;
  _Battery_full_flag_type Battery_full_flag;

   typedef uint8_t _Battery_empty_flag_type;
  _Battery_empty_flag_type Battery_empty_flag;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(NORMAL)
  #undef NORMAL
#endif
#if defined(_WIN32) && defined(ERROR)
  #undef ERROR
#endif
#if defined(_WIN32) && defined(CHARGING)
  #undef CHARGING
#endif
#if defined(_WIN32) && defined(NOCHARGING)
  #undef NOCHARGING
#endif
#if defined(_WIN32) && defined(DOCKING_SENSOR_OFF)
  #undef DOCKING_SENSOR_OFF
#endif
#if defined(_WIN32) && defined(DOCKING_SENSOR_ON)
  #undef DOCKING_SENSOR_ON
#endif
#if defined(_WIN32) && defined(CHARGER_RELAY_OFF)
  #undef CHARGER_RELAY_OFF
#endif
#if defined(_WIN32) && defined(CHARGER_RELAY_ON)
  #undef CHARGER_RELAY_ON
#endif
#if defined(_WIN32) && defined(POWER_SAVING_OFF)
  #undef POWER_SAVING_OFF
#endif
#if defined(_WIN32) && defined(POWER_SAVING_ON)
  #undef POWER_SAVING_ON
#endif
#if defined(_WIN32) && defined(WIRE_CHARGING_MODE_OFF)
  #undef WIRE_CHARGING_MODE_OFF
#endif
#if defined(_WIN32) && defined(WIRE_CHARGING_MODE_ON)
  #undef WIRE_CHARGING_MODE_ON
#endif
#if defined(_WIN32) && defined(DOCKING_CHARGE_DISABLE)
  #undef DOCKING_CHARGE_DISABLE
#endif
#if defined(_WIN32) && defined(DOCKING_CHARGE_ENABLE)
  #undef DOCKING_CHARGE_ENABLE
#endif
#if defined(_WIN32) && defined(BATTERY_NONFULL)
  #undef BATTERY_NONFULL
#endif
#if defined(_WIN32) && defined(BATTERY_FULL)
  #undef BATTERY_FULL
#endif
#if defined(_WIN32) && defined(BATTERY_NONZERO)
  #undef BATTERY_NONZERO
#endif
#if defined(_WIN32) && defined(BATTERY_ZERO)
  #undef BATTERY_ZERO
#endif

  enum {
    NORMAL = 0u,
    ERROR = 1u,
    CHARGING = 1u,
    NOCHARGING = 0u,
    DOCKING_SENSOR_OFF = 0u,
    DOCKING_SENSOR_ON = 1u,
    CHARGER_RELAY_OFF = 0u,
    CHARGER_RELAY_ON = 1u,
    POWER_SAVING_OFF = 0u,
    POWER_SAVING_ON = 1u,
    WIRE_CHARGING_MODE_OFF = 0u,
    WIRE_CHARGING_MODE_ON = 1u,
    DOCKING_CHARGE_DISABLE = 0u,
    DOCKING_CHARGE_ENABLE = 1u,
    BATTERY_NONFULL = 0u,
    BATTERY_FULL = 1u,
    BATTERY_NONZERO = 0u,
    BATTERY_ZERO = 1u,
  };


  typedef boost::shared_ptr< ::twinny_msgs::BatteryReport_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::twinny_msgs::BatteryReport_<ContainerAllocator> const> ConstPtr;

}; // struct BatteryReport_

typedef ::twinny_msgs::BatteryReport_<std::allocator<void> > BatteryReport;

typedef boost::shared_ptr< ::twinny_msgs::BatteryReport > BatteryReportPtr;
typedef boost::shared_ptr< ::twinny_msgs::BatteryReport const> BatteryReportConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::twinny_msgs::BatteryReport_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::twinny_msgs::BatteryReport_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::twinny_msgs::BatteryReport_<ContainerAllocator1> & lhs, const ::twinny_msgs::BatteryReport_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.STATE == rhs.STATE &&
    lhs.Battery_power == rhs.Battery_power &&
    lhs.Battery_current == rhs.Battery_current &&
    lhs.Battery_voltage == rhs.Battery_voltage &&
    lhs.Charge_flag == rhs.Charge_flag &&
    lhs.Docking_sensor_flag == rhs.Docking_sensor_flag &&
    lhs.Charger_relay_status == rhs.Charger_relay_status &&
    lhs.Power_saving_mode == rhs.Power_saving_mode &&
    lhs.Wire_charging_mode == rhs.Wire_charging_mode &&
    lhs.Docking_charge_enable == rhs.Docking_charge_enable &&
    lhs.Battery_full_flag == rhs.Battery_full_flag &&
    lhs.Battery_empty_flag == rhs.Battery_empty_flag;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::twinny_msgs::BatteryReport_<ContainerAllocator1> & lhs, const ::twinny_msgs::BatteryReport_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace twinny_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::twinny_msgs::BatteryReport_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::twinny_msgs::BatteryReport_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::twinny_msgs::BatteryReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::twinny_msgs::BatteryReport_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::twinny_msgs::BatteryReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::twinny_msgs::BatteryReport_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::twinny_msgs::BatteryReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e9a48e58d2c7cc1f7859a62328338891";
  }

  static const char* value(const ::twinny_msgs::BatteryReport_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe9a48e58d2c7cc1fULL;
  static const uint64_t static_value2 = 0x7859a62328338891ULL;
};

template<class ContainerAllocator>
struct DataType< ::twinny_msgs::BatteryReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "twinny_msgs/BatteryReport";
  }

  static const char* value(const ::twinny_msgs::BatteryReport_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::twinny_msgs::BatteryReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"uint8 NORMAL=0\n"
"uint8 ERROR=1\n"
"uint8 STATE  \n"
"\n"
"uint8 Battery_power\n"
"\n"
"float64 Battery_current\n"
"float64 Battery_voltage\n"
"\n"
"uint8 CHARGING = 1\n"
"uint8 NOCHARGING = 0\n"
"uint8 Charge_flag  \n"
"\n"
"uint8 DOCKING_SENSOR_OFF = 0\n"
"uint8 DOCKING_SENSOR_ON = 1\n"
"uint8 Docking_sensor_flag\n"
"\n"
"uint8 CHARGER_RELAY_OFF = 0\n"
"uint8 CHARGER_RELAY_ON = 1\n"
"uint8 Charger_relay_status\n"
"\n"
"uint8 POWER_SAVING_OFF = 0\n"
"uint8 POWER_SAVING_ON = 1\n"
"uint8 Power_saving_mode\n"
"\n"
"uint8 WIRE_CHARGING_MODE_OFF = 0\n"
"uint8 WIRE_CHARGING_MODE_ON = 1\n"
"uint8 Wire_charging_mode\n"
"\n"
"uint8 DOCKING_CHARGE_DISABLE = 0\n"
"uint8 DOCKING_CHARGE_ENABLE = 1\n"
"uint8 Docking_charge_enable\n"
"\n"
"uint8 BATTERY_NONFULL = 0\n"
"uint8 BATTERY_FULL = 1\n"
"uint8 Battery_full_flag\n"
"\n"
"uint8 BATTERY_NONZERO = 0\n"
"uint8 BATTERY_ZERO = 1\n"
"uint8 Battery_empty_flag\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::twinny_msgs::BatteryReport_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::twinny_msgs::BatteryReport_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.STATE);
      stream.next(m.Battery_power);
      stream.next(m.Battery_current);
      stream.next(m.Battery_voltage);
      stream.next(m.Charge_flag);
      stream.next(m.Docking_sensor_flag);
      stream.next(m.Charger_relay_status);
      stream.next(m.Power_saving_mode);
      stream.next(m.Wire_charging_mode);
      stream.next(m.Docking_charge_enable);
      stream.next(m.Battery_full_flag);
      stream.next(m.Battery_empty_flag);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BatteryReport_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::twinny_msgs::BatteryReport_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::twinny_msgs::BatteryReport_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "STATE: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.STATE);
    s << indent << "Battery_power: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Battery_power);
    s << indent << "Battery_current: ";
    Printer<double>::stream(s, indent + "  ", v.Battery_current);
    s << indent << "Battery_voltage: ";
    Printer<double>::stream(s, indent + "  ", v.Battery_voltage);
    s << indent << "Charge_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Charge_flag);
    s << indent << "Docking_sensor_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Docking_sensor_flag);
    s << indent << "Charger_relay_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Charger_relay_status);
    s << indent << "Power_saving_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Power_saving_mode);
    s << indent << "Wire_charging_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Wire_charging_mode);
    s << indent << "Docking_charge_enable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Docking_charge_enable);
    s << indent << "Battery_full_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Battery_full_flag);
    s << indent << "Battery_empty_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Battery_empty_flag);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TWINNY_MSGS_MESSAGE_BATTERYREPORT_H
