// Generated by gencpp from file twinny_msgs/SonarReport.msg
// DO NOT EDIT!


#ifndef TWINNY_MSGS_MESSAGE_SONARREPORT_H
#define TWINNY_MSGS_MESSAGE_SONARREPORT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <sensor_msgs/Range.h>

namespace twinny_msgs
{
template <class ContainerAllocator>
struct SonarReport_
{
  typedef SonarReport_<ContainerAllocator> Type;

  SonarReport_()
    : header()
    , sonar_range()  {
    }
  SonarReport_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , sonar_range()  {
  (void)_alloc;
      sonar_range.assign( ::sensor_msgs::Range_<ContainerAllocator> (_alloc));
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef boost::array< ::sensor_msgs::Range_<ContainerAllocator> , 12>  _sonar_range_type;
  _sonar_range_type sonar_range;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(LEFT_SONAR)
  #undef LEFT_SONAR
#endif
#if defined(_WIN32) && defined(FRONT_SONAR)
  #undef FRONT_SONAR
#endif
#if defined(_WIN32) && defined(RIGHT_SONAR)
  #undef RIGHT_SONAR
#endif
#if defined(_WIN32) && defined(FRONT_LEFT_SONAR)
  #undef FRONT_LEFT_SONAR
#endif
#if defined(_WIN32) && defined(FRONT_MID_SONAR)
  #undef FRONT_MID_SONAR
#endif
#if defined(_WIN32) && defined(FRONT_RIGHT_SONAR)
  #undef FRONT_RIGHT_SONAR
#endif
#if defined(_WIN32) && defined(RIGHT_FRONT_SONAR)
  #undef RIGHT_FRONT_SONAR
#endif
#if defined(_WIN32) && defined(RIGHT_MID_SONAR)
  #undef RIGHT_MID_SONAR
#endif
#if defined(_WIN32) && defined(RIGHT_BACK_SONAR)
  #undef RIGHT_BACK_SONAR
#endif
#if defined(_WIN32) && defined(BACK_RIGHT_SONAR)
  #undef BACK_RIGHT_SONAR
#endif
#if defined(_WIN32) && defined(BACK_MID_SONAR)
  #undef BACK_MID_SONAR
#endif
#if defined(_WIN32) && defined(BACK_LEFT_SONAR)
  #undef BACK_LEFT_SONAR
#endif
#if defined(_WIN32) && defined(LEFT_BACK_SONAR)
  #undef LEFT_BACK_SONAR
#endif
#if defined(_WIN32) && defined(LEFT_MID_SONAR)
  #undef LEFT_MID_SONAR
#endif
#if defined(_WIN32) && defined(LEFT_FRONT_SONAR)
  #undef LEFT_FRONT_SONAR
#endif

  enum {
    LEFT_SONAR = 0u,
    FRONT_SONAR = 1u,
    RIGHT_SONAR = 2u,
    FRONT_LEFT_SONAR = 0u,
    FRONT_MID_SONAR = 1u,
    FRONT_RIGHT_SONAR = 2u,
    RIGHT_FRONT_SONAR = 3u,
    RIGHT_MID_SONAR = 4u,
    RIGHT_BACK_SONAR = 5u,
    BACK_RIGHT_SONAR = 6u,
    BACK_MID_SONAR = 7u,
    BACK_LEFT_SONAR = 8u,
    LEFT_BACK_SONAR = 9u,
    LEFT_MID_SONAR = 10u,
    LEFT_FRONT_SONAR = 11u,
  };


  typedef boost::shared_ptr< ::twinny_msgs::SonarReport_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::twinny_msgs::SonarReport_<ContainerAllocator> const> ConstPtr;

}; // struct SonarReport_

typedef ::twinny_msgs::SonarReport_<std::allocator<void> > SonarReport;

typedef boost::shared_ptr< ::twinny_msgs::SonarReport > SonarReportPtr;
typedef boost::shared_ptr< ::twinny_msgs::SonarReport const> SonarReportConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::twinny_msgs::SonarReport_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::twinny_msgs::SonarReport_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::twinny_msgs::SonarReport_<ContainerAllocator1> & lhs, const ::twinny_msgs::SonarReport_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.sonar_range == rhs.sonar_range;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::twinny_msgs::SonarReport_<ContainerAllocator1> & lhs, const ::twinny_msgs::SonarReport_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace twinny_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::twinny_msgs::SonarReport_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::twinny_msgs::SonarReport_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::twinny_msgs::SonarReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::twinny_msgs::SonarReport_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::twinny_msgs::SonarReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::twinny_msgs::SonarReport_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::twinny_msgs::SonarReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "12459e57aa4616e3ed20f17651e15882";
  }

  static const char* value(const ::twinny_msgs::SonarReport_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x12459e57aa4616e3ULL;
  static const uint64_t static_value2 = 0xed20f17651e15882ULL;
};

template<class ContainerAllocator>
struct DataType< ::twinny_msgs::SonarReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "twinny_msgs/SonarReport";
  }

  static const char* value(const ::twinny_msgs::SonarReport_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::twinny_msgs::SonarReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"uint8 LEFT_SONAR=0\n"
"uint8 FRONT_SONAR=1\n"
"uint8 RIGHT_SONAR=2\n"
"\n"
"uint8 FRONT_LEFT_SONAR=0\n"
"uint8 FRONT_MID_SONAR=1\n"
"uint8 FRONT_RIGHT_SONAR=2\n"
"\n"
"uint8 RIGHT_FRONT_SONAR=3\n"
"uint8 RIGHT_MID_SONAR=4\n"
"uint8 RIGHT_BACK_SONAR=5\n"
"\n"
"uint8 BACK_RIGHT_SONAR=6\n"
"uint8 BACK_MID_SONAR=7\n"
"uint8 BACK_LEFT_SONAR=8\n"
"\n"
"uint8 LEFT_BACK_SONAR=9\n"
"uint8 LEFT_MID_SONAR=10\n"
"uint8 LEFT_FRONT_SONAR=11\n"
"\n"
"sensor_msgs/Range[12] sonar_range\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/Range\n"
"# Single range reading from an active ranger that emits energy and reports\n"
"# one range reading that is valid along an arc at the distance measured. \n"
"# This message is  not appropriate for laser scanners. See the LaserScan\n"
"# message if you are working with a laser scanner.\n"
"\n"
"# This message also can represent a fixed-distance (binary) ranger.  This\n"
"# sensor will have min_range===max_range===distance of detection.\n"
"# These sensors follow REP 117 and will output -Inf if the object is detected\n"
"# and +Inf if the object is outside of the detection range.\n"
"\n"
"Header header           # timestamp in the header is the time the ranger\n"
"                        # returned the distance reading\n"
"\n"
"# Radiation type enums\n"
"# If you want a value added to this list, send an email to the ros-users list\n"
"uint8 ULTRASOUND=0\n"
"uint8 INFRARED=1\n"
"\n"
"uint8 radiation_type    # the type of radiation used by the sensor\n"
"                        # (sound, IR, etc) [enum]\n"
"\n"
"float32 field_of_view   # the size of the arc that the distance reading is\n"
"                        # valid for [rad]\n"
"                        # the object causing the range reading may have\n"
"                        # been anywhere within -field_of_view/2 and\n"
"                        # field_of_view/2 at the measured range. \n"
"                        # 0 angle corresponds to the x-axis of the sensor.\n"
"\n"
"float32 min_range       # minimum range value [m]\n"
"float32 max_range       # maximum range value [m]\n"
"                        # Fixed distance rangers require min_range==max_range\n"
"\n"
"float32 range           # range data [m]\n"
"                        # (Note: values < range_min or > range_max\n"
"                        # should be discarded)\n"
"                        # Fixed distance rangers only output -Inf or +Inf.\n"
"                        # -Inf represents a detection within fixed distance.\n"
"                        # (Detection too close to the sensor to quantify)\n"
"                        # +Inf represents no detection within the fixed distance.\n"
"                        # (Object out of range)\n"
;
  }

  static const char* value(const ::twinny_msgs::SonarReport_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::twinny_msgs::SonarReport_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.sonar_range);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SonarReport_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::twinny_msgs::SonarReport_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::twinny_msgs::SonarReport_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "sonar_range[]" << std::endl;
    for (size_t i = 0; i < v.sonar_range.size(); ++i)
    {
      s << indent << "  sonar_range[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::sensor_msgs::Range_<ContainerAllocator> >::stream(s, indent + "    ", v.sonar_range[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TWINNY_MSGS_MESSAGE_SONARREPORT_H
