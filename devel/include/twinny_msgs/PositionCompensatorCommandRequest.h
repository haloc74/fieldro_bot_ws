// Generated by gencpp from file twinny_msgs/PositionCompensatorCommandRequest.msg
// DO NOT EDIT!


#ifndef TWINNY_MSGS_MESSAGE_POSITIONCOMPENSATORCOMMANDREQUEST_H
#define TWINNY_MSGS_MESSAGE_POSITIONCOMPENSATORCOMMANDREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace twinny_msgs
{
template <class ContainerAllocator>
struct PositionCompensatorCommandRequest_
{
  typedef PositionCompensatorCommandRequest_<ContainerAllocator> Type;

  PositionCompensatorCommandRequest_()
    : command(0)
    , id(0)
    , localized_line_A_x(0.0)
    , localized_line_A_y(0.0)
    , localized_line_B_x(0.0)
    , localized_line_B_y(0.0)
    , type(0)
    , equipment_desired_x(0.0)
    , equipment_desired_y(0.0)  {
    }
  PositionCompensatorCommandRequest_(const ContainerAllocator& _alloc)
    : command(0)
    , id(0)
    , localized_line_A_x(0.0)
    , localized_line_A_y(0.0)
    , localized_line_B_x(0.0)
    , localized_line_B_y(0.0)
    , type(0)
    , equipment_desired_x(0.0)
    , equipment_desired_y(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _command_type;
  _command_type command;

   typedef int32_t _id_type;
  _id_type id;

   typedef double _localized_line_A_x_type;
  _localized_line_A_x_type localized_line_A_x;

   typedef double _localized_line_A_y_type;
  _localized_line_A_y_type localized_line_A_y;

   typedef double _localized_line_B_x_type;
  _localized_line_B_x_type localized_line_B_x;

   typedef double _localized_line_B_y_type;
  _localized_line_B_y_type localized_line_B_y;

   typedef int32_t _type_type;
  _type_type type;

   typedef double _equipment_desired_x_type;
  _equipment_desired_x_type equipment_desired_x;

   typedef double _equipment_desired_y_type;
  _equipment_desired_y_type equipment_desired_y;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(START)
  #undef START
#endif
#if defined(_WIN32) && defined(STOP)
  #undef STOP
#endif
#if defined(_WIN32) && defined(HANA_MACHINE_LONG)
  #undef HANA_MACHINE_LONG
#endif
#if defined(_WIN32) && defined(HANA_MACHINE_SHORT_SINGLE_EDGE)
  #undef HANA_MACHINE_SHORT_SINGLE_EDGE
#endif
#if defined(_WIN32) && defined(HANA_STOCKER)
  #undef HANA_STOCKER
#endif
#if defined(_WIN32) && defined(HANA_MACHINE_SHORT_DOUBLE_EDGE)
  #undef HANA_MACHINE_SHORT_DOUBLE_EDGE
#endif
#if defined(_WIN32) && defined(NEPESARK_SHELF)
  #undef NEPESARK_SHELF
#endif

  enum {
    START = 0,
    STOP = 1,
    HANA_MACHINE_LONG = 1,
    HANA_MACHINE_SHORT_SINGLE_EDGE = 2,
    HANA_STOCKER = 3,
    HANA_MACHINE_SHORT_DOUBLE_EDGE = 4,
    NEPESARK_SHELF = 5,
  };


  typedef boost::shared_ptr< ::twinny_msgs::PositionCompensatorCommandRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::twinny_msgs::PositionCompensatorCommandRequest_<ContainerAllocator> const> ConstPtr;

}; // struct PositionCompensatorCommandRequest_

typedef ::twinny_msgs::PositionCompensatorCommandRequest_<std::allocator<void> > PositionCompensatorCommandRequest;

typedef boost::shared_ptr< ::twinny_msgs::PositionCompensatorCommandRequest > PositionCompensatorCommandRequestPtr;
typedef boost::shared_ptr< ::twinny_msgs::PositionCompensatorCommandRequest const> PositionCompensatorCommandRequestConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::twinny_msgs::PositionCompensatorCommandRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::twinny_msgs::PositionCompensatorCommandRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::twinny_msgs::PositionCompensatorCommandRequest_<ContainerAllocator1> & lhs, const ::twinny_msgs::PositionCompensatorCommandRequest_<ContainerAllocator2> & rhs)
{
  return lhs.command == rhs.command &&
    lhs.id == rhs.id &&
    lhs.localized_line_A_x == rhs.localized_line_A_x &&
    lhs.localized_line_A_y == rhs.localized_line_A_y &&
    lhs.localized_line_B_x == rhs.localized_line_B_x &&
    lhs.localized_line_B_y == rhs.localized_line_B_y &&
    lhs.type == rhs.type &&
    lhs.equipment_desired_x == rhs.equipment_desired_x &&
    lhs.equipment_desired_y == rhs.equipment_desired_y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::twinny_msgs::PositionCompensatorCommandRequest_<ContainerAllocator1> & lhs, const ::twinny_msgs::PositionCompensatorCommandRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace twinny_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::twinny_msgs::PositionCompensatorCommandRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::twinny_msgs::PositionCompensatorCommandRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::twinny_msgs::PositionCompensatorCommandRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::twinny_msgs::PositionCompensatorCommandRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::twinny_msgs::PositionCompensatorCommandRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::twinny_msgs::PositionCompensatorCommandRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::twinny_msgs::PositionCompensatorCommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2a1735ad405e3a523cd261b59cc6c1ae";
  }

  static const char* value(const ::twinny_msgs::PositionCompensatorCommandRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2a1735ad405e3a52ULL;
  static const uint64_t static_value2 = 0x3cd261b59cc6c1aeULL;
};

template<class ContainerAllocator>
struct DataType< ::twinny_msgs::PositionCompensatorCommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "twinny_msgs/PositionCompensatorCommandRequest";
  }

  static const char* value(const ::twinny_msgs::PositionCompensatorCommandRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::twinny_msgs::PositionCompensatorCommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 START = 0\n"
"int32 STOP = 1\n"
"int32 command\n"
"\n"
"int32 id\n"
"\n"
"float64 localized_line_A_x\n"
"float64 localized_line_A_y\n"
"float64 localized_line_B_x\n"
"float64 localized_line_B_y\n"
"\n"
"int32 HANA_MACHINE_LONG = 1\n"
"int32 HANA_MACHINE_SHORT_SINGLE_EDGE = 2\n"
"int32 HANA_STOCKER = 3\n"
"int32 HANA_MACHINE_SHORT_DOUBLE_EDGE = 4\n"
"int32 NEPESARK_SHELF = 5\n"
"int32 type\n"
"\n"
"float64 equipment_desired_x\n"
"float64 equipment_desired_y\n"
;
  }

  static const char* value(const ::twinny_msgs::PositionCompensatorCommandRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::twinny_msgs::PositionCompensatorCommandRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.command);
      stream.next(m.id);
      stream.next(m.localized_line_A_x);
      stream.next(m.localized_line_A_y);
      stream.next(m.localized_line_B_x);
      stream.next(m.localized_line_B_y);
      stream.next(m.type);
      stream.next(m.equipment_desired_x);
      stream.next(m.equipment_desired_y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PositionCompensatorCommandRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::twinny_msgs::PositionCompensatorCommandRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::twinny_msgs::PositionCompensatorCommandRequest_<ContainerAllocator>& v)
  {
    s << indent << "command: ";
    Printer<int32_t>::stream(s, indent + "  ", v.command);
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "localized_line_A_x: ";
    Printer<double>::stream(s, indent + "  ", v.localized_line_A_x);
    s << indent << "localized_line_A_y: ";
    Printer<double>::stream(s, indent + "  ", v.localized_line_A_y);
    s << indent << "localized_line_B_x: ";
    Printer<double>::stream(s, indent + "  ", v.localized_line_B_x);
    s << indent << "localized_line_B_y: ";
    Printer<double>::stream(s, indent + "  ", v.localized_line_B_y);
    s << indent << "type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.type);
    s << indent << "equipment_desired_x: ";
    Printer<double>::stream(s, indent + "  ", v.equipment_desired_x);
    s << indent << "equipment_desired_y: ";
    Printer<double>::stream(s, indent + "  ", v.equipment_desired_y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TWINNY_MSGS_MESSAGE_POSITIONCOMPENSATORCOMMANDREQUEST_H
