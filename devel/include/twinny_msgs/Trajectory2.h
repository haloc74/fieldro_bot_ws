// Generated by gencpp from file twinny_msgs/Trajectory2.msg
// DO NOT EDIT!


#ifndef TWINNY_MSGS_MESSAGE_TRAJECTORY2_H
#define TWINNY_MSGS_MESSAGE_TRAJECTORY2_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <twinny_msgs/DWMRState.h>
#include <twinny_msgs/Position.h>

namespace twinny_msgs
{
template <class ContainerAllocator>
struct Trajectory2_
{
  typedef Trajectory2_<ContainerAllocator> Type;

  Trajectory2_()
    : header()
    , command_mode(0)
    , command_value(0)
    , path_legnth(0)
    , sampling_period(0.0)
    , state()
    , object()  {
    }
  Trajectory2_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , command_mode(0)
    , command_value(0)
    , path_legnth(0)
    , sampling_period(0.0)
    , state()
    , object(_alloc)  {
  (void)_alloc;
      state.assign( ::twinny_msgs::DWMRState_<ContainerAllocator> (_alloc));
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _command_mode_type;
  _command_mode_type command_mode;

   typedef uint8_t _command_value_type;
  _command_value_type command_value;

   typedef uint8_t _path_legnth_type;
  _path_legnth_type path_legnth;

   typedef double _sampling_period_type;
  _sampling_period_type sampling_period;

   typedef boost::array< ::twinny_msgs::DWMRState_<ContainerAllocator> , 201>  _state_type;
  _state_type state;

   typedef  ::twinny_msgs::Position_<ContainerAllocator>  _object_type;
  _object_type object;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(MAX_LENGTH)
  #undef MAX_LENGTH
#endif
#if defined(_WIN32) && defined(NORMAL)
  #undef NORMAL
#endif
#if defined(_WIN32) && defined(VEL_ONLY)
  #undef VEL_ONLY
#endif
#if defined(_WIN32) && defined(E_STOP)
  #undef E_STOP
#endif
#if defined(_WIN32) && defined(STOP_AND_ROTATION)
  #undef STOP_AND_ROTATION
#endif
#if defined(_WIN32) && defined(FOCUSING)
  #undef FOCUSING
#endif

  enum {
    MAX_LENGTH = 200u,
    NORMAL = 0u,
    VEL_ONLY = 1u,
    E_STOP = 2u,
    STOP_AND_ROTATION = 3u,
    FOCUSING = 4u,
  };


  typedef boost::shared_ptr< ::twinny_msgs::Trajectory2_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::twinny_msgs::Trajectory2_<ContainerAllocator> const> ConstPtr;

}; // struct Trajectory2_

typedef ::twinny_msgs::Trajectory2_<std::allocator<void> > Trajectory2;

typedef boost::shared_ptr< ::twinny_msgs::Trajectory2 > Trajectory2Ptr;
typedef boost::shared_ptr< ::twinny_msgs::Trajectory2 const> Trajectory2ConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::twinny_msgs::Trajectory2_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::twinny_msgs::Trajectory2_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::twinny_msgs::Trajectory2_<ContainerAllocator1> & lhs, const ::twinny_msgs::Trajectory2_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.command_mode == rhs.command_mode &&
    lhs.command_value == rhs.command_value &&
    lhs.path_legnth == rhs.path_legnth &&
    lhs.sampling_period == rhs.sampling_period &&
    lhs.state == rhs.state &&
    lhs.object == rhs.object;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::twinny_msgs::Trajectory2_<ContainerAllocator1> & lhs, const ::twinny_msgs::Trajectory2_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace twinny_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::twinny_msgs::Trajectory2_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::twinny_msgs::Trajectory2_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::twinny_msgs::Trajectory2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::twinny_msgs::Trajectory2_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::twinny_msgs::Trajectory2_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::twinny_msgs::Trajectory2_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::twinny_msgs::Trajectory2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "18cd86ccdebc7c18b59adf258bbbe2f5";
  }

  static const char* value(const ::twinny_msgs::Trajectory2_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x18cd86ccdebc7c18ULL;
  static const uint64_t static_value2 = 0xb59adf258bbbe2f5ULL;
};

template<class ContainerAllocator>
struct DataType< ::twinny_msgs::Trajectory2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "twinny_msgs/Trajectory2";
  }

  static const char* value(const ::twinny_msgs::Trajectory2_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::twinny_msgs::Trajectory2_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"uint8 MAX_LENGTH=200\n"
"\n"
"uint8 NORMAL=0\n"
"uint8 VEL_ONLY=1\n"
"uint8 E_STOP=2\n"
"uint8 STOP_AND_ROTATION=3\n"
"\n"
"uint8 FOCUSING=4\n"
"\n"
"uint8 command_mode\n"
"uint8 command_value\n"
"uint8 path_legnth\n"
"\n"
"float64 sampling_period\n"
"\n"
"twinny_msgs/DWMRState[201] state\n"
"\n"
"twinny_msgs/Position object\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: twinny_msgs/DWMRState\n"
"twinny_msgs/LinearAngular velocity\n"
"twinny_msgs/Pose3D pose\n"
"================================================================================\n"
"MSG: twinny_msgs/LinearAngular\n"
"float64 linear\n"
"float64 angular\n"
"\n"
"================================================================================\n"
"MSG: twinny_msgs/Pose3D\n"
"Header header\n"
"float64 x\n"
"float64 y\n"
"float64 theta\n"
"\n"
"================================================================================\n"
"MSG: twinny_msgs/Position\n"
"float64 x\n"
"float64 y\n"
;
  }

  static const char* value(const ::twinny_msgs::Trajectory2_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::twinny_msgs::Trajectory2_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.command_mode);
      stream.next(m.command_value);
      stream.next(m.path_legnth);
      stream.next(m.sampling_period);
      stream.next(m.state);
      stream.next(m.object);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Trajectory2_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::twinny_msgs::Trajectory2_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::twinny_msgs::Trajectory2_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "command_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.command_mode);
    s << indent << "command_value: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.command_value);
    s << indent << "path_legnth: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.path_legnth);
    s << indent << "sampling_period: ";
    Printer<double>::stream(s, indent + "  ", v.sampling_period);
    s << indent << "state[]" << std::endl;
    for (size_t i = 0; i < v.state.size(); ++i)
    {
      s << indent << "  state[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::twinny_msgs::DWMRState_<ContainerAllocator> >::stream(s, indent + "    ", v.state[i]);
    }
    s << indent << "object: ";
    s << std::endl;
    Printer< ::twinny_msgs::Position_<ContainerAllocator> >::stream(s, indent + "  ", v.object);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TWINNY_MSGS_MESSAGE_TRAJECTORY2_H
