// Generated by gencpp from file twinny_msgs/BumperReport.msg
// DO NOT EDIT!


#ifndef TWINNY_MSGS_MESSAGE_BUMPERREPORT_H
#define TWINNY_MSGS_MESSAGE_BUMPERREPORT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace twinny_msgs
{
template <class ContainerAllocator>
struct BumperReport_
{
  typedef BumperReport_<ContainerAllocator> Type;

  BumperReport_()
    : header()
    , bumper_flag(false)
    , left_bumper(false)
    , mid_bumper(false)
    , right_bumper(false)
    , back_bumper(false)
    , sub1_bumper(false)
    , sub2_bumper(false)
    , sub3_bumper(false)
    , sub4_bumper(false)  {
    }
  BumperReport_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , bumper_flag(false)
    , left_bumper(false)
    , mid_bumper(false)
    , right_bumper(false)
    , back_bumper(false)
    , sub1_bumper(false)
    , sub2_bumper(false)
    , sub3_bumper(false)
    , sub4_bumper(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _bumper_flag_type;
  _bumper_flag_type bumper_flag;

   typedef uint8_t _left_bumper_type;
  _left_bumper_type left_bumper;

   typedef uint8_t _mid_bumper_type;
  _mid_bumper_type mid_bumper;

   typedef uint8_t _right_bumper_type;
  _right_bumper_type right_bumper;

   typedef uint8_t _back_bumper_type;
  _back_bumper_type back_bumper;

   typedef uint8_t _sub1_bumper_type;
  _sub1_bumper_type sub1_bumper;

   typedef uint8_t _sub2_bumper_type;
  _sub2_bumper_type sub2_bumper;

   typedef uint8_t _sub3_bumper_type;
  _sub3_bumper_type sub3_bumper;

   typedef uint8_t _sub4_bumper_type;
  _sub4_bumper_type sub4_bumper;





  typedef boost::shared_ptr< ::twinny_msgs::BumperReport_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::twinny_msgs::BumperReport_<ContainerAllocator> const> ConstPtr;

}; // struct BumperReport_

typedef ::twinny_msgs::BumperReport_<std::allocator<void> > BumperReport;

typedef boost::shared_ptr< ::twinny_msgs::BumperReport > BumperReportPtr;
typedef boost::shared_ptr< ::twinny_msgs::BumperReport const> BumperReportConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::twinny_msgs::BumperReport_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::twinny_msgs::BumperReport_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::twinny_msgs::BumperReport_<ContainerAllocator1> & lhs, const ::twinny_msgs::BumperReport_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.bumper_flag == rhs.bumper_flag &&
    lhs.left_bumper == rhs.left_bumper &&
    lhs.mid_bumper == rhs.mid_bumper &&
    lhs.right_bumper == rhs.right_bumper &&
    lhs.back_bumper == rhs.back_bumper &&
    lhs.sub1_bumper == rhs.sub1_bumper &&
    lhs.sub2_bumper == rhs.sub2_bumper &&
    lhs.sub3_bumper == rhs.sub3_bumper &&
    lhs.sub4_bumper == rhs.sub4_bumper;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::twinny_msgs::BumperReport_<ContainerAllocator1> & lhs, const ::twinny_msgs::BumperReport_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace twinny_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::twinny_msgs::BumperReport_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::twinny_msgs::BumperReport_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::twinny_msgs::BumperReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::twinny_msgs::BumperReport_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::twinny_msgs::BumperReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::twinny_msgs::BumperReport_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::twinny_msgs::BumperReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2405e56ac30b979aef601f898841758f";
  }

  static const char* value(const ::twinny_msgs::BumperReport_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2405e56ac30b979aULL;
  static const uint64_t static_value2 = 0xef601f898841758fULL;
};

template<class ContainerAllocator>
struct DataType< ::twinny_msgs::BumperReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "twinny_msgs/BumperReport";
  }

  static const char* value(const ::twinny_msgs::BumperReport_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::twinny_msgs::BumperReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"bool bumper_flag\n"
"bool left_bumper\n"
"bool mid_bumper\n"
"bool right_bumper\n"
"bool back_bumper\n"
"\n"
"bool sub1_bumper\n"
"bool sub2_bumper\n"
"bool sub3_bumper\n"
"bool sub4_bumper\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::twinny_msgs::BumperReport_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::twinny_msgs::BumperReport_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.bumper_flag);
      stream.next(m.left_bumper);
      stream.next(m.mid_bumper);
      stream.next(m.right_bumper);
      stream.next(m.back_bumper);
      stream.next(m.sub1_bumper);
      stream.next(m.sub2_bumper);
      stream.next(m.sub3_bumper);
      stream.next(m.sub4_bumper);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BumperReport_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::twinny_msgs::BumperReport_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::twinny_msgs::BumperReport_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "bumper_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bumper_flag);
    s << indent << "left_bumper: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.left_bumper);
    s << indent << "mid_bumper: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mid_bumper);
    s << indent << "right_bumper: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.right_bumper);
    s << indent << "back_bumper: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.back_bumper);
    s << indent << "sub1_bumper: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sub1_bumper);
    s << indent << "sub2_bumper: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sub2_bumper);
    s << indent << "sub3_bumper: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sub3_bumper);
    s << indent << "sub4_bumper: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.sub4_bumper);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TWINNY_MSGS_MESSAGE_BUMPERREPORT_H
