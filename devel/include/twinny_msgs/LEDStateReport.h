// Generated by gencpp from file twinny_msgs/LEDStateReport.msg
// DO NOT EDIT!


#ifndef TWINNY_MSGS_MESSAGE_LEDSTATEREPORT_H
#define TWINNY_MSGS_MESSAGE_LEDSTATEREPORT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace twinny_msgs
{
template <class ContainerAllocator>
struct LEDStateReport_
{
  typedef LEDStateReport_<ContainerAllocator> Type;

  LEDStateReport_()
    : header()
    , type()
    , LED_0_state(0)
    , LED_1_state(0)
    , LED_2_state(0)
    , LED_3_state(0)
    , LED_4_state(0)
    , LED_5_state(0)
    , SUB_LED_0_state(0)
    , SUB_LED_1_state(0)
    , SUB_LED_2_state(0)
    , SUB_LED_3_state(0)
    , SUB_LED_4_state(0)
    , SUB_LED_5_state(0)
    , LED_bar_color(0)
    , LED_bar_state(0)
    , LED_bar2_color(0)
    , LED_bar2_state(0)  {
    }
  LEDStateReport_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , type(_alloc)
    , LED_0_state(0)
    , LED_1_state(0)
    , LED_2_state(0)
    , LED_3_state(0)
    , LED_4_state(0)
    , LED_5_state(0)
    , SUB_LED_0_state(0)
    , SUB_LED_1_state(0)
    , SUB_LED_2_state(0)
    , SUB_LED_3_state(0)
    , SUB_LED_4_state(0)
    , SUB_LED_5_state(0)
    , LED_bar_color(0)
    , LED_bar_state(0)
    , LED_bar2_color(0)
    , LED_bar2_state(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _type_type;
  _type_type type;

   typedef uint8_t _LED_0_state_type;
  _LED_0_state_type LED_0_state;

   typedef uint8_t _LED_1_state_type;
  _LED_1_state_type LED_1_state;

   typedef uint8_t _LED_2_state_type;
  _LED_2_state_type LED_2_state;

   typedef uint8_t _LED_3_state_type;
  _LED_3_state_type LED_3_state;

   typedef uint8_t _LED_4_state_type;
  _LED_4_state_type LED_4_state;

   typedef uint8_t _LED_5_state_type;
  _LED_5_state_type LED_5_state;

   typedef uint8_t _SUB_LED_0_state_type;
  _SUB_LED_0_state_type SUB_LED_0_state;

   typedef uint8_t _SUB_LED_1_state_type;
  _SUB_LED_1_state_type SUB_LED_1_state;

   typedef uint8_t _SUB_LED_2_state_type;
  _SUB_LED_2_state_type SUB_LED_2_state;

   typedef uint8_t _SUB_LED_3_state_type;
  _SUB_LED_3_state_type SUB_LED_3_state;

   typedef uint8_t _SUB_LED_4_state_type;
  _SUB_LED_4_state_type SUB_LED_4_state;

   typedef uint8_t _SUB_LED_5_state_type;
  _SUB_LED_5_state_type SUB_LED_5_state;

   typedef uint8_t _LED_bar_color_type;
  _LED_bar_color_type LED_bar_color;

   typedef uint8_t _LED_bar_state_type;
  _LED_bar_state_type LED_bar_state;

   typedef uint8_t _LED_bar2_color_type;
  _LED_bar2_color_type LED_bar2_color;

   typedef uint8_t _LED_bar2_state_type;
  _LED_bar2_state_type LED_bar2_state;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(STATE_OFF)
  #undef STATE_OFF
#endif
#if defined(_WIN32) && defined(STATE_ON)
  #undef STATE_ON
#endif
#if defined(_WIN32) && defined(STATE_BLINK)
  #undef STATE_BLINK
#endif
#if defined(_WIN32) && defined(STATE_ERROR)
  #undef STATE_ERROR
#endif
#if defined(_WIN32) && defined(LED_BAR_OFF)
  #undef LED_BAR_OFF
#endif
#if defined(_WIN32) && defined(LED_BAR_RED)
  #undef LED_BAR_RED
#endif
#if defined(_WIN32) && defined(LED_BAR_GREEN)
  #undef LED_BAR_GREEN
#endif
#if defined(_WIN32) && defined(LED_BAR_YELLOW)
  #undef LED_BAR_YELLOW
#endif
#if defined(_WIN32) && defined(LED_BAR_BLUE)
  #undef LED_BAR_BLUE
#endif
#if defined(_WIN32) && defined(LED_BAR_MAGENTA)
  #undef LED_BAR_MAGENTA
#endif
#if defined(_WIN32) && defined(LED_BAR_CYAN)
  #undef LED_BAR_CYAN
#endif
#if defined(_WIN32) && defined(LED_BAR_WHITE)
  #undef LED_BAR_WHITE
#endif

  enum {
    STATE_OFF = 0u,
    STATE_ON = 1u,
    STATE_BLINK = 2u,
    STATE_ERROR = 3u,
    LED_BAR_OFF = 0u,
    LED_BAR_RED = 1u,
    LED_BAR_GREEN = 2u,
    LED_BAR_YELLOW = 3u,
    LED_BAR_BLUE = 4u,
    LED_BAR_MAGENTA = 5u,
    LED_BAR_CYAN = 6u,
    LED_BAR_WHITE = 7u,
  };


  typedef boost::shared_ptr< ::twinny_msgs::LEDStateReport_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::twinny_msgs::LEDStateReport_<ContainerAllocator> const> ConstPtr;

}; // struct LEDStateReport_

typedef ::twinny_msgs::LEDStateReport_<std::allocator<void> > LEDStateReport;

typedef boost::shared_ptr< ::twinny_msgs::LEDStateReport > LEDStateReportPtr;
typedef boost::shared_ptr< ::twinny_msgs::LEDStateReport const> LEDStateReportConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::twinny_msgs::LEDStateReport_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::twinny_msgs::LEDStateReport_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::twinny_msgs::LEDStateReport_<ContainerAllocator1> & lhs, const ::twinny_msgs::LEDStateReport_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.type == rhs.type &&
    lhs.LED_0_state == rhs.LED_0_state &&
    lhs.LED_1_state == rhs.LED_1_state &&
    lhs.LED_2_state == rhs.LED_2_state &&
    lhs.LED_3_state == rhs.LED_3_state &&
    lhs.LED_4_state == rhs.LED_4_state &&
    lhs.LED_5_state == rhs.LED_5_state &&
    lhs.SUB_LED_0_state == rhs.SUB_LED_0_state &&
    lhs.SUB_LED_1_state == rhs.SUB_LED_1_state &&
    lhs.SUB_LED_2_state == rhs.SUB_LED_2_state &&
    lhs.SUB_LED_3_state == rhs.SUB_LED_3_state &&
    lhs.SUB_LED_4_state == rhs.SUB_LED_4_state &&
    lhs.SUB_LED_5_state == rhs.SUB_LED_5_state &&
    lhs.LED_bar_color == rhs.LED_bar_color &&
    lhs.LED_bar_state == rhs.LED_bar_state &&
    lhs.LED_bar2_color == rhs.LED_bar2_color &&
    lhs.LED_bar2_state == rhs.LED_bar2_state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::twinny_msgs::LEDStateReport_<ContainerAllocator1> & lhs, const ::twinny_msgs::LEDStateReport_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace twinny_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::twinny_msgs::LEDStateReport_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::twinny_msgs::LEDStateReport_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::twinny_msgs::LEDStateReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::twinny_msgs::LEDStateReport_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::twinny_msgs::LEDStateReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::twinny_msgs::LEDStateReport_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::twinny_msgs::LEDStateReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fc4c0739dd32f45e85707b08066723b5";
  }

  static const char* value(const ::twinny_msgs::LEDStateReport_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfc4c0739dd32f45eULL;
  static const uint64_t static_value2 = 0x85707b08066723b5ULL;
};

template<class ContainerAllocator>
struct DataType< ::twinny_msgs::LEDStateReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "twinny_msgs/LEDStateReport";
  }

  static const char* value(const ::twinny_msgs::LEDStateReport_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::twinny_msgs::LEDStateReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"string type\n"
"\n"
"uint8 STATE_OFF=0\n"
"uint8 STATE_ON=1\n"
"uint8 STATE_BLINK=2\n"
"uint8 STATE_ERROR=3\n"
"\n"
"uint8 LED_0_state\n"
"uint8 LED_1_state\n"
"uint8 LED_2_state\n"
"uint8 LED_3_state\n"
"uint8 LED_4_state\n"
"uint8 LED_5_state\n"
"\n"
"uint8 SUB_LED_0_state\n"
"uint8 SUB_LED_1_state\n"
"uint8 SUB_LED_2_state\n"
"uint8 SUB_LED_3_state\n"
"uint8 SUB_LED_4_state\n"
"uint8 SUB_LED_5_state\n"
"\n"
"uint8 LED_bar_color\n"
"uint8 LED_bar_state\n"
"\n"
"uint8 LED_bar2_color\n"
"uint8 LED_bar2_state\n"
"\n"
"uint8 LED_BAR_OFF = 0\n"
"uint8 LED_BAR_RED = 1\n"
"uint8 LED_BAR_GREEN = 2\n"
"uint8 LED_BAR_YELLOW = 3\n"
"uint8 LED_BAR_BLUE = 4\n"
"uint8 LED_BAR_MAGENTA = 5\n"
"uint8 LED_BAR_CYAN = 6\n"
"uint8 LED_BAR_WHITE = 7\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::twinny_msgs::LEDStateReport_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::twinny_msgs::LEDStateReport_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.type);
      stream.next(m.LED_0_state);
      stream.next(m.LED_1_state);
      stream.next(m.LED_2_state);
      stream.next(m.LED_3_state);
      stream.next(m.LED_4_state);
      stream.next(m.LED_5_state);
      stream.next(m.SUB_LED_0_state);
      stream.next(m.SUB_LED_1_state);
      stream.next(m.SUB_LED_2_state);
      stream.next(m.SUB_LED_3_state);
      stream.next(m.SUB_LED_4_state);
      stream.next(m.SUB_LED_5_state);
      stream.next(m.LED_bar_color);
      stream.next(m.LED_bar_state);
      stream.next(m.LED_bar2_color);
      stream.next(m.LED_bar2_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LEDStateReport_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::twinny_msgs::LEDStateReport_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::twinny_msgs::LEDStateReport_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.type);
    s << indent << "LED_0_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.LED_0_state);
    s << indent << "LED_1_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.LED_1_state);
    s << indent << "LED_2_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.LED_2_state);
    s << indent << "LED_3_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.LED_3_state);
    s << indent << "LED_4_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.LED_4_state);
    s << indent << "LED_5_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.LED_5_state);
    s << indent << "SUB_LED_0_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.SUB_LED_0_state);
    s << indent << "SUB_LED_1_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.SUB_LED_1_state);
    s << indent << "SUB_LED_2_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.SUB_LED_2_state);
    s << indent << "SUB_LED_3_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.SUB_LED_3_state);
    s << indent << "SUB_LED_4_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.SUB_LED_4_state);
    s << indent << "SUB_LED_5_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.SUB_LED_5_state);
    s << indent << "LED_bar_color: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.LED_bar_color);
    s << indent << "LED_bar_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.LED_bar_state);
    s << indent << "LED_bar2_color: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.LED_bar2_color);
    s << indent << "LED_bar2_state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.LED_bar2_state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TWINNY_MSGS_MESSAGE_LEDSTATEREPORT_H
