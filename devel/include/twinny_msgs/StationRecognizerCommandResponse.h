// Generated by gencpp from file twinny_msgs/StationRecognizerCommandResponse.msg
// DO NOT EDIT!


#ifndef TWINNY_MSGS_MESSAGE_STATIONRECOGNIZERCOMMANDRESPONSE_H
#define TWINNY_MSGS_MESSAGE_STATIONRECOGNIZERCOMMANDRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose2D.h>

namespace twinny_msgs
{
template <class ContainerAllocator>
struct StationRecognizerCommandResponse_
{
  typedef StationRecognizerCommandResponse_<ContainerAllocator> Type;

  StationRecognizerCommandResponse_()
    : result(0)
    , is_find(false)
    , estimated_station_pose()
    , extra_field()  {
    }
  StationRecognizerCommandResponse_(const ContainerAllocator& _alloc)
    : result(0)
    , is_find(false)
    , estimated_station_pose(_alloc)
    , extra_field(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _result_type;
  _result_type result;

   typedef uint8_t _is_find_type;
  _is_find_type is_find;

   typedef  ::geometry_msgs::Pose2D_<ContainerAllocator>  _estimated_station_pose_type;
  _estimated_station_pose_type estimated_station_pose;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _extra_field_type;
  _extra_field_type extra_field;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(SUCCESS)
  #undef SUCCESS
#endif
#if defined(_WIN32) && defined(FAIL)
  #undef FAIL
#endif
#if defined(_WIN32) && defined(ERROR)
  #undef ERROR
#endif
#if defined(_WIN32) && defined(INVALID_MODE)
  #undef INVALID_MODE
#endif
#if defined(_WIN32) && defined(INVALID_STATE)
  #undef INVALID_STATE
#endif
#if defined(_WIN32) && defined(INVALID_COMMAND)
  #undef INVALID_COMMAND
#endif
#if defined(_WIN32) && defined(INVALID_TYPE)
  #undef INVALID_TYPE
#endif
#if defined(_WIN32) && defined(INVALID_FRAME)
  #undef INVALID_FRAME
#endif
#if defined(_WIN32) && defined(INVALID_CURRENT)
  #undef INVALID_CURRENT
#endif
#if defined(_WIN32) && defined(NOT_WORKING_DUETO_TOO_CLOSED)
  #undef NOT_WORKING_DUETO_TOO_CLOSED
#endif
#if defined(_WIN32) && defined(FAIL_DUETO_BOUND_ERROR)
  #undef FAIL_DUETO_BOUND_ERROR
#endif
#if defined(_WIN32) && defined(FAIL_DUETO_SIZE_ERROR)
  #undef FAIL_DUETO_SIZE_ERROR
#endif
#if defined(_WIN32) && defined(FAIL_DUETO_LENGTH_ERROR)
  #undef FAIL_DUETO_LENGTH_ERROR
#endif

  enum {
    SUCCESS = 1,
    FAIL = -1,
    ERROR = -999,
    INVALID_MODE = -10,
    INVALID_STATE = -11,
    INVALID_COMMAND = -12,
    INVALID_TYPE = -13,
    INVALID_FRAME = -14,
    INVALID_CURRENT = -15,
    NOT_WORKING_DUETO_TOO_CLOSED = -20,
    FAIL_DUETO_BOUND_ERROR = -21,
    FAIL_DUETO_SIZE_ERROR = -22,
    FAIL_DUETO_LENGTH_ERROR = -23,
  };


  typedef boost::shared_ptr< ::twinny_msgs::StationRecognizerCommandResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::twinny_msgs::StationRecognizerCommandResponse_<ContainerAllocator> const> ConstPtr;

}; // struct StationRecognizerCommandResponse_

typedef ::twinny_msgs::StationRecognizerCommandResponse_<std::allocator<void> > StationRecognizerCommandResponse;

typedef boost::shared_ptr< ::twinny_msgs::StationRecognizerCommandResponse > StationRecognizerCommandResponsePtr;
typedef boost::shared_ptr< ::twinny_msgs::StationRecognizerCommandResponse const> StationRecognizerCommandResponseConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::twinny_msgs::StationRecognizerCommandResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::twinny_msgs::StationRecognizerCommandResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::twinny_msgs::StationRecognizerCommandResponse_<ContainerAllocator1> & lhs, const ::twinny_msgs::StationRecognizerCommandResponse_<ContainerAllocator2> & rhs)
{
  return lhs.result == rhs.result &&
    lhs.is_find == rhs.is_find &&
    lhs.estimated_station_pose == rhs.estimated_station_pose &&
    lhs.extra_field == rhs.extra_field;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::twinny_msgs::StationRecognizerCommandResponse_<ContainerAllocator1> & lhs, const ::twinny_msgs::StationRecognizerCommandResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace twinny_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::twinny_msgs::StationRecognizerCommandResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::twinny_msgs::StationRecognizerCommandResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::twinny_msgs::StationRecognizerCommandResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::twinny_msgs::StationRecognizerCommandResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::twinny_msgs::StationRecognizerCommandResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::twinny_msgs::StationRecognizerCommandResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::twinny_msgs::StationRecognizerCommandResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3729f7c52832e836a2c496c7c4b4bf1d";
  }

  static const char* value(const ::twinny_msgs::StationRecognizerCommandResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3729f7c52832e836ULL;
  static const uint64_t static_value2 = 0xa2c496c7c4b4bf1dULL;
};

template<class ContainerAllocator>
struct DataType< ::twinny_msgs::StationRecognizerCommandResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "twinny_msgs/StationRecognizerCommandResponse";
  }

  static const char* value(const ::twinny_msgs::StationRecognizerCommandResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::twinny_msgs::StationRecognizerCommandResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 SUCCESS = 1\n"
"int32 FAIL = -1\n"
"int32 ERROR = -999\n"
"\n"
"int32 INVALID_MODE = -10\n"
"int32 INVALID_STATE= -11\n"
"int32 INVALID_COMMAND = -12\n"
"int32 INVALID_TYPE = -13\n"
"int32 INVALID_FRAME = -14\n"
"int32 INVALID_CURRENT = -15\n"
"\n"
"int32 NOT_WORKING_DUETO_TOO_CLOSED = -20\n"
"int32 FAIL_DUETO_BOUND_ERROR = -21\n"
"int32 FAIL_DUETO_SIZE_ERROR = -22\n"
"int32 FAIL_DUETO_LENGTH_ERROR = -23\n"
"\n"
"int32 result\n"
"\n"
"bool is_find\n"
"\n"
"geometry_msgs/Pose2D estimated_station_pose\n"
"string extra_field\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose2D\n"
"# Deprecated\n"
"# Please use the full 3D pose.\n"
"\n"
"# In general our recommendation is to use a full 3D representation of everything and for 2D specific applications make the appropriate projections into the plane for their calculations but optimally will preserve the 3D information during processing.\n"
"\n"
"# If we have parallel copies of 2D datatypes every UI and other pipeline will end up needing to have dual interfaces to plot everything. And you will end up with not being able to use 3D tools for 2D use cases even if they're completely valid, as you'd have to reimplement it with different inputs and outputs. It's not particularly hard to plot the 2D pose or compute the yaw error for the Pose message and there are already tools and libraries that can do this for you.\n"
"\n"
"\n"
"# This expresses a position and orientation on a 2D manifold.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 theta\n"
;
  }

  static const char* value(const ::twinny_msgs::StationRecognizerCommandResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::twinny_msgs::StationRecognizerCommandResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.result);
      stream.next(m.is_find);
      stream.next(m.estimated_station_pose);
      stream.next(m.extra_field);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StationRecognizerCommandResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::twinny_msgs::StationRecognizerCommandResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::twinny_msgs::StationRecognizerCommandResponse_<ContainerAllocator>& v)
  {
    s << indent << "result: ";
    Printer<int32_t>::stream(s, indent + "  ", v.result);
    s << indent << "is_find: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_find);
    s << indent << "estimated_station_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose2D_<ContainerAllocator> >::stream(s, indent + "  ", v.estimated_station_pose);
    s << indent << "extra_field: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.extra_field);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TWINNY_MSGS_MESSAGE_STATIONRECOGNIZERCOMMANDRESPONSE_H
