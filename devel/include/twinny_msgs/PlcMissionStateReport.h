// Generated by gencpp from file twinny_msgs/PlcMissionStateReport.msg
// DO NOT EDIT!


#ifndef TWINNY_MSGS_MESSAGE_PLCMISSIONSTATEREPORT_H
#define TWINNY_MSGS_MESSAGE_PLCMISSIONSTATEREPORT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace twinny_msgs
{
template <class ContainerAllocator>
struct PlcMissionStateReport_
{
  typedef PlcMissionStateReport_<ContainerAllocator> Type;

  PlcMissionStateReport_()
    : header()
    , type()
    , is_manual(false)
    , status(0)
    , magazine_slot()
    , error(0)  {
    }
  PlcMissionStateReport_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , type(_alloc)
    , is_manual(false)
    , status(0)
    , magazine_slot(_alloc)
    , error(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _type_type;
  _type_type type;

   typedef uint8_t _is_manual_type;
  _is_manual_type is_manual;

   typedef uint8_t _status_type;
  _status_type status;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _magazine_slot_type;
  _magazine_slot_type magazine_slot;

   typedef uint32_t _error_type;
  _error_type error;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(READY)
  #undef READY
#endif
#if defined(_WIN32) && defined(WORKING)
  #undef WORKING
#endif
#if defined(_WIN32) && defined(COMPLETE)
  #undef COMPLETE
#endif
#if defined(_WIN32) && defined(FAIL)
  #undef FAIL
#endif
#if defined(_WIN32) && defined(NO_ALARM)
  #undef NO_ALARM
#endif
#if defined(_WIN32) && defined(ALARM_DRIVE_DISABLE)
  #undef ALARM_DRIVE_DISABLE
#endif
#if defined(_WIN32) && defined(ALARM_LOAD_VISION_NG)
  #undef ALARM_LOAD_VISION_NG
#endif
#if defined(_WIN32) && defined(ALARM_LOAD_WORKSPACE_NG)
  #undef ALARM_LOAD_WORKSPACE_NG
#endif
#if defined(_WIN32) && defined(ALARM_UNLOAD_BAN)
  #undef ALARM_UNLOAD_BAN
#endif
#if defined(_WIN32) && defined(ALARM_LOAD_RFID_READ_NG)
  #undef ALARM_LOAD_RFID_READ_NG
#endif
#if defined(_WIN32) && defined(ALARM_LOAD_RFID_CHECK)
  #undef ALARM_LOAD_RFID_CHECK
#endif
#if defined(_WIN32) && defined(ALARM_UNLOAD_VISION_NG)
  #undef ALARM_UNLOAD_VISION_NG
#endif
#if defined(_WIN32) && defined(ALARM_UNLOAD_WORKSPACE_NG)
  #undef ALARM_UNLOAD_WORKSPACE_NG
#endif
#if defined(_WIN32) && defined(ALARM_UNLOAD_RFID_CHECK)
  #undef ALARM_UNLOAD_RFID_CHECK
#endif
#if defined(_WIN32) && defined(ALARM_BATTERY_VISION_NG)
  #undef ALARM_BATTERY_VISION_NG
#endif
#if defined(_WIN32) && defined(ALARM_BATTERY_WORKSPACE_NG)
  #undef ALARM_BATTERY_WORKSPACE_NG
#endif
#if defined(_WIN32) && defined(ALARM_PIO_READY_DELAY)
  #undef ALARM_PIO_READY_DELAY
#endif
#if defined(_WIN32) && defined(ALARM_PIO_BATTERY_REQUEST_RESPONSE_DELAY)
  #undef ALARM_PIO_BATTERY_REQUEST_RESPONSE_DELAY
#endif
#if defined(_WIN32) && defined(ALARM_PIO_BATTERY_COMPLETE_DELAY)
  #undef ALARM_PIO_BATTERY_COMPLETE_DELAY
#endif
#if defined(_WIN32) && defined(ALARM_PIO_IF_COMPLETE_DELAY)
  #undef ALARM_PIO_IF_COMPLETE_DELAY
#endif

  enum {
    READY = 0u,
    WORKING = 1u,
    COMPLETE = 2u,
    FAIL = 3u,
    NO_ALARM = 0u,
    ALARM_DRIVE_DISABLE = 1u,
    ALARM_LOAD_VISION_NG = 11u,
    ALARM_LOAD_WORKSPACE_NG = 12u,
    ALARM_UNLOAD_BAN = 13u,
    ALARM_LOAD_RFID_READ_NG = 14u,
    ALARM_LOAD_RFID_CHECK = 15u,
    ALARM_UNLOAD_VISION_NG = 21u,
    ALARM_UNLOAD_WORKSPACE_NG = 22u,
    ALARM_UNLOAD_RFID_CHECK = 23u,
    ALARM_BATTERY_VISION_NG = 31u,
    ALARM_BATTERY_WORKSPACE_NG = 32u,
    ALARM_PIO_READY_DELAY = 33u,
    ALARM_PIO_BATTERY_REQUEST_RESPONSE_DELAY = 34u,
    ALARM_PIO_BATTERY_COMPLETE_DELAY = 35u,
    ALARM_PIO_IF_COMPLETE_DELAY = 36u,
  };


  typedef boost::shared_ptr< ::twinny_msgs::PlcMissionStateReport_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::twinny_msgs::PlcMissionStateReport_<ContainerAllocator> const> ConstPtr;

}; // struct PlcMissionStateReport_

typedef ::twinny_msgs::PlcMissionStateReport_<std::allocator<void> > PlcMissionStateReport;

typedef boost::shared_ptr< ::twinny_msgs::PlcMissionStateReport > PlcMissionStateReportPtr;
typedef boost::shared_ptr< ::twinny_msgs::PlcMissionStateReport const> PlcMissionStateReportConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::twinny_msgs::PlcMissionStateReport_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::twinny_msgs::PlcMissionStateReport_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::twinny_msgs::PlcMissionStateReport_<ContainerAllocator1> & lhs, const ::twinny_msgs::PlcMissionStateReport_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.type == rhs.type &&
    lhs.is_manual == rhs.is_manual &&
    lhs.status == rhs.status &&
    lhs.magazine_slot == rhs.magazine_slot &&
    lhs.error == rhs.error;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::twinny_msgs::PlcMissionStateReport_<ContainerAllocator1> & lhs, const ::twinny_msgs::PlcMissionStateReport_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace twinny_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::twinny_msgs::PlcMissionStateReport_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::twinny_msgs::PlcMissionStateReport_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::twinny_msgs::PlcMissionStateReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::twinny_msgs::PlcMissionStateReport_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::twinny_msgs::PlcMissionStateReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::twinny_msgs::PlcMissionStateReport_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::twinny_msgs::PlcMissionStateReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f2b9c2a3491b99084010a4db4b12614d";
  }

  static const char* value(const ::twinny_msgs::PlcMissionStateReport_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf2b9c2a3491b9908ULL;
  static const uint64_t static_value2 = 0x4010a4db4b12614dULL;
};

template<class ContainerAllocator>
struct DataType< ::twinny_msgs::PlcMissionStateReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "twinny_msgs/PlcMissionStateReport";
  }

  static const char* value(const ::twinny_msgs::PlcMissionStateReport_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::twinny_msgs::PlcMissionStateReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"string type\n"
"\n"
"bool is_manual\n"
"\n"
"uint8 READY = 0\n"
"uint8 WORKING = 1\n"
"uint8 COMPLETE = 2\n"
"uint8 FAIL = 3\n"
"uint8 status\n"
"\n"
"uint32 NO_ALARM = 0\n"
"uint32 ALARM_DRIVE_DISABLE = 1\n"
"\n"
"uint32 ALARM_LOAD_VISION_NG = 11\n"
"uint32 ALARM_LOAD_WORKSPACE_NG = 12\n"
"uint32 ALARM_UNLOAD_BAN = 13\n"
"uint32 ALARM_LOAD_RFID_READ_NG = 14\n"
"uint32 ALARM_LOAD_RFID_CHECK = 15\n"
"\n"
"uint32 ALARM_UNLOAD_VISION_NG = 21\n"
"uint32 ALARM_UNLOAD_WORKSPACE_NG = 22\n"
"uint32 ALARM_UNLOAD_RFID_CHECK = 23\n"
"\n"
"uint32 ALARM_BATTERY_VISION_NG = 31\n"
"uint32 ALARM_BATTERY_WORKSPACE_NG = 32\n"
"uint32 ALARM_PIO_READY_DELAY = 33\n"
"uint32 ALARM_PIO_BATTERY_REQUEST_RESPONSE_DELAY = 34\n"
"uint32 ALARM_PIO_BATTERY_COMPLETE_DELAY =35\n"
"uint32 ALARM_PIO_IF_COMPLETE_DELAY = 36\n"
"\n"
"string[] magazine_slot\n"
"uint32 error\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::twinny_msgs::PlcMissionStateReport_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::twinny_msgs::PlcMissionStateReport_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.type);
      stream.next(m.is_manual);
      stream.next(m.status);
      stream.next(m.magazine_slot);
      stream.next(m.error);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PlcMissionStateReport_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::twinny_msgs::PlcMissionStateReport_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::twinny_msgs::PlcMissionStateReport_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.type);
    s << indent << "is_manual: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_manual);
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
    s << indent << "magazine_slot[]" << std::endl;
    for (size_t i = 0; i < v.magazine_slot.size(); ++i)
    {
      s << indent << "  magazine_slot[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.magazine_slot[i]);
    }
    s << indent << "error: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.error);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TWINNY_MSGS_MESSAGE_PLCMISSIONSTATEREPORT_H
