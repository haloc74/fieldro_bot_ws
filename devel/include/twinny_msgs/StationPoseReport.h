// Generated by gencpp from file twinny_msgs/StationPoseReport.msg
// DO NOT EDIT!


#ifndef TWINNY_MSGS_MESSAGE_STATIONPOSEREPORT_H
#define TWINNY_MSGS_MESSAGE_STATIONPOSEREPORT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Pose2D.h>
#include <geometry_msgs/Pose2D.h>

namespace twinny_msgs
{
template <class ContainerAllocator>
struct StationPoseReport_
{
  typedef StationPoseReport_<ContainerAllocator> Type;

  StationPoseReport_()
    : header()
    , type()
    , mode(0)
    , state(0)
    , station_pose()
    , reliability()
    , extra_field()  {
    }
  StationPoseReport_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , type(_alloc)
    , mode(0)
    , state(0)
    , station_pose(_alloc)
    , reliability(_alloc)
    , extra_field(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _type_type;
  _type_type type;

   typedef uint8_t _mode_type;
  _mode_type mode;

   typedef uint8_t _state_type;
  _state_type state;

   typedef  ::geometry_msgs::Pose2D_<ContainerAllocator>  _station_pose_type;
  _station_pose_type station_pose;

   typedef  ::geometry_msgs::Pose2D_<ContainerAllocator>  _reliability_type;
  _reliability_type reliability;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _extra_field_type;
  _extra_field_type extra_field;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(UNKNOWN)
  #undef UNKNOWN
#endif
#if defined(_WIN32) && defined(PPS_O)
  #undef PPS_O
#endif
#if defined(_WIN32) && defined(PPS_C)
  #undef PPS_C
#endif
#if defined(_WIN32) && defined(VL)
  #undef VL
#endif
#if defined(_WIN32) && defined(START_MODE)
  #undef START_MODE
#endif
#if defined(_WIN32) && defined(STOP_MODE)
  #undef STOP_MODE
#endif
#if defined(_WIN32) && defined(PAUSE_MODE)
  #undef PAUSE_MODE
#endif
#if defined(_WIN32) && defined(READY_STATE)
  #undef READY_STATE
#endif
#if defined(_WIN32) && defined(PROCESSING_STATE)
  #undef PROCESSING_STATE
#endif
#if defined(_WIN32) && defined(FOUND_STATE)
  #undef FOUND_STATE
#endif
#if defined(_WIN32) && defined(LOST_STATE)
  #undef LOST_STATE
#endif
#if defined(_WIN32) && defined(ERROR_STATE)
  #undef ERROR_STATE
#endif

  enum {
    START_MODE = 0u,
    STOP_MODE = 1u,
    PAUSE_MODE = 2u,
    READY_STATE = 10u,
    PROCESSING_STATE = 11u,
    FOUND_STATE = 12u,
    LOST_STATE = 13u,
    ERROR_STATE = 15u,
  };

  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> UNKNOWN;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> PPS_O;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> PPS_C;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> VL;

  typedef boost::shared_ptr< ::twinny_msgs::StationPoseReport_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::twinny_msgs::StationPoseReport_<ContainerAllocator> const> ConstPtr;

}; // struct StationPoseReport_

typedef ::twinny_msgs::StationPoseReport_<std::allocator<void> > StationPoseReport;

typedef boost::shared_ptr< ::twinny_msgs::StationPoseReport > StationPoseReportPtr;
typedef boost::shared_ptr< ::twinny_msgs::StationPoseReport const> StationPoseReportConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      StationPoseReport_<ContainerAllocator>::UNKNOWN =
        
          "unknown"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      StationPoseReport_<ContainerAllocator>::PPS_O =
        
          "pps_o"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      StationPoseReport_<ContainerAllocator>::PPS_C =
        
          "pps_c"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      StationPoseReport_<ContainerAllocator>::VL =
        
          "vl"
        
        ;
   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::twinny_msgs::StationPoseReport_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::twinny_msgs::StationPoseReport_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::twinny_msgs::StationPoseReport_<ContainerAllocator1> & lhs, const ::twinny_msgs::StationPoseReport_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.type == rhs.type &&
    lhs.mode == rhs.mode &&
    lhs.state == rhs.state &&
    lhs.station_pose == rhs.station_pose &&
    lhs.reliability == rhs.reliability &&
    lhs.extra_field == rhs.extra_field;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::twinny_msgs::StationPoseReport_<ContainerAllocator1> & lhs, const ::twinny_msgs::StationPoseReport_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace twinny_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::twinny_msgs::StationPoseReport_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::twinny_msgs::StationPoseReport_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::twinny_msgs::StationPoseReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::twinny_msgs::StationPoseReport_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::twinny_msgs::StationPoseReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::twinny_msgs::StationPoseReport_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::twinny_msgs::StationPoseReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "314691c7f777c0fde4015cc5521a4d44";
  }

  static const char* value(const ::twinny_msgs::StationPoseReport_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x314691c7f777c0fdULL;
  static const uint64_t static_value2 = 0xe4015cc5521a4d44ULL;
};

template<class ContainerAllocator>
struct DataType< ::twinny_msgs::StationPoseReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "twinny_msgs/StationPoseReport";
  }

  static const char* value(const ::twinny_msgs::StationPoseReport_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::twinny_msgs::StationPoseReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"\n"
"string UNKNOWN = unknown\n"
"string PPS_O = pps_o\n"
"string PPS_C = pps_c\n"
"string VL = vl\n"
"string type\n"
"\n"
"uint8 START_MODE = 0\n"
"uint8 STOP_MODE = 1\n"
"uint8 PAUSE_MODE = 2\n"
"# uint8 ERROR_MODE = 3\n"
"uint8 mode\n"
"\n"
"#uint8 DISABLE_STATE = 0\n"
"#uint8 ENABLE_STATE = 1\n"
"#uint8 WARNING_STATE = 2\n"
"#uint8 PROCESSING_STATE = 3\n"
" \n"
"uint8 READY_STATE = 10 #구동중이 아닐때, (STOP이거나 PAUSE mode일시에는 이걸로 고정)\n"
"uint8 PROCESSING_STATE = 11 #DISABLE_STATE, PROCESSING_STATE, 아직 스테이션을 못찾음\n"
"uint8 FOUND_STATE = 12 # 스테이션을 찾았음\n"
"uint8 LOST_STATE = 13 # 스테이션을 찾았었으나(FOUND_STATE), 도중에 실패함. 이때 station_pose는 가장 마지막에 찾은 스테이션 정보가 입력됨.\n"
"#uint8 FOUND_STABLE_STATE = 12 #ENABLE_STATE 스테이션을 잘 찾았음\n"
"#uint8 FOUND_UNSTABLE_STATE = 13 #WARNING_STATE 스테이션을 찾았는데 좀 불안한 경우\n"
"uint8 ERROR_STATE = 15 # 언제나 존재, 알고리즘 내부에서 문제갸 터진 경우. 초기화 필요/\n"
"uint8 state\n"
"\n"
"geometry_msgs/Pose2D station_pose\n"
"geometry_msgs/Pose2D reliability # station_pose의 +- 오차 범위를 나타낸다. 알 수 없는 경우 -1.0\n"
"\n"
"string extra_field\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose2D\n"
"# Deprecated\n"
"# Please use the full 3D pose.\n"
"\n"
"# In general our recommendation is to use a full 3D representation of everything and for 2D specific applications make the appropriate projections into the plane for their calculations but optimally will preserve the 3D information during processing.\n"
"\n"
"# If we have parallel copies of 2D datatypes every UI and other pipeline will end up needing to have dual interfaces to plot everything. And you will end up with not being able to use 3D tools for 2D use cases even if they're completely valid, as you'd have to reimplement it with different inputs and outputs. It's not particularly hard to plot the 2D pose or compute the yaw error for the Pose message and there are already tools and libraries that can do this for you.\n"
"\n"
"\n"
"# This expresses a position and orientation on a 2D manifold.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 theta\n"
;
  }

  static const char* value(const ::twinny_msgs::StationPoseReport_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::twinny_msgs::StationPoseReport_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.type);
      stream.next(m.mode);
      stream.next(m.state);
      stream.next(m.station_pose);
      stream.next(m.reliability);
      stream.next(m.extra_field);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StationPoseReport_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::twinny_msgs::StationPoseReport_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::twinny_msgs::StationPoseReport_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.type);
    s << indent << "mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mode);
    s << indent << "state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.state);
    s << indent << "station_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose2D_<ContainerAllocator> >::stream(s, indent + "  ", v.station_pose);
    s << indent << "reliability: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose2D_<ContainerAllocator> >::stream(s, indent + "  ", v.reliability);
    s << indent << "extra_field: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.extra_field);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TWINNY_MSGS_MESSAGE_STATIONPOSEREPORT_H
