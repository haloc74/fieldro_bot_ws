// Generated by gencpp from file twinny_msgs/PalletLiftReport.msg
// DO NOT EDIT!


#ifndef TWINNY_MSGS_MESSAGE_PALLETLIFTREPORT_H
#define TWINNY_MSGS_MESSAGE_PALLETLIFTREPORT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace twinny_msgs
{
template <class ContainerAllocator>
struct PalletLiftReport_
{
  typedef PalletLiftReport_<ContainerAllocator> Type;

  PalletLiftReport_()
    : header()
    , type()
    , lift_state()
    , is_robot_loaded(false)
    , is_station_loaded(false)
    , is_alarm(false)
    , last_command()  {
    }
  PalletLiftReport_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , type(_alloc)
    , lift_state(_alloc)
    , is_robot_loaded(false)
    , is_station_loaded(false)
    , is_alarm(false)
    , last_command(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _type_type;
  _type_type type;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _lift_state_type;
  _lift_state_type lift_state;

   typedef uint8_t _is_robot_loaded_type;
  _is_robot_loaded_type is_robot_loaded;

   typedef uint8_t _is_station_loaded_type;
  _is_station_loaded_type is_station_loaded;

   typedef uint8_t _is_alarm_type;
  _is_alarm_type is_alarm;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _last_command_type;
  _last_command_type last_command;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(MOVING)
  #undef MOVING
#endif
#if defined(_WIN32) && defined(SETTLE)
  #undef SETTLE
#endif
#if defined(_WIN32) && defined(READY_TO_LOAD)
  #undef READY_TO_LOAD
#endif
#if defined(_WIN32) && defined(LOADED)
  #undef LOADED
#endif
#if defined(_WIN32) && defined(READY_TO_UNLOAD)
  #undef READY_TO_UNLOAD
#endif
#if defined(_WIN32) && defined(UNLOADED)
  #undef UNLOADED
#endif


  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> MOVING;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> SETTLE;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> READY_TO_LOAD;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> LOADED;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> READY_TO_UNLOAD;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> UNLOADED;

  typedef boost::shared_ptr< ::twinny_msgs::PalletLiftReport_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::twinny_msgs::PalletLiftReport_<ContainerAllocator> const> ConstPtr;

}; // struct PalletLiftReport_

typedef ::twinny_msgs::PalletLiftReport_<std::allocator<void> > PalletLiftReport;

typedef boost::shared_ptr< ::twinny_msgs::PalletLiftReport > PalletLiftReportPtr;
typedef boost::shared_ptr< ::twinny_msgs::PalletLiftReport const> PalletLiftReportConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      PalletLiftReport_<ContainerAllocator>::MOVING =
        
          "moving"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      PalletLiftReport_<ContainerAllocator>::SETTLE =
        
          "settle"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      PalletLiftReport_<ContainerAllocator>::READY_TO_LOAD =
        
          "ready_to_load"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      PalletLiftReport_<ContainerAllocator>::LOADED =
        
          "loaded"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      PalletLiftReport_<ContainerAllocator>::READY_TO_UNLOAD =
        
          "ready_to_unload"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      PalletLiftReport_<ContainerAllocator>::UNLOADED =
        
          "unloaded"
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::twinny_msgs::PalletLiftReport_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::twinny_msgs::PalletLiftReport_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::twinny_msgs::PalletLiftReport_<ContainerAllocator1> & lhs, const ::twinny_msgs::PalletLiftReport_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.type == rhs.type &&
    lhs.lift_state == rhs.lift_state &&
    lhs.is_robot_loaded == rhs.is_robot_loaded &&
    lhs.is_station_loaded == rhs.is_station_loaded &&
    lhs.is_alarm == rhs.is_alarm &&
    lhs.last_command == rhs.last_command;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::twinny_msgs::PalletLiftReport_<ContainerAllocator1> & lhs, const ::twinny_msgs::PalletLiftReport_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace twinny_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::twinny_msgs::PalletLiftReport_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::twinny_msgs::PalletLiftReport_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::twinny_msgs::PalletLiftReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::twinny_msgs::PalletLiftReport_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::twinny_msgs::PalletLiftReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::twinny_msgs::PalletLiftReport_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::twinny_msgs::PalletLiftReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "00b1730e0b05bdf263d85c2341b4fab7";
  }

  static const char* value(const ::twinny_msgs::PalletLiftReport_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x00b1730e0b05bdf2ULL;
  static const uint64_t static_value2 = 0x63d85c2341b4fab7ULL;
};

template<class ContainerAllocator>
struct DataType< ::twinny_msgs::PalletLiftReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "twinny_msgs/PalletLiftReport";
  }

  static const char* value(const ::twinny_msgs::PalletLiftReport_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::twinny_msgs::PalletLiftReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string MOVING=moving\n"
"string SETTLE=settle\n"
"string READY_TO_LOAD=ready_to_load\n"
"string LOADED=loaded\n"
"string READY_TO_UNLOAD=ready_to_unload\n"
"string UNLOADED=unloaded\n"
"\n"
"Header header\n"
"string type\n"
"string lift_state\n"
"bool is_robot_loaded\n"
"bool is_station_loaded\n"
"bool is_alarm\n"
"string last_command\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::twinny_msgs::PalletLiftReport_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::twinny_msgs::PalletLiftReport_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.type);
      stream.next(m.lift_state);
      stream.next(m.is_robot_loaded);
      stream.next(m.is_station_loaded);
      stream.next(m.is_alarm);
      stream.next(m.last_command);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PalletLiftReport_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::twinny_msgs::PalletLiftReport_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::twinny_msgs::PalletLiftReport_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.type);
    s << indent << "lift_state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.lift_state);
    s << indent << "is_robot_loaded: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_robot_loaded);
    s << indent << "is_station_loaded: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_station_loaded);
    s << indent << "is_alarm: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_alarm);
    s << indent << "last_command: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.last_command);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TWINNY_MSGS_MESSAGE_PALLETLIFTREPORT_H
