// Generated by gencpp from file twinny_msgs/PalletLiftCommand.msg
// DO NOT EDIT!


#ifndef TWINNY_MSGS_MESSAGE_PALLETLIFTCOMMAND_H
#define TWINNY_MSGS_MESSAGE_PALLETLIFTCOMMAND_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace twinny_msgs
{
template <class ContainerAllocator>
struct PalletLiftCommand_
{
  typedef PalletLiftCommand_<ContainerAllocator> Type;

  PalletLiftCommand_()
    : command()
    , type()  {
    }
  PalletLiftCommand_(const ContainerAllocator& _alloc)
    : command(_alloc)
    , type(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _command_type;
  _command_type command;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _type_type;
  _type_type type;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(SETTLE)
  #undef SETTLE
#endif
#if defined(_WIN32) && defined(READY_TO_LOAD)
  #undef READY_TO_LOAD
#endif
#if defined(_WIN32) && defined(LOAD)
  #undef LOAD
#endif
#if defined(_WIN32) && defined(READY_TO_UNLOAD)
  #undef READY_TO_UNLOAD
#endif
#if defined(_WIN32) && defined(UNLOAD)
  #undef UNLOAD
#endif


  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> SETTLE;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> READY_TO_LOAD;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> LOAD;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> READY_TO_UNLOAD;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> UNLOAD;

  typedef boost::shared_ptr< ::twinny_msgs::PalletLiftCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::twinny_msgs::PalletLiftCommand_<ContainerAllocator> const> ConstPtr;

}; // struct PalletLiftCommand_

typedef ::twinny_msgs::PalletLiftCommand_<std::allocator<void> > PalletLiftCommand;

typedef boost::shared_ptr< ::twinny_msgs::PalletLiftCommand > PalletLiftCommandPtr;
typedef boost::shared_ptr< ::twinny_msgs::PalletLiftCommand const> PalletLiftCommandConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      PalletLiftCommand_<ContainerAllocator>::SETTLE =
        
          "settle"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      PalletLiftCommand_<ContainerAllocator>::READY_TO_LOAD =
        
          "ready_to_load"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      PalletLiftCommand_<ContainerAllocator>::LOAD =
        
          "load"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      PalletLiftCommand_<ContainerAllocator>::READY_TO_UNLOAD =
        
          "ready_to_unload"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      PalletLiftCommand_<ContainerAllocator>::UNLOAD =
        
          "unload"
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::twinny_msgs::PalletLiftCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::twinny_msgs::PalletLiftCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::twinny_msgs::PalletLiftCommand_<ContainerAllocator1> & lhs, const ::twinny_msgs::PalletLiftCommand_<ContainerAllocator2> & rhs)
{
  return lhs.command == rhs.command &&
    lhs.type == rhs.type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::twinny_msgs::PalletLiftCommand_<ContainerAllocator1> & lhs, const ::twinny_msgs::PalletLiftCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace twinny_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::twinny_msgs::PalletLiftCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::twinny_msgs::PalletLiftCommand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::twinny_msgs::PalletLiftCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::twinny_msgs::PalletLiftCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::twinny_msgs::PalletLiftCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::twinny_msgs::PalletLiftCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::twinny_msgs::PalletLiftCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "26fb3be129c5aec0fc705f9631d5551c";
  }

  static const char* value(const ::twinny_msgs::PalletLiftCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x26fb3be129c5aec0ULL;
  static const uint64_t static_value2 = 0xfc705f9631d5551cULL;
};

template<class ContainerAllocator>
struct DataType< ::twinny_msgs::PalletLiftCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "twinny_msgs/PalletLiftCommand";
  }

  static const char* value(const ::twinny_msgs::PalletLiftCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::twinny_msgs::PalletLiftCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string SETTLE=settle\n"
"string READY_TO_LOAD=ready_to_load\n"
"string LOAD=load\n"
"string READY_TO_UNLOAD=ready_to_unload\n"
"string UNLOAD=unload\n"
"\n"
"string command\n"
"string type\n"
;
  }

  static const char* value(const ::twinny_msgs::PalletLiftCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::twinny_msgs::PalletLiftCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.command);
      stream.next(m.type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PalletLiftCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::twinny_msgs::PalletLiftCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::twinny_msgs::PalletLiftCommand_<ContainerAllocator>& v)
  {
    s << indent << "command: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.command);
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TWINNY_MSGS_MESSAGE_PALLETLIFTCOMMAND_H
