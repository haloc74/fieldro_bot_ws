// Generated by gencpp from file twinny_msgs/MonitorStowageBoard.msg
// DO NOT EDIT!


#ifndef TWINNY_MSGS_MESSAGE_MONITORSTOWAGEBOARD_H
#define TWINNY_MSGS_MESSAGE_MONITORSTOWAGEBOARD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace twinny_msgs
{
template <class ContainerAllocator>
struct MonitorStowageBoard_
{
  typedef MonitorStowageBoard_<ContainerAllocator> Type;

  MonitorStowageBoard_()
    : header()
    , id()
    , pc_to_mcu_heartbeat_error()
    , mcu_to_pc_heartbeat_hz()
    , adc_ic_error()
    , eeprom_error()  {
    }
  MonitorStowageBoard_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , id(_alloc)
    , pc_to_mcu_heartbeat_error(_alloc)
    , mcu_to_pc_heartbeat_hz(_alloc)
    , adc_ic_error(_alloc)
    , eeprom_error(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _id_type;
  _id_type id;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _pc_to_mcu_heartbeat_error_type;
  _pc_to_mcu_heartbeat_error_type pc_to_mcu_heartbeat_error;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _mcu_to_pc_heartbeat_hz_type;
  _mcu_to_pc_heartbeat_hz_type mcu_to_pc_heartbeat_hz;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _adc_ic_error_type;
  _adc_ic_error_type adc_ic_error;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _eeprom_error_type;
  _eeprom_error_type eeprom_error;





  typedef boost::shared_ptr< ::twinny_msgs::MonitorStowageBoard_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::twinny_msgs::MonitorStowageBoard_<ContainerAllocator> const> ConstPtr;

}; // struct MonitorStowageBoard_

typedef ::twinny_msgs::MonitorStowageBoard_<std::allocator<void> > MonitorStowageBoard;

typedef boost::shared_ptr< ::twinny_msgs::MonitorStowageBoard > MonitorStowageBoardPtr;
typedef boost::shared_ptr< ::twinny_msgs::MonitorStowageBoard const> MonitorStowageBoardConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::twinny_msgs::MonitorStowageBoard_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::twinny_msgs::MonitorStowageBoard_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::twinny_msgs::MonitorStowageBoard_<ContainerAllocator1> & lhs, const ::twinny_msgs::MonitorStowageBoard_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.id == rhs.id &&
    lhs.pc_to_mcu_heartbeat_error == rhs.pc_to_mcu_heartbeat_error &&
    lhs.mcu_to_pc_heartbeat_hz == rhs.mcu_to_pc_heartbeat_hz &&
    lhs.adc_ic_error == rhs.adc_ic_error &&
    lhs.eeprom_error == rhs.eeprom_error;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::twinny_msgs::MonitorStowageBoard_<ContainerAllocator1> & lhs, const ::twinny_msgs::MonitorStowageBoard_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace twinny_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::twinny_msgs::MonitorStowageBoard_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::twinny_msgs::MonitorStowageBoard_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::twinny_msgs::MonitorStowageBoard_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::twinny_msgs::MonitorStowageBoard_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::twinny_msgs::MonitorStowageBoard_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::twinny_msgs::MonitorStowageBoard_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::twinny_msgs::MonitorStowageBoard_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6ae2271e02d73334e1713180840e83b0";
  }

  static const char* value(const ::twinny_msgs::MonitorStowageBoard_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6ae2271e02d73334ULL;
  static const uint64_t static_value2 = 0xe1713180840e83b0ULL;
};

template<class ContainerAllocator>
struct DataType< ::twinny_msgs::MonitorStowageBoard_<ContainerAllocator> >
{
  static const char* value()
  {
    return "twinny_msgs/MonitorStowageBoard";
  }

  static const char* value(const ::twinny_msgs::MonitorStowageBoard_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::twinny_msgs::MonitorStowageBoard_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header \n"
"\n"
"uint8[] id\n"
"bool[] pc_to_mcu_heartbeat_error\n"
"uint8[] mcu_to_pc_heartbeat_hz\n"
"bool[] adc_ic_error\n"
"bool[] eeprom_error\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::twinny_msgs::MonitorStowageBoard_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::twinny_msgs::MonitorStowageBoard_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.id);
      stream.next(m.pc_to_mcu_heartbeat_error);
      stream.next(m.mcu_to_pc_heartbeat_hz);
      stream.next(m.adc_ic_error);
      stream.next(m.eeprom_error);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MonitorStowageBoard_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::twinny_msgs::MonitorStowageBoard_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::twinny_msgs::MonitorStowageBoard_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "id[]" << std::endl;
    for (size_t i = 0; i < v.id.size(); ++i)
    {
      s << indent << "  id[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.id[i]);
    }
    s << indent << "pc_to_mcu_heartbeat_error[]" << std::endl;
    for (size_t i = 0; i < v.pc_to_mcu_heartbeat_error.size(); ++i)
    {
      s << indent << "  pc_to_mcu_heartbeat_error[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.pc_to_mcu_heartbeat_error[i]);
    }
    s << indent << "mcu_to_pc_heartbeat_hz[]" << std::endl;
    for (size_t i = 0; i < v.mcu_to_pc_heartbeat_hz.size(); ++i)
    {
      s << indent << "  mcu_to_pc_heartbeat_hz[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.mcu_to_pc_heartbeat_hz[i]);
    }
    s << indent << "adc_ic_error[]" << std::endl;
    for (size_t i = 0; i < v.adc_ic_error.size(); ++i)
    {
      s << indent << "  adc_ic_error[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.adc_ic_error[i]);
    }
    s << indent << "eeprom_error[]" << std::endl;
    for (size_t i = 0; i < v.eeprom_error.size(); ++i)
    {
      s << indent << "  eeprom_error[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.eeprom_error[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TWINNY_MSGS_MESSAGE_MONITORSTOWAGEBOARD_H
