// Generated by gencpp from file twinny_msgs/DesiredActualCommand.msg
// DO NOT EDIT!


#ifndef TWINNY_MSGS_MESSAGE_DESIREDACTUALCOMMAND_H
#define TWINNY_MSGS_MESSAGE_DESIREDACTUALCOMMAND_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace twinny_msgs
{
template <class ContainerAllocator>
struct DesiredActualCommand_
{
  typedef DesiredActualCommand_<ContainerAllocator> Type;

  DesiredActualCommand_()
    : header()
    , desiredPose()
    , desiredVel()
    , actualPose()
    , actualVel()
    , commandVel()  {
    }
  DesiredActualCommand_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , desiredPose(_alloc)
    , desiredVel(_alloc)
    , actualPose(_alloc)
    , actualVel(_alloc)
    , commandVel(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _desiredPose_type;
  _desiredPose_type desiredPose;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _desiredVel_type;
  _desiredVel_type desiredVel;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _actualPose_type;
  _actualPose_type actualPose;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _actualVel_type;
  _actualVel_type actualVel;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _commandVel_type;
  _commandVel_type commandVel;





  typedef boost::shared_ptr< ::twinny_msgs::DesiredActualCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::twinny_msgs::DesiredActualCommand_<ContainerAllocator> const> ConstPtr;

}; // struct DesiredActualCommand_

typedef ::twinny_msgs::DesiredActualCommand_<std::allocator<void> > DesiredActualCommand;

typedef boost::shared_ptr< ::twinny_msgs::DesiredActualCommand > DesiredActualCommandPtr;
typedef boost::shared_ptr< ::twinny_msgs::DesiredActualCommand const> DesiredActualCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::twinny_msgs::DesiredActualCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::twinny_msgs::DesiredActualCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::twinny_msgs::DesiredActualCommand_<ContainerAllocator1> & lhs, const ::twinny_msgs::DesiredActualCommand_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.desiredPose == rhs.desiredPose &&
    lhs.desiredVel == rhs.desiredVel &&
    lhs.actualPose == rhs.actualPose &&
    lhs.actualVel == rhs.actualVel &&
    lhs.commandVel == rhs.commandVel;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::twinny_msgs::DesiredActualCommand_<ContainerAllocator1> & lhs, const ::twinny_msgs::DesiredActualCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace twinny_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::twinny_msgs::DesiredActualCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::twinny_msgs::DesiredActualCommand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::twinny_msgs::DesiredActualCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::twinny_msgs::DesiredActualCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::twinny_msgs::DesiredActualCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::twinny_msgs::DesiredActualCommand_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::twinny_msgs::DesiredActualCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "eed852e2eabe4ebf8afd3f4ced2b8875";
  }

  static const char* value(const ::twinny_msgs::DesiredActualCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xeed852e2eabe4ebfULL;
  static const uint64_t static_value2 = 0x8afd3f4ced2b8875ULL;
};

template<class ContainerAllocator>
struct DataType< ::twinny_msgs::DesiredActualCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "twinny_msgs/DesiredActualCommand";
  }

  static const char* value(const ::twinny_msgs::DesiredActualCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::twinny_msgs::DesiredActualCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"geometry_msgs/Vector3 desiredPose\n"
"geometry_msgs/Vector3 desiredVel\n"
"geometry_msgs/Vector3 actualPose\n"
"geometry_msgs/Vector3 actualVel\n"
"geometry_msgs/Vector3 commandVel\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::twinny_msgs::DesiredActualCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::twinny_msgs::DesiredActualCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.desiredPose);
      stream.next(m.desiredVel);
      stream.next(m.actualPose);
      stream.next(m.actualVel);
      stream.next(m.commandVel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DesiredActualCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::twinny_msgs::DesiredActualCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::twinny_msgs::DesiredActualCommand_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "desiredPose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.desiredPose);
    s << indent << "desiredVel: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.desiredVel);
    s << indent << "actualPose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.actualPose);
    s << indent << "actualVel: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.actualVel);
    s << indent << "commandVel: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.commandVel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TWINNY_MSGS_MESSAGE_DESIREDACTUALCOMMAND_H
