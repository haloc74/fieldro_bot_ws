// Generated by gencpp from file twinny_msgs/ResetKalmanFilterResponse.msg
// DO NOT EDIT!


#ifndef TWINNY_MSGS_MESSAGE_RESETKALMANFILTERRESPONSE_H
#define TWINNY_MSGS_MESSAGE_RESETKALMANFILTERRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace twinny_msgs
{
template <class ContainerAllocator>
struct ResetKalmanFilterResponse_
{
  typedef ResetKalmanFilterResponse_<ContainerAllocator> Type;

  ResetKalmanFilterResponse_()
    : state(0)  {
    }
  ResetKalmanFilterResponse_(const ContainerAllocator& _alloc)
    : state(0)  {
  (void)_alloc;
    }



   typedef int32_t _state_type;
  _state_type state;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(SUCCESS)
  #undef SUCCESS
#endif
#if defined(_WIN32) && defined(NOT_PERMIT_IN_DISABLE_MODE)
  #undef NOT_PERMIT_IN_DISABLE_MODE
#endif
#if defined(_WIN32) && defined(UNKNOWN_ERROR)
  #undef UNKNOWN_ERROR
#endif

  enum {
    SUCCESS = 1,
    NOT_PERMIT_IN_DISABLE_MODE = -2,
    UNKNOWN_ERROR = -404,
  };


  typedef boost::shared_ptr< ::twinny_msgs::ResetKalmanFilterResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::twinny_msgs::ResetKalmanFilterResponse_<ContainerAllocator> const> ConstPtr;

}; // struct ResetKalmanFilterResponse_

typedef ::twinny_msgs::ResetKalmanFilterResponse_<std::allocator<void> > ResetKalmanFilterResponse;

typedef boost::shared_ptr< ::twinny_msgs::ResetKalmanFilterResponse > ResetKalmanFilterResponsePtr;
typedef boost::shared_ptr< ::twinny_msgs::ResetKalmanFilterResponse const> ResetKalmanFilterResponseConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::twinny_msgs::ResetKalmanFilterResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::twinny_msgs::ResetKalmanFilterResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::twinny_msgs::ResetKalmanFilterResponse_<ContainerAllocator1> & lhs, const ::twinny_msgs::ResetKalmanFilterResponse_<ContainerAllocator2> & rhs)
{
  return lhs.state == rhs.state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::twinny_msgs::ResetKalmanFilterResponse_<ContainerAllocator1> & lhs, const ::twinny_msgs::ResetKalmanFilterResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace twinny_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::twinny_msgs::ResetKalmanFilterResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::twinny_msgs::ResetKalmanFilterResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::twinny_msgs::ResetKalmanFilterResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::twinny_msgs::ResetKalmanFilterResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::twinny_msgs::ResetKalmanFilterResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::twinny_msgs::ResetKalmanFilterResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::twinny_msgs::ResetKalmanFilterResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6c52dd7ca4d559768802719a649d3a8a";
  }

  static const char* value(const ::twinny_msgs::ResetKalmanFilterResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6c52dd7ca4d55976ULL;
  static const uint64_t static_value2 = 0x8802719a649d3a8aULL;
};

template<class ContainerAllocator>
struct DataType< ::twinny_msgs::ResetKalmanFilterResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "twinny_msgs/ResetKalmanFilterResponse";
  }

  static const char* value(const ::twinny_msgs::ResetKalmanFilterResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::twinny_msgs::ResetKalmanFilterResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 state\n"
"\n"
"int32 SUCCESS=1\n"
"int32 NOT_PERMIT_IN_DISABLE_MODE=-2\n"
"int32 UNKNOWN_ERROR=-404\n"
;
  }

  static const char* value(const ::twinny_msgs::ResetKalmanFilterResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::twinny_msgs::ResetKalmanFilterResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ResetKalmanFilterResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::twinny_msgs::ResetKalmanFilterResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::twinny_msgs::ResetKalmanFilterResponse_<ContainerAllocator>& v)
  {
    s << indent << "state: ";
    Printer<int32_t>::stream(s, indent + "  ", v.state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TWINNY_MSGS_MESSAGE_RESETKALMANFILTERRESPONSE_H
