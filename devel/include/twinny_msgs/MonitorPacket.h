// Generated by gencpp from file twinny_msgs/MonitorPacket.msg
// DO NOT EDIT!


#ifndef TWINNY_MSGS_MESSAGE_MONITORPACKET_H
#define TWINNY_MSGS_MESSAGE_MONITORPACKET_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace twinny_msgs
{
template <class ContainerAllocator>
struct MonitorPacket_
{
  typedef MonitorPacket_<ContainerAllocator> Type;

  MonitorPacket_()
    : header()
    , CAN1_MCU_Rx_Packet(0)
    , CAN1_MCU_Tx_Packet(0)
    , CAN2_MCU_Rx_Packet(0)
    , CAN2_MCU_Tx_Packet(0)
    , LIN1_MCU_Rx(0)
    , LIN1_MCU_Tx(0)
    , LIN2_MCU_Rx(0)
    , LIN2_MCU_Tx(0)  {
    }
  MonitorPacket_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , CAN1_MCU_Rx_Packet(0)
    , CAN1_MCU_Tx_Packet(0)
    , CAN2_MCU_Rx_Packet(0)
    , CAN2_MCU_Tx_Packet(0)
    , LIN1_MCU_Rx(0)
    , LIN1_MCU_Tx(0)
    , LIN2_MCU_Rx(0)
    , LIN2_MCU_Tx(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint16_t _CAN1_MCU_Rx_Packet_type;
  _CAN1_MCU_Rx_Packet_type CAN1_MCU_Rx_Packet;

   typedef uint16_t _CAN1_MCU_Tx_Packet_type;
  _CAN1_MCU_Tx_Packet_type CAN1_MCU_Tx_Packet;

   typedef uint16_t _CAN2_MCU_Rx_Packet_type;
  _CAN2_MCU_Rx_Packet_type CAN2_MCU_Rx_Packet;

   typedef uint16_t _CAN2_MCU_Tx_Packet_type;
  _CAN2_MCU_Tx_Packet_type CAN2_MCU_Tx_Packet;

   typedef uint16_t _LIN1_MCU_Rx_type;
  _LIN1_MCU_Rx_type LIN1_MCU_Rx;

   typedef uint16_t _LIN1_MCU_Tx_type;
  _LIN1_MCU_Tx_type LIN1_MCU_Tx;

   typedef uint16_t _LIN2_MCU_Rx_type;
  _LIN2_MCU_Rx_type LIN2_MCU_Rx;

   typedef uint16_t _LIN2_MCU_Tx_type;
  _LIN2_MCU_Tx_type LIN2_MCU_Tx;





  typedef boost::shared_ptr< ::twinny_msgs::MonitorPacket_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::twinny_msgs::MonitorPacket_<ContainerAllocator> const> ConstPtr;

}; // struct MonitorPacket_

typedef ::twinny_msgs::MonitorPacket_<std::allocator<void> > MonitorPacket;

typedef boost::shared_ptr< ::twinny_msgs::MonitorPacket > MonitorPacketPtr;
typedef boost::shared_ptr< ::twinny_msgs::MonitorPacket const> MonitorPacketConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::twinny_msgs::MonitorPacket_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::twinny_msgs::MonitorPacket_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::twinny_msgs::MonitorPacket_<ContainerAllocator1> & lhs, const ::twinny_msgs::MonitorPacket_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.CAN1_MCU_Rx_Packet == rhs.CAN1_MCU_Rx_Packet &&
    lhs.CAN1_MCU_Tx_Packet == rhs.CAN1_MCU_Tx_Packet &&
    lhs.CAN2_MCU_Rx_Packet == rhs.CAN2_MCU_Rx_Packet &&
    lhs.CAN2_MCU_Tx_Packet == rhs.CAN2_MCU_Tx_Packet &&
    lhs.LIN1_MCU_Rx == rhs.LIN1_MCU_Rx &&
    lhs.LIN1_MCU_Tx == rhs.LIN1_MCU_Tx &&
    lhs.LIN2_MCU_Rx == rhs.LIN2_MCU_Rx &&
    lhs.LIN2_MCU_Tx == rhs.LIN2_MCU_Tx;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::twinny_msgs::MonitorPacket_<ContainerAllocator1> & lhs, const ::twinny_msgs::MonitorPacket_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace twinny_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::twinny_msgs::MonitorPacket_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::twinny_msgs::MonitorPacket_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::twinny_msgs::MonitorPacket_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::twinny_msgs::MonitorPacket_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::twinny_msgs::MonitorPacket_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::twinny_msgs::MonitorPacket_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::twinny_msgs::MonitorPacket_<ContainerAllocator> >
{
  static const char* value()
  {
    return "66e58c86df0235b897d5abd8cc8e9f6d";
  }

  static const char* value(const ::twinny_msgs::MonitorPacket_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x66e58c86df0235b8ULL;
  static const uint64_t static_value2 = 0x97d5abd8cc8e9f6dULL;
};

template<class ContainerAllocator>
struct DataType< ::twinny_msgs::MonitorPacket_<ContainerAllocator> >
{
  static const char* value()
  {
    return "twinny_msgs/MonitorPacket";
  }

  static const char* value(const ::twinny_msgs::MonitorPacket_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::twinny_msgs::MonitorPacket_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header \n"
"\n"
"uint16 CAN1_MCU_Rx_Packet\n"
"uint16 CAN1_MCU_Tx_Packet\n"
"uint16 CAN2_MCU_Rx_Packet\n"
"uint16 CAN2_MCU_Tx_Packet\n"
"\n"
"uint16 LIN1_MCU_Rx\n"
"uint16 LIN1_MCU_Tx\n"
"uint16 LIN2_MCU_Rx\n"
"uint16 LIN2_MCU_Tx\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::twinny_msgs::MonitorPacket_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::twinny_msgs::MonitorPacket_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.CAN1_MCU_Rx_Packet);
      stream.next(m.CAN1_MCU_Tx_Packet);
      stream.next(m.CAN2_MCU_Rx_Packet);
      stream.next(m.CAN2_MCU_Tx_Packet);
      stream.next(m.LIN1_MCU_Rx);
      stream.next(m.LIN1_MCU_Tx);
      stream.next(m.LIN2_MCU_Rx);
      stream.next(m.LIN2_MCU_Tx);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MonitorPacket_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::twinny_msgs::MonitorPacket_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::twinny_msgs::MonitorPacket_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "CAN1_MCU_Rx_Packet: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.CAN1_MCU_Rx_Packet);
    s << indent << "CAN1_MCU_Tx_Packet: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.CAN1_MCU_Tx_Packet);
    s << indent << "CAN2_MCU_Rx_Packet: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.CAN2_MCU_Rx_Packet);
    s << indent << "CAN2_MCU_Tx_Packet: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.CAN2_MCU_Tx_Packet);
    s << indent << "LIN1_MCU_Rx: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.LIN1_MCU_Rx);
    s << indent << "LIN1_MCU_Tx: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.LIN1_MCU_Tx);
    s << indent << "LIN2_MCU_Rx: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.LIN2_MCU_Rx);
    s << indent << "LIN2_MCU_Tx: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.LIN2_MCU_Tx);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TWINNY_MSGS_MESSAGE_MONITORPACKET_H
