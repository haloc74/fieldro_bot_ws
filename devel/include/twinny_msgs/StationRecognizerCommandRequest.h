// Generated by gencpp from file twinny_msgs/StationRecognizerCommandRequest.msg
// DO NOT EDIT!


#ifndef TWINNY_MSGS_MESSAGE_STATIONRECOGNIZERCOMMANDREQUEST_H
#define TWINNY_MSGS_MESSAGE_STATIONRECOGNIZERCOMMANDREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose2D.h>
#include <geometry_msgs/Pose2D.h>

namespace twinny_msgs
{
template <class ContainerAllocator>
struct StationRecognizerCommandRequest_
{
  typedef StationRecognizerCommandRequest_<ContainerAllocator> Type;

  StationRecognizerCommandRequest_()
    : type()
    , command(0)
    , frame_name()
    , current_robot_pose()
    , candidate_pose()
    , roi_length(0.0)
    , extra_field()  {
    }
  StationRecognizerCommandRequest_(const ContainerAllocator& _alloc)
    : type(_alloc)
    , command(0)
    , frame_name(_alloc)
    , current_robot_pose(_alloc)
    , candidate_pose(_alloc)
    , roi_length(0.0)
    , extra_field(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _type_type;
  _type_type type;

   typedef uint8_t _command_type;
  _command_type command;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _frame_name_type;
  _frame_name_type frame_name;

   typedef  ::geometry_msgs::Pose2D_<ContainerAllocator>  _current_robot_pose_type;
  _current_robot_pose_type current_robot_pose;

   typedef  ::geometry_msgs::Pose2D_<ContainerAllocator>  _candidate_pose_type;
  _candidate_pose_type candidate_pose;

   typedef double _roi_length_type;
  _roi_length_type roi_length;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _extra_field_type;
  _extra_field_type extra_field;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(START)
  #undef START
#endif
#if defined(_WIN32) && defined(STOP)
  #undef STOP
#endif
#if defined(_WIN32) && defined(PAUSE)
  #undef PAUSE
#endif
#if defined(_WIN32) && defined(RESUME)
  #undef RESUME
#endif
#if defined(_WIN32) && defined(RESET_KALMAN)
  #undef RESET_KALMAN
#endif
#if defined(_WIN32) && defined(GET_STATION)
  #undef GET_STATION
#endif

  enum {
    START = 0u,
    STOP = 1u,
    PAUSE = 2u,
    RESUME = 3u,
    RESET_KALMAN = 4u,
    GET_STATION = 5u,
  };


  typedef boost::shared_ptr< ::twinny_msgs::StationRecognizerCommandRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::twinny_msgs::StationRecognizerCommandRequest_<ContainerAllocator> const> ConstPtr;

}; // struct StationRecognizerCommandRequest_

typedef ::twinny_msgs::StationRecognizerCommandRequest_<std::allocator<void> > StationRecognizerCommandRequest;

typedef boost::shared_ptr< ::twinny_msgs::StationRecognizerCommandRequest > StationRecognizerCommandRequestPtr;
typedef boost::shared_ptr< ::twinny_msgs::StationRecognizerCommandRequest const> StationRecognizerCommandRequestConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::twinny_msgs::StationRecognizerCommandRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::twinny_msgs::StationRecognizerCommandRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::twinny_msgs::StationRecognizerCommandRequest_<ContainerAllocator1> & lhs, const ::twinny_msgs::StationRecognizerCommandRequest_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type &&
    lhs.command == rhs.command &&
    lhs.frame_name == rhs.frame_name &&
    lhs.current_robot_pose == rhs.current_robot_pose &&
    lhs.candidate_pose == rhs.candidate_pose &&
    lhs.roi_length == rhs.roi_length &&
    lhs.extra_field == rhs.extra_field;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::twinny_msgs::StationRecognizerCommandRequest_<ContainerAllocator1> & lhs, const ::twinny_msgs::StationRecognizerCommandRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace twinny_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::twinny_msgs::StationRecognizerCommandRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::twinny_msgs::StationRecognizerCommandRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::twinny_msgs::StationRecognizerCommandRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::twinny_msgs::StationRecognizerCommandRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::twinny_msgs::StationRecognizerCommandRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::twinny_msgs::StationRecognizerCommandRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::twinny_msgs::StationRecognizerCommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "048b682f839d7464bdb8aeb10dc846ee";
  }

  static const char* value(const ::twinny_msgs::StationRecognizerCommandRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x048b682f839d7464ULL;
  static const uint64_t static_value2 = 0xbdb8aeb10dc846eeULL;
};

template<class ContainerAllocator>
struct DataType< ::twinny_msgs::StationRecognizerCommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "twinny_msgs/StationRecognizerCommandRequest";
  }

  static const char* value(const ::twinny_msgs::StationRecognizerCommandRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::twinny_msgs::StationRecognizerCommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string type\n"
"\n"
"uint8 START = 0\n"
"uint8 STOP = 1\n"
"uint8 PAUSE = 2\n"
"uint8 RESUME = 3\n"
"uint8 RESET_KALMAN = 4\n"
"uint8 GET_STATION = 5\n"
"uint8 command\n"
"\n"
"string frame_name\n"
"geometry_msgs/Pose2D current_robot_pose\n"
"geometry_msgs/Pose2D candidate_pose\n"
"\n"
"float64 roi_length\n"
"\n"
"string extra_field\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose2D\n"
"# Deprecated\n"
"# Please use the full 3D pose.\n"
"\n"
"# In general our recommendation is to use a full 3D representation of everything and for 2D specific applications make the appropriate projections into the plane for their calculations but optimally will preserve the 3D information during processing.\n"
"\n"
"# If we have parallel copies of 2D datatypes every UI and other pipeline will end up needing to have dual interfaces to plot everything. And you will end up with not being able to use 3D tools for 2D use cases even if they're completely valid, as you'd have to reimplement it with different inputs and outputs. It's not particularly hard to plot the 2D pose or compute the yaw error for the Pose message and there are already tools and libraries that can do this for you.\n"
"\n"
"\n"
"# This expresses a position and orientation on a 2D manifold.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 theta\n"
;
  }

  static const char* value(const ::twinny_msgs::StationRecognizerCommandRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::twinny_msgs::StationRecognizerCommandRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.command);
      stream.next(m.frame_name);
      stream.next(m.current_robot_pose);
      stream.next(m.candidate_pose);
      stream.next(m.roi_length);
      stream.next(m.extra_field);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StationRecognizerCommandRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::twinny_msgs::StationRecognizerCommandRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::twinny_msgs::StationRecognizerCommandRequest_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.type);
    s << indent << "command: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.command);
    s << indent << "frame_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.frame_name);
    s << indent << "current_robot_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose2D_<ContainerAllocator> >::stream(s, indent + "  ", v.current_robot_pose);
    s << indent << "candidate_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose2D_<ContainerAllocator> >::stream(s, indent + "  ", v.candidate_pose);
    s << indent << "roi_length: ";
    Printer<double>::stream(s, indent + "  ", v.roi_length);
    s << indent << "extra_field: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.extra_field);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TWINNY_MSGS_MESSAGE_STATIONRECOGNIZERCOMMANDREQUEST_H
