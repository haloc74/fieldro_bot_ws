// Generated by gencpp from file twinny_msgs/PowerRelayCommand.msg
// DO NOT EDIT!


#ifndef TWINNY_MSGS_MESSAGE_POWERRELAYCOMMAND_H
#define TWINNY_MSGS_MESSAGE_POWERRELAYCOMMAND_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace twinny_msgs
{
template <class ContainerAllocator>
struct PowerRelayCommand_
{
  typedef PowerRelayCommand_<ContainerAllocator> Type;

  PowerRelayCommand_()
    : header()
    , Motor_power_relay_control(0)
    , PC_MCU_power_relay_control(0)
    , Charger_start_command(0)  {
    }
  PowerRelayCommand_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , Motor_power_relay_control(0)
    , PC_MCU_power_relay_control(0)
    , Charger_start_command(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _Motor_power_relay_control_type;
  _Motor_power_relay_control_type Motor_power_relay_control;

   typedef uint8_t _PC_MCU_power_relay_control_type;
  _PC_MCU_power_relay_control_type PC_MCU_power_relay_control;

   typedef uint8_t _Charger_start_command_type;
  _Charger_start_command_type Charger_start_command;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(FORCED_OFF)
  #undef FORCED_OFF
#endif
#if defined(_WIN32) && defined(ON)
  #undef ON
#endif
#if defined(_WIN32) && defined(KEEP)
  #undef KEEP
#endif
#if defined(_WIN32) && defined(CHARGER_OFF)
  #undef CHARGER_OFF
#endif
#if defined(_WIN32) && defined(CHARGER_ON)
  #undef CHARGER_ON
#endif
#if defined(_WIN32) && defined(CHARGER_KEEP)
  #undef CHARGER_KEEP
#endif
#if defined(_WIN32) && defined(MOTOR_RELAY_OFF)
  #undef MOTOR_RELAY_OFF
#endif
#if defined(_WIN32) && defined(MOTOR_RELAY_ON)
  #undef MOTOR_RELAY_ON
#endif
#if defined(_WIN32) && defined(MOTOR_RELAY_KEEP)
  #undef MOTOR_RELAY_KEEP
#endif
#if defined(_WIN32) && defined(PC_MCU_RELAY_OFF)
  #undef PC_MCU_RELAY_OFF
#endif
#if defined(_WIN32) && defined(PC_MCU_RELAY_ON)
  #undef PC_MCU_RELAY_ON
#endif
#if defined(_WIN32) && defined(PC_MCU_RELAY_KEEP)
  #undef PC_MCU_RELAY_KEEP
#endif

  enum {
    FORCED_OFF = 0u,
    ON = 1u,
    KEEP = 2u,
    CHARGER_OFF = 0u,
    CHARGER_ON = 1u,
    CHARGER_KEEP = 2u,
    MOTOR_RELAY_OFF = 0u,
    MOTOR_RELAY_ON = 1u,
    MOTOR_RELAY_KEEP = 2u,
    PC_MCU_RELAY_OFF = 0u,
    PC_MCU_RELAY_ON = 1u,
    PC_MCU_RELAY_KEEP = 2u,
  };


  typedef boost::shared_ptr< ::twinny_msgs::PowerRelayCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::twinny_msgs::PowerRelayCommand_<ContainerAllocator> const> ConstPtr;

}; // struct PowerRelayCommand_

typedef ::twinny_msgs::PowerRelayCommand_<std::allocator<void> > PowerRelayCommand;

typedef boost::shared_ptr< ::twinny_msgs::PowerRelayCommand > PowerRelayCommandPtr;
typedef boost::shared_ptr< ::twinny_msgs::PowerRelayCommand const> PowerRelayCommandConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::twinny_msgs::PowerRelayCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::twinny_msgs::PowerRelayCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::twinny_msgs::PowerRelayCommand_<ContainerAllocator1> & lhs, const ::twinny_msgs::PowerRelayCommand_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.Motor_power_relay_control == rhs.Motor_power_relay_control &&
    lhs.PC_MCU_power_relay_control == rhs.PC_MCU_power_relay_control &&
    lhs.Charger_start_command == rhs.Charger_start_command;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::twinny_msgs::PowerRelayCommand_<ContainerAllocator1> & lhs, const ::twinny_msgs::PowerRelayCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace twinny_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::twinny_msgs::PowerRelayCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::twinny_msgs::PowerRelayCommand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::twinny_msgs::PowerRelayCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::twinny_msgs::PowerRelayCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::twinny_msgs::PowerRelayCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::twinny_msgs::PowerRelayCommand_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::twinny_msgs::PowerRelayCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7c82c51a774f35c41519d2c48627f1d3";
  }

  static const char* value(const ::twinny_msgs::PowerRelayCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7c82c51a774f35c4ULL;
  static const uint64_t static_value2 = 0x1519d2c48627f1d3ULL;
};

template<class ContainerAllocator>
struct DataType< ::twinny_msgs::PowerRelayCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "twinny_msgs/PowerRelayCommand";
  }

  static const char* value(const ::twinny_msgs::PowerRelayCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::twinny_msgs::PowerRelayCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header \n"
"\n"
"uint8 Motor_power_relay_control\n"
"uint8 PC_MCU_power_relay_control\n"
"uint8 Charger_start_command\n"
"\n"
"uint8 FORCED_OFF = 0\n"
"uint8 ON = 1\n"
"uint8 KEEP = 2\n"
"\n"
"uint8 CHARGER_OFF = 0\n"
"uint8 CHARGER_ON = 1\n"
"uint8 CHARGER_KEEP = 2\n"
"\n"
"uint8 MOTOR_RELAY_OFF = 0\n"
"uint8 MOTOR_RELAY_ON = 1\n"
"uint8 MOTOR_RELAY_KEEP = 2\n"
"\n"
"uint8 PC_MCU_RELAY_OFF = 0\n"
"uint8 PC_MCU_RELAY_ON = 1\n"
"uint8 PC_MCU_RELAY_KEEP = 2\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::twinny_msgs::PowerRelayCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::twinny_msgs::PowerRelayCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.Motor_power_relay_control);
      stream.next(m.PC_MCU_power_relay_control);
      stream.next(m.Charger_start_command);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PowerRelayCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::twinny_msgs::PowerRelayCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::twinny_msgs::PowerRelayCommand_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "Motor_power_relay_control: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Motor_power_relay_control);
    s << indent << "PC_MCU_power_relay_control: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.PC_MCU_power_relay_control);
    s << indent << "Charger_start_command: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Charger_start_command);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TWINNY_MSGS_MESSAGE_POWERRELAYCOMMAND_H
