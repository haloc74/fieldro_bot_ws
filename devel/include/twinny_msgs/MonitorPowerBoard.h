// Generated by gencpp from file twinny_msgs/MonitorPowerBoard.msg
// DO NOT EDIT!


#ifndef TWINNY_MSGS_MESSAGE_MONITORPOWERBOARD_H
#define TWINNY_MSGS_MESSAGE_MONITORPOWERBOARD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace twinny_msgs
{
template <class ContainerAllocator>
struct MonitorPowerBoard_
{
  typedef MonitorPowerBoard_<ContainerAllocator> Type;

  MonitorPowerBoard_()
    : header()
    , Mode()
    , voltage_flag()
    , charge_current_flag()
    , robot_power_on_mode()
    , motor_relay_error(false)
    , robot_power_relay_error(false)
    , pc_switch_error(false)
    , pc_boot_up_error(false)
    , pc_boot_off_error(false)
    , pc_down_error(false)
    , charge_relay_error(false)  {
    }
  MonitorPowerBoard_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , Mode(_alloc)
    , voltage_flag(_alloc)
    , charge_current_flag(_alloc)
    , robot_power_on_mode(_alloc)
    , motor_relay_error(false)
    , robot_power_relay_error(false)
    , pc_switch_error(false)
    , pc_boot_up_error(false)
    , pc_boot_off_error(false)
    , pc_down_error(false)
    , charge_relay_error(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _Mode_type;
  _Mode_type Mode;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _voltage_flag_type;
  _voltage_flag_type voltage_flag;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _charge_current_flag_type;
  _charge_current_flag_type charge_current_flag;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _robot_power_on_mode_type;
  _robot_power_on_mode_type robot_power_on_mode;

   typedef uint8_t _motor_relay_error_type;
  _motor_relay_error_type motor_relay_error;

   typedef uint8_t _robot_power_relay_error_type;
  _robot_power_relay_error_type robot_power_relay_error;

   typedef uint8_t _pc_switch_error_type;
  _pc_switch_error_type pc_switch_error;

   typedef uint8_t _pc_boot_up_error_type;
  _pc_boot_up_error_type pc_boot_up_error;

   typedef uint8_t _pc_boot_off_error_type;
  _pc_boot_off_error_type pc_boot_off_error;

   typedef uint8_t _pc_down_error_type;
  _pc_down_error_type pc_down_error;

   typedef uint8_t _charge_relay_error_type;
  _charge_relay_error_type charge_relay_error;





  typedef boost::shared_ptr< ::twinny_msgs::MonitorPowerBoard_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::twinny_msgs::MonitorPowerBoard_<ContainerAllocator> const> ConstPtr;

}; // struct MonitorPowerBoard_

typedef ::twinny_msgs::MonitorPowerBoard_<std::allocator<void> > MonitorPowerBoard;

typedef boost::shared_ptr< ::twinny_msgs::MonitorPowerBoard > MonitorPowerBoardPtr;
typedef boost::shared_ptr< ::twinny_msgs::MonitorPowerBoard const> MonitorPowerBoardConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::twinny_msgs::MonitorPowerBoard_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::twinny_msgs::MonitorPowerBoard_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::twinny_msgs::MonitorPowerBoard_<ContainerAllocator1> & lhs, const ::twinny_msgs::MonitorPowerBoard_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.Mode == rhs.Mode &&
    lhs.voltage_flag == rhs.voltage_flag &&
    lhs.charge_current_flag == rhs.charge_current_flag &&
    lhs.robot_power_on_mode == rhs.robot_power_on_mode &&
    lhs.motor_relay_error == rhs.motor_relay_error &&
    lhs.robot_power_relay_error == rhs.robot_power_relay_error &&
    lhs.pc_switch_error == rhs.pc_switch_error &&
    lhs.pc_boot_up_error == rhs.pc_boot_up_error &&
    lhs.pc_boot_off_error == rhs.pc_boot_off_error &&
    lhs.pc_down_error == rhs.pc_down_error &&
    lhs.charge_relay_error == rhs.charge_relay_error;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::twinny_msgs::MonitorPowerBoard_<ContainerAllocator1> & lhs, const ::twinny_msgs::MonitorPowerBoard_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace twinny_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::twinny_msgs::MonitorPowerBoard_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::twinny_msgs::MonitorPowerBoard_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::twinny_msgs::MonitorPowerBoard_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::twinny_msgs::MonitorPowerBoard_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::twinny_msgs::MonitorPowerBoard_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::twinny_msgs::MonitorPowerBoard_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::twinny_msgs::MonitorPowerBoard_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d786489e7a443dba4376961f64ea7161";
  }

  static const char* value(const ::twinny_msgs::MonitorPowerBoard_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd786489e7a443dbaULL;
  static const uint64_t static_value2 = 0x4376961f64ea7161ULL;
};

template<class ContainerAllocator>
struct DataType< ::twinny_msgs::MonitorPowerBoard_<ContainerAllocator> >
{
  static const char* value()
  {
    return "twinny_msgs/MonitorPowerBoard";
  }

  static const char* value(const ::twinny_msgs::MonitorPowerBoard_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::twinny_msgs::MonitorPowerBoard_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header \n"
"\n"
"string Mode\n"
"\n"
"string voltage_flag\n"
"string charge_current_flag\n"
"\n"
"string robot_power_on_mode\n"
"\n"
"bool motor_relay_error\n"
"bool robot_power_relay_error\n"
"bool pc_switch_error\n"
"bool pc_boot_up_error\n"
"bool pc_boot_off_error\n"
"bool pc_down_error\n"
"bool charge_relay_error\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::twinny_msgs::MonitorPowerBoard_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::twinny_msgs::MonitorPowerBoard_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.Mode);
      stream.next(m.voltage_flag);
      stream.next(m.charge_current_flag);
      stream.next(m.robot_power_on_mode);
      stream.next(m.motor_relay_error);
      stream.next(m.robot_power_relay_error);
      stream.next(m.pc_switch_error);
      stream.next(m.pc_boot_up_error);
      stream.next(m.pc_boot_off_error);
      stream.next(m.pc_down_error);
      stream.next(m.charge_relay_error);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MonitorPowerBoard_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::twinny_msgs::MonitorPowerBoard_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::twinny_msgs::MonitorPowerBoard_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "Mode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.Mode);
    s << indent << "voltage_flag: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.voltage_flag);
    s << indent << "charge_current_flag: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.charge_current_flag);
    s << indent << "robot_power_on_mode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.robot_power_on_mode);
    s << indent << "motor_relay_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.motor_relay_error);
    s << indent << "robot_power_relay_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.robot_power_relay_error);
    s << indent << "pc_switch_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pc_switch_error);
    s << indent << "pc_boot_up_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pc_boot_up_error);
    s << indent << "pc_boot_off_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pc_boot_off_error);
    s << indent << "pc_down_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pc_down_error);
    s << indent << "charge_relay_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.charge_relay_error);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TWINNY_MSGS_MESSAGE_MONITORPOWERBOARD_H
