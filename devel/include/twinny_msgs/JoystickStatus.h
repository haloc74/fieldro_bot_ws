// Generated by gencpp from file twinny_msgs/JoystickStatus.msg
// DO NOT EDIT!


#ifndef TWINNY_MSGS_MESSAGE_JOYSTICKSTATUS_H
#define TWINNY_MSGS_MESSAGE_JOYSTICKSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace twinny_msgs
{
template <class ContainerAllocator>
struct JoystickStatus_
{
  typedef JoystickStatus_<ContainerAllocator> Type;

  JoystickStatus_()
    : header()
    , joy_driver_status()
    , axes()
    , button()
    , joy_driver_enable_button(false)
    , reduce_velocity_button(false)
    , raise_velocity_button(false)
    , reset_velocity_button(false)
    , vel_scale(0.0)
    , linear_velocity(0.0)
    , angular_velocity(0.0)  {
    }
  JoystickStatus_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , joy_driver_status(_alloc)
    , axes(_alloc)
    , button(_alloc)
    , joy_driver_enable_button(false)
    , reduce_velocity_button(false)
    , raise_velocity_button(false)
    , reset_velocity_button(false)
    , vel_scale(0.0)
    , linear_velocity(0.0)
    , angular_velocity(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _joy_driver_status_type;
  _joy_driver_status_type joy_driver_status;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _axes_type;
  _axes_type axes;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _button_type;
  _button_type button;

   typedef uint8_t _joy_driver_enable_button_type;
  _joy_driver_enable_button_type joy_driver_enable_button;

   typedef uint8_t _reduce_velocity_button_type;
  _reduce_velocity_button_type reduce_velocity_button;

   typedef uint8_t _raise_velocity_button_type;
  _raise_velocity_button_type raise_velocity_button;

   typedef uint8_t _reset_velocity_button_type;
  _reset_velocity_button_type reset_velocity_button;

   typedef float _vel_scale_type;
  _vel_scale_type vel_scale;

   typedef float _linear_velocity_type;
  _linear_velocity_type linear_velocity;

   typedef float _angular_velocity_type;
  _angular_velocity_type angular_velocity;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(AXIS_LEFT_STICK_X)
  #undef AXIS_LEFT_STICK_X
#endif
#if defined(_WIN32) && defined(AXIS_LEFT_STICK_Y)
  #undef AXIS_LEFT_STICK_Y
#endif
#if defined(_WIN32) && defined(AXIS_RIGHT_STICK_X)
  #undef AXIS_RIGHT_STICK_X
#endif
#if defined(_WIN32) && defined(AXIS_RIGHT_STICK_Y)
  #undef AXIS_RIGHT_STICK_Y
#endif
#if defined(_WIN32) && defined(AXIS_DPAD_X)
  #undef AXIS_DPAD_X
#endif
#if defined(_WIN32) && defined(AXIS_DPAD_Y)
  #undef AXIS_DPAD_Y
#endif
#if defined(_WIN32) && defined(AXIS_LEFT_TRIGGER)
  #undef AXIS_LEFT_TRIGGER
#endif
#if defined(_WIN32) && defined(AXIS_RIGHT_TRIGGER)
  #undef AXIS_RIGHT_TRIGGER
#endif
#if defined(_WIN32) && defined(BUTTON_A)
  #undef BUTTON_A
#endif
#if defined(_WIN32) && defined(BUTTON_B)
  #undef BUTTON_B
#endif
#if defined(_WIN32) && defined(BUTTON_X)
  #undef BUTTON_X
#endif
#if defined(_WIN32) && defined(BUTTON_Y)
  #undef BUTTON_Y
#endif
#if defined(_WIN32) && defined(BUTTON_LB)
  #undef BUTTON_LB
#endif
#if defined(_WIN32) && defined(BUTTON_RB)
  #undef BUTTON_RB
#endif
#if defined(_WIN32) && defined(BUTTON_BACK)
  #undef BUTTON_BACK
#endif
#if defined(_WIN32) && defined(BUTTON_START)
  #undef BUTTON_START
#endif
#if defined(_WIN32) && defined(BUTTON_GUIDE)
  #undef BUTTON_GUIDE
#endif
#if defined(_WIN32) && defined(BUTTON_LEFT_STICK)
  #undef BUTTON_LEFT_STICK
#endif
#if defined(_WIN32) && defined(BUTTON_RIGHT_STICK)
  #undef BUTTON_RIGHT_STICK
#endif

  enum {
    AXIS_LEFT_STICK_X = 0u,
    AXIS_LEFT_STICK_Y = 1u,
    AXIS_RIGHT_STICK_X = 2u,
    AXIS_RIGHT_STICK_Y = 3u,
    AXIS_DPAD_X = 4u,
    AXIS_DPAD_Y = 5u,
    AXIS_LEFT_TRIGGER = 6u,
    AXIS_RIGHT_TRIGGER = 7u,
    BUTTON_A = 0u,
    BUTTON_B = 1u,
    BUTTON_X = 2u,
    BUTTON_Y = 3u,
    BUTTON_LB = 4u,
    BUTTON_RB = 5u,
    BUTTON_BACK = 6u,
    BUTTON_START = 7u,
    BUTTON_GUIDE = 8u,
    BUTTON_LEFT_STICK = 9u,
    BUTTON_RIGHT_STICK = 10u,
  };


  typedef boost::shared_ptr< ::twinny_msgs::JoystickStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::twinny_msgs::JoystickStatus_<ContainerAllocator> const> ConstPtr;

}; // struct JoystickStatus_

typedef ::twinny_msgs::JoystickStatus_<std::allocator<void> > JoystickStatus;

typedef boost::shared_ptr< ::twinny_msgs::JoystickStatus > JoystickStatusPtr;
typedef boost::shared_ptr< ::twinny_msgs::JoystickStatus const> JoystickStatusConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::twinny_msgs::JoystickStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::twinny_msgs::JoystickStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::twinny_msgs::JoystickStatus_<ContainerAllocator1> & lhs, const ::twinny_msgs::JoystickStatus_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.joy_driver_status == rhs.joy_driver_status &&
    lhs.axes == rhs.axes &&
    lhs.button == rhs.button &&
    lhs.joy_driver_enable_button == rhs.joy_driver_enable_button &&
    lhs.reduce_velocity_button == rhs.reduce_velocity_button &&
    lhs.raise_velocity_button == rhs.raise_velocity_button &&
    lhs.reset_velocity_button == rhs.reset_velocity_button &&
    lhs.vel_scale == rhs.vel_scale &&
    lhs.linear_velocity == rhs.linear_velocity &&
    lhs.angular_velocity == rhs.angular_velocity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::twinny_msgs::JoystickStatus_<ContainerAllocator1> & lhs, const ::twinny_msgs::JoystickStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace twinny_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::twinny_msgs::JoystickStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::twinny_msgs::JoystickStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::twinny_msgs::JoystickStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::twinny_msgs::JoystickStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::twinny_msgs::JoystickStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::twinny_msgs::JoystickStatus_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::twinny_msgs::JoystickStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ac111940512caeb23d072699a1470e96";
  }

  static const char* value(const ::twinny_msgs::JoystickStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xac111940512caeb2ULL;
  static const uint64_t static_value2 = 0x3d072699a1470e96ULL;
};

template<class ContainerAllocator>
struct DataType< ::twinny_msgs::JoystickStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "twinny_msgs/JoystickStatus";
  }

  static const char* value(const ::twinny_msgs::JoystickStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::twinny_msgs::JoystickStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header \n"
"\n"
"string joy_driver_status         \n"
"\n"
"float32[] axes                   \n"
"\n"
"bool[] button    \n"
"\n"
"\n"
"bool joy_driver_enable_button    \n"
"bool reduce_velocity_button      \n"
"bool raise_velocity_button       \n"
"bool reset_velocity_button       \n"
"\n"
"float32 vel_scale              \n"
"\n"
"float32 linear_velocity          \n"
"float32 angular_velocity         \n"
"\n"
"\n"
"uint8 AXIS_LEFT_STICK_X = 0\n"
"uint8 AXIS_LEFT_STICK_Y = 1\n"
"uint8 AXIS_RIGHT_STICK_X = 2\n"
"uint8 AXIS_RIGHT_STICK_Y = 3\n"
"uint8 AXIS_DPAD_X = 4\n"
"uint8 AXIS_DPAD_Y = 5\n"
"uint8 AXIS_LEFT_TRIGGER = 6\n"
"uint8 AXIS_RIGHT_TRIGGER = 7\n"
"\n"
"\n"
"uint8 BUTTON_A = 0\n"
"uint8 BUTTON_B = 1\n"
"uint8 BUTTON_X = 2\n"
"uint8 BUTTON_Y = 3\n"
"uint8 BUTTON_LB = 4\n"
"uint8 BUTTON_RB = 5\n"
"uint8 BUTTON_BACK = 6\n"
"uint8 BUTTON_START = 7\n"
"uint8 BUTTON_GUIDE = 8\n"
"uint8 BUTTON_LEFT_STICK = 9\n"
"uint8 BUTTON_RIGHT_STICK = 10\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::twinny_msgs::JoystickStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::twinny_msgs::JoystickStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.joy_driver_status);
      stream.next(m.axes);
      stream.next(m.button);
      stream.next(m.joy_driver_enable_button);
      stream.next(m.reduce_velocity_button);
      stream.next(m.raise_velocity_button);
      stream.next(m.reset_velocity_button);
      stream.next(m.vel_scale);
      stream.next(m.linear_velocity);
      stream.next(m.angular_velocity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JoystickStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::twinny_msgs::JoystickStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::twinny_msgs::JoystickStatus_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "joy_driver_status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.joy_driver_status);
    s << indent << "axes[]" << std::endl;
    for (size_t i = 0; i < v.axes.size(); ++i)
    {
      s << indent << "  axes[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.axes[i]);
    }
    s << indent << "button[]" << std::endl;
    for (size_t i = 0; i < v.button.size(); ++i)
    {
      s << indent << "  button[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.button[i]);
    }
    s << indent << "joy_driver_enable_button: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.joy_driver_enable_button);
    s << indent << "reduce_velocity_button: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reduce_velocity_button);
    s << indent << "raise_velocity_button: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.raise_velocity_button);
    s << indent << "reset_velocity_button: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reset_velocity_button);
    s << indent << "vel_scale: ";
    Printer<float>::stream(s, indent + "  ", v.vel_scale);
    s << indent << "linear_velocity: ";
    Printer<float>::stream(s, indent + "  ", v.linear_velocity);
    s << indent << "angular_velocity: ";
    Printer<float>::stream(s, indent + "  ", v.angular_velocity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TWINNY_MSGS_MESSAGE_JOYSTICKSTATUS_H
