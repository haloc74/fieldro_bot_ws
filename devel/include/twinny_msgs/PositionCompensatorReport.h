// Generated by gencpp from file twinny_msgs/PositionCompensatorReport.msg
// DO NOT EDIT!


#ifndef TWINNY_MSGS_MESSAGE_POSITIONCOMPENSATORREPORT_H
#define TWINNY_MSGS_MESSAGE_POSITIONCOMPENSATORREPORT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace twinny_msgs
{
template <class ContainerAllocator>
struct PositionCompensatorReport_
{
  typedef PositionCompensatorReport_<ContainerAllocator> Type;

  PositionCompensatorReport_()
    : header()
    , command_id(0)
    , state(0)
    , last_event(0)
    , final_x_error(0.0)
    , final_y_error(0.0)
    , final_theta_error(0.0)  {
    }
  PositionCompensatorReport_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , command_id(0)
    , state(0)
    , last_event(0)
    , final_x_error(0.0)
    , final_y_error(0.0)
    , final_theta_error(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _command_id_type;
  _command_id_type command_id;

   typedef int32_t _state_type;
  _state_type state;

   typedef int32_t _last_event_type;
  _last_event_type last_event;

   typedef double _final_x_error_type;
  _final_x_error_type final_x_error;

   typedef double _final_y_error_type;
  _final_y_error_type final_y_error;

   typedef double _final_theta_error_type;
  _final_theta_error_type final_theta_error;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(READY)
  #undef READY
#endif
#if defined(_WIN32) && defined(RUNNING)
  #undef RUNNING
#endif
#if defined(_WIN32) && defined(ERROR)
  #undef ERROR
#endif
#if defined(_WIN32) && defined(NO_EVENT)
  #undef NO_EVENT
#endif
#if defined(_WIN32) && defined(GET_START)
  #undef GET_START
#endif
#if defined(_WIN32) && defined(GET_STOP)
  #undef GET_STOP
#endif
#if defined(_WIN32) && defined(FIND_STATION)
  #undef FIND_STATION
#endif
#if defined(_WIN32) && defined(FINISHED)
  #undef FINISHED
#endif
#if defined(_WIN32) && defined(BUMPER_ACTIVATED)
  #undef BUMPER_ACTIVATED
#endif
#if defined(_WIN32) && defined(BUMPER_RELEASED)
  #undef BUMPER_RELEASED
#endif
#if defined(_WIN32) && defined(RECOVERY_WORKING)
  #undef RECOVERY_WORKING
#endif
#if defined(_WIN32) && defined(FAIL_DUETO_NO_STATION)
  #undef FAIL_DUETO_NO_STATION
#endif
#if defined(_WIN32) && defined(FAIL_DUETO_OVER_RECOVERY)
  #undef FAIL_DUETO_OVER_RECOVERY
#endif
#if defined(_WIN32) && defined(FAIL_DUETO_LENGTH_ERROR)
  #undef FAIL_DUETO_LENGTH_ERROR
#endif
#if defined(_WIN32) && defined(FAIL_DUETO_ANGLE_ERROR)
  #undef FAIL_DUETO_ANGLE_ERROR
#endif
#if defined(_WIN32) && defined(ERROR_OCCUR)
  #undef ERROR_OCCUR
#endif

  enum {
    READY = 1,
    RUNNING = 2,
    ERROR = -99,
    NO_EVENT = 0,
    GET_START = 1,
    GET_STOP = 2,
    FIND_STATION = 11,
    FINISHED = 21,
    BUMPER_ACTIVATED = 31,
    BUMPER_RELEASED = 32,
    RECOVERY_WORKING = 41,
    FAIL_DUETO_NO_STATION = -1,
    FAIL_DUETO_OVER_RECOVERY = -2,
    FAIL_DUETO_LENGTH_ERROR = -3,
    FAIL_DUETO_ANGLE_ERROR = -4,
    ERROR_OCCUR = -99,
  };


  typedef boost::shared_ptr< ::twinny_msgs::PositionCompensatorReport_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::twinny_msgs::PositionCompensatorReport_<ContainerAllocator> const> ConstPtr;

}; // struct PositionCompensatorReport_

typedef ::twinny_msgs::PositionCompensatorReport_<std::allocator<void> > PositionCompensatorReport;

typedef boost::shared_ptr< ::twinny_msgs::PositionCompensatorReport > PositionCompensatorReportPtr;
typedef boost::shared_ptr< ::twinny_msgs::PositionCompensatorReport const> PositionCompensatorReportConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::twinny_msgs::PositionCompensatorReport_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::twinny_msgs::PositionCompensatorReport_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::twinny_msgs::PositionCompensatorReport_<ContainerAllocator1> & lhs, const ::twinny_msgs::PositionCompensatorReport_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.command_id == rhs.command_id &&
    lhs.state == rhs.state &&
    lhs.last_event == rhs.last_event &&
    lhs.final_x_error == rhs.final_x_error &&
    lhs.final_y_error == rhs.final_y_error &&
    lhs.final_theta_error == rhs.final_theta_error;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::twinny_msgs::PositionCompensatorReport_<ContainerAllocator1> & lhs, const ::twinny_msgs::PositionCompensatorReport_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace twinny_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::twinny_msgs::PositionCompensatorReport_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::twinny_msgs::PositionCompensatorReport_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::twinny_msgs::PositionCompensatorReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::twinny_msgs::PositionCompensatorReport_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::twinny_msgs::PositionCompensatorReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::twinny_msgs::PositionCompensatorReport_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::twinny_msgs::PositionCompensatorReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ce394262ae46a810715d34454a160030";
  }

  static const char* value(const ::twinny_msgs::PositionCompensatorReport_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xce394262ae46a810ULL;
  static const uint64_t static_value2 = 0x715d34454a160030ULL;
};

template<class ContainerAllocator>
struct DataType< ::twinny_msgs::PositionCompensatorReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "twinny_msgs/PositionCompensatorReport";
  }

  static const char* value(const ::twinny_msgs::PositionCompensatorReport_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::twinny_msgs::PositionCompensatorReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"int32 command_id\n"
"\n"
"int32 READY = 1\n"
"int32 RUNNING = 2\n"
"int32 ERROR = -99\n"
"int32 state\n"
"\n"
"int32 NO_EVENT = 0\n"
"int32 GET_START = 1\n"
"int32 GET_STOP = 2\n"
"\n"
"int32 FIND_STATION = 11\n"
"int32 FINISHED = 21\n"
"\n"
"int32 BUMPER_ACTIVATED = 31\n"
"int32 BUMPER_RELEASED = 32\n"
"\n"
"int32 RECOVERY_WORKING = 41\n"
"\n"
"int32 FAIL_DUETO_NO_STATION = -1\n"
"int32 FAIL_DUETO_OVER_RECOVERY = -2\n"
"int32 FAIL_DUETO_LENGTH_ERROR = -3\n"
"int32 FAIL_DUETO_ANGLE_ERROR = -4\n"
"\n"
"int32 ERROR_OCCUR = -99\n"
"\n"
"int32 last_event\n"
"\n"
"float64 final_x_error\n"
"float64 final_y_error\n"
"float64 final_theta_error\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::twinny_msgs::PositionCompensatorReport_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::twinny_msgs::PositionCompensatorReport_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.command_id);
      stream.next(m.state);
      stream.next(m.last_event);
      stream.next(m.final_x_error);
      stream.next(m.final_y_error);
      stream.next(m.final_theta_error);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PositionCompensatorReport_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::twinny_msgs::PositionCompensatorReport_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::twinny_msgs::PositionCompensatorReport_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "command_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.command_id);
    s << indent << "state: ";
    Printer<int32_t>::stream(s, indent + "  ", v.state);
    s << indent << "last_event: ";
    Printer<int32_t>::stream(s, indent + "  ", v.last_event);
    s << indent << "final_x_error: ";
    Printer<double>::stream(s, indent + "  ", v.final_x_error);
    s << indent << "final_y_error: ";
    Printer<double>::stream(s, indent + "  ", v.final_y_error);
    s << indent << "final_theta_error: ";
    Printer<double>::stream(s, indent + "  ", v.final_theta_error);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TWINNY_MSGS_MESSAGE_POSITIONCOMPENSATORREPORT_H
