// Generated by gencpp from file twinny_msgs/PositionCompensatorCommandResponse.msg
// DO NOT EDIT!


#ifndef TWINNY_MSGS_MESSAGE_POSITIONCOMPENSATORCOMMANDRESPONSE_H
#define TWINNY_MSGS_MESSAGE_POSITIONCOMPENSATORCOMMANDRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace twinny_msgs
{
template <class ContainerAllocator>
struct PositionCompensatorCommandResponse_
{
  typedef PositionCompensatorCommandResponse_<ContainerAllocator> Type;

  PositionCompensatorCommandResponse_()
    : result(0)  {
    }
  PositionCompensatorCommandResponse_(const ContainerAllocator& _alloc)
    : result(0)  {
  (void)_alloc;
    }



   typedef int32_t _result_type;
  _result_type result;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(SUCCESS)
  #undef SUCCESS
#endif
#if defined(_WIN32) && defined(NOT_READY)
  #undef NOT_READY
#endif
#if defined(_WIN32) && defined(WRONG_COMMAND)
  #undef WRONG_COMMAND
#endif

  enum {
    SUCCESS = 1,
    NOT_READY = -1,
    WRONG_COMMAND = -99,
  };


  typedef boost::shared_ptr< ::twinny_msgs::PositionCompensatorCommandResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::twinny_msgs::PositionCompensatorCommandResponse_<ContainerAllocator> const> ConstPtr;

}; // struct PositionCompensatorCommandResponse_

typedef ::twinny_msgs::PositionCompensatorCommandResponse_<std::allocator<void> > PositionCompensatorCommandResponse;

typedef boost::shared_ptr< ::twinny_msgs::PositionCompensatorCommandResponse > PositionCompensatorCommandResponsePtr;
typedef boost::shared_ptr< ::twinny_msgs::PositionCompensatorCommandResponse const> PositionCompensatorCommandResponseConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::twinny_msgs::PositionCompensatorCommandResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::twinny_msgs::PositionCompensatorCommandResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::twinny_msgs::PositionCompensatorCommandResponse_<ContainerAllocator1> & lhs, const ::twinny_msgs::PositionCompensatorCommandResponse_<ContainerAllocator2> & rhs)
{
  return lhs.result == rhs.result;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::twinny_msgs::PositionCompensatorCommandResponse_<ContainerAllocator1> & lhs, const ::twinny_msgs::PositionCompensatorCommandResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace twinny_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::twinny_msgs::PositionCompensatorCommandResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::twinny_msgs::PositionCompensatorCommandResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::twinny_msgs::PositionCompensatorCommandResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::twinny_msgs::PositionCompensatorCommandResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::twinny_msgs::PositionCompensatorCommandResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::twinny_msgs::PositionCompensatorCommandResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::twinny_msgs::PositionCompensatorCommandResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "40e5817d267ae22e3d2f2cb90f71a2f5";
  }

  static const char* value(const ::twinny_msgs::PositionCompensatorCommandResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x40e5817d267ae22eULL;
  static const uint64_t static_value2 = 0x3d2f2cb90f71a2f5ULL;
};

template<class ContainerAllocator>
struct DataType< ::twinny_msgs::PositionCompensatorCommandResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "twinny_msgs/PositionCompensatorCommandResponse";
  }

  static const char* value(const ::twinny_msgs::PositionCompensatorCommandResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::twinny_msgs::PositionCompensatorCommandResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 SUCCESS = 1\n"
"int32 NOT_READY = -1\n"
"int32 WRONG_COMMAND = -99\n"
"\n"
"int32 result\n"
"\n"
;
  }

  static const char* value(const ::twinny_msgs::PositionCompensatorCommandResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::twinny_msgs::PositionCompensatorCommandResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.result);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PositionCompensatorCommandResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::twinny_msgs::PositionCompensatorCommandResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::twinny_msgs::PositionCompensatorCommandResponse_<ContainerAllocator>& v)
  {
    s << indent << "result: ";
    Printer<int32_t>::stream(s, indent + "  ", v.result);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TWINNY_MSGS_MESSAGE_POSITIONCOMPENSATORCOMMANDRESPONSE_H
