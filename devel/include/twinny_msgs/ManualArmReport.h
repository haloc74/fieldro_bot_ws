// Generated by gencpp from file twinny_msgs/ManualArmReport.msg
// DO NOT EDIT!


#ifndef TWINNY_MSGS_MESSAGE_MANUALARMREPORT_H
#define TWINNY_MSGS_MESSAGE_MANUALARMREPORT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace twinny_msgs
{
template <class ContainerAllocator>
struct ManualArmReport_
{
  typedef ManualArmReport_<ContainerAllocator> Type;

  ManualArmReport_()
    : header()
    , hand_grip_forward_backward_report(0)
    , cylinder_forward_backward_report(0)
    , battery_cylinder_forward_backward_report(0)
    , magazine01_lock_unlock_report(0)
    , magazine02_lock_unlock_report(0)
    , cylinder_up_down_report(0)  {
    }
  ManualArmReport_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , hand_grip_forward_backward_report(0)
    , cylinder_forward_backward_report(0)
    , battery_cylinder_forward_backward_report(0)
    , magazine01_lock_unlock_report(0)
    , magazine02_lock_unlock_report(0)
    , cylinder_up_down_report(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _hand_grip_forward_backward_report_type;
  _hand_grip_forward_backward_report_type hand_grip_forward_backward_report;

   typedef uint8_t _cylinder_forward_backward_report_type;
  _cylinder_forward_backward_report_type cylinder_forward_backward_report;

   typedef uint8_t _battery_cylinder_forward_backward_report_type;
  _battery_cylinder_forward_backward_report_type battery_cylinder_forward_backward_report;

   typedef uint8_t _magazine01_lock_unlock_report_type;
  _magazine01_lock_unlock_report_type magazine01_lock_unlock_report;

   typedef uint8_t _magazine02_lock_unlock_report_type;
  _magazine02_lock_unlock_report_type magazine02_lock_unlock_report;

   typedef uint8_t _cylinder_up_down_report_type;
  _cylinder_up_down_report_type cylinder_up_down_report;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(NOT_COMPLETE)
  #undef NOT_COMPLETE
#endif
#if defined(_WIN32) && defined(FORWARD_COMPLETE)
  #undef FORWARD_COMPLETE
#endif
#if defined(_WIN32) && defined(BACKWARD_COMPLETE)
  #undef BACKWARD_COMPLETE
#endif
#if defined(_WIN32) && defined(LOCK_COMPLETE)
  #undef LOCK_COMPLETE
#endif
#if defined(_WIN32) && defined(UNLOCK_COMPLETE)
  #undef UNLOCK_COMPLETE
#endif
#if defined(_WIN32) && defined(UP_COMPLETE)
  #undef UP_COMPLETE
#endif
#if defined(_WIN32) && defined(DOWN_COMPLETE)
  #undef DOWN_COMPLETE
#endif

  enum {
    NOT_COMPLETE = 0u,
    FORWARD_COMPLETE = 1u,
    BACKWARD_COMPLETE = 2u,
    LOCK_COMPLETE = 1u,
    UNLOCK_COMPLETE = 2u,
    UP_COMPLETE = 1u,
    DOWN_COMPLETE = 2u,
  };


  typedef boost::shared_ptr< ::twinny_msgs::ManualArmReport_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::twinny_msgs::ManualArmReport_<ContainerAllocator> const> ConstPtr;

}; // struct ManualArmReport_

typedef ::twinny_msgs::ManualArmReport_<std::allocator<void> > ManualArmReport;

typedef boost::shared_ptr< ::twinny_msgs::ManualArmReport > ManualArmReportPtr;
typedef boost::shared_ptr< ::twinny_msgs::ManualArmReport const> ManualArmReportConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::twinny_msgs::ManualArmReport_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::twinny_msgs::ManualArmReport_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::twinny_msgs::ManualArmReport_<ContainerAllocator1> & lhs, const ::twinny_msgs::ManualArmReport_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.hand_grip_forward_backward_report == rhs.hand_grip_forward_backward_report &&
    lhs.cylinder_forward_backward_report == rhs.cylinder_forward_backward_report &&
    lhs.battery_cylinder_forward_backward_report == rhs.battery_cylinder_forward_backward_report &&
    lhs.magazine01_lock_unlock_report == rhs.magazine01_lock_unlock_report &&
    lhs.magazine02_lock_unlock_report == rhs.magazine02_lock_unlock_report &&
    lhs.cylinder_up_down_report == rhs.cylinder_up_down_report;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::twinny_msgs::ManualArmReport_<ContainerAllocator1> & lhs, const ::twinny_msgs::ManualArmReport_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace twinny_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::twinny_msgs::ManualArmReport_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::twinny_msgs::ManualArmReport_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::twinny_msgs::ManualArmReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::twinny_msgs::ManualArmReport_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::twinny_msgs::ManualArmReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::twinny_msgs::ManualArmReport_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::twinny_msgs::ManualArmReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "10bf00d36649a07410532bfaed58534a";
  }

  static const char* value(const ::twinny_msgs::ManualArmReport_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x10bf00d36649a074ULL;
  static const uint64_t static_value2 = 0x10532bfaed58534aULL;
};

template<class ContainerAllocator>
struct DataType< ::twinny_msgs::ManualArmReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "twinny_msgs/ManualArmReport";
  }

  static const char* value(const ::twinny_msgs::ManualArmReport_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::twinny_msgs::ManualArmReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"uint8 NOT_COMPLETE = 0\n"
"\n"
"uint8 FORWARD_COMPLETE = 1\n"
"uint8 BACKWARD_COMPLETE = 2\n"
"\n"
"uint8 hand_grip_forward_backward_report\n"
"uint8 cylinder_forward_backward_report\n"
"uint8 battery_cylinder_forward_backward_report\n"
"\n"
"uint8 LOCK_COMPLETE = 1\n"
"uint8 UNLOCK_COMPLETE = 2\n"
"\n"
"uint8 magazine01_lock_unlock_report\n"
"uint8 magazine02_lock_unlock_report\n"
"\n"
"uint8 UP_COMPLETE = 1\n"
"uint8 DOWN_COMPLETE = 2\n"
"\n"
"uint8 cylinder_up_down_report\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::twinny_msgs::ManualArmReport_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::twinny_msgs::ManualArmReport_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.hand_grip_forward_backward_report);
      stream.next(m.cylinder_forward_backward_report);
      stream.next(m.battery_cylinder_forward_backward_report);
      stream.next(m.magazine01_lock_unlock_report);
      stream.next(m.magazine02_lock_unlock_report);
      stream.next(m.cylinder_up_down_report);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ManualArmReport_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::twinny_msgs::ManualArmReport_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::twinny_msgs::ManualArmReport_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "hand_grip_forward_backward_report: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.hand_grip_forward_backward_report);
    s << indent << "cylinder_forward_backward_report: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cylinder_forward_backward_report);
    s << indent << "battery_cylinder_forward_backward_report: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.battery_cylinder_forward_backward_report);
    s << indent << "magazine01_lock_unlock_report: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.magazine01_lock_unlock_report);
    s << indent << "magazine02_lock_unlock_report: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.magazine02_lock_unlock_report);
    s << indent << "cylinder_up_down_report: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cylinder_up_down_report);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TWINNY_MSGS_MESSAGE_MANUALARMREPORT_H
