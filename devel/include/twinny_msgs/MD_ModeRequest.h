// Generated by gencpp from file twinny_msgs/MD_ModeRequest.msg
// DO NOT EDIT!


#ifndef TWINNY_MSGS_MESSAGE_MD_MODEREQUEST_H
#define TWINNY_MSGS_MESSAGE_MD_MODEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace twinny_msgs
{
template <class ContainerAllocator>
struct MD_ModeRequest_
{
  typedef MD_ModeRequest_<ContainerAllocator> Type;

  MD_ModeRequest_()
    : input_mode(0)
    , argument(0)  {
    }
  MD_ModeRequest_(const ContainerAllocator& _alloc)
    : input_mode(0)
    , argument(0)  {
  (void)_alloc;
    }



   typedef uint8_t _input_mode_type;
  _input_mode_type input_mode;

   typedef uint8_t _argument_type;
  _argument_type argument;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(NORMAL_MODE)
  #undef NORMAL_MODE
#endif
#if defined(_WIN32) && defined(TORQUE_FREE)
  #undef TORQUE_FREE
#endif
#if defined(_WIN32) && defined(BRAKING)
  #undef BRAKING
#endif
#if defined(_WIN32) && defined(ERROR)
  #undef ERROR
#endif
#if defined(_WIN32) && defined(SETTING)
  #undef SETTING
#endif

  enum {
    NORMAL_MODE = 0u,
    TORQUE_FREE = 1u,
    BRAKING = 2u,
    ERROR = 3u,
    SETTING = 4u,
  };


  typedef boost::shared_ptr< ::twinny_msgs::MD_ModeRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::twinny_msgs::MD_ModeRequest_<ContainerAllocator> const> ConstPtr;

}; // struct MD_ModeRequest_

typedef ::twinny_msgs::MD_ModeRequest_<std::allocator<void> > MD_ModeRequest;

typedef boost::shared_ptr< ::twinny_msgs::MD_ModeRequest > MD_ModeRequestPtr;
typedef boost::shared_ptr< ::twinny_msgs::MD_ModeRequest const> MD_ModeRequestConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::twinny_msgs::MD_ModeRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::twinny_msgs::MD_ModeRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::twinny_msgs::MD_ModeRequest_<ContainerAllocator1> & lhs, const ::twinny_msgs::MD_ModeRequest_<ContainerAllocator2> & rhs)
{
  return lhs.input_mode == rhs.input_mode &&
    lhs.argument == rhs.argument;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::twinny_msgs::MD_ModeRequest_<ContainerAllocator1> & lhs, const ::twinny_msgs::MD_ModeRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace twinny_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::twinny_msgs::MD_ModeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::twinny_msgs::MD_ModeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::twinny_msgs::MD_ModeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::twinny_msgs::MD_ModeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::twinny_msgs::MD_ModeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::twinny_msgs::MD_ModeRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::twinny_msgs::MD_ModeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e5daa3d274eda4fc00af770984f80415";
  }

  static const char* value(const ::twinny_msgs::MD_ModeRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe5daa3d274eda4fcULL;
  static const uint64_t static_value2 = 0x00af770984f80415ULL;
};

template<class ContainerAllocator>
struct DataType< ::twinny_msgs::MD_ModeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "twinny_msgs/MD_ModeRequest";
  }

  static const char* value(const ::twinny_msgs::MD_ModeRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::twinny_msgs::MD_ModeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 NORMAL_MODE=0\n"
"uint8 TORQUE_FREE=1\n"
"uint8 BRAKING=2\n"
"uint8 ERROR=3\n"
"uint8 SETTING=4\n"
"\n"
"uint8 input_mode\n"
"uint8 argument\n"
;
  }

  static const char* value(const ::twinny_msgs::MD_ModeRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::twinny_msgs::MD_ModeRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.input_mode);
      stream.next(m.argument);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MD_ModeRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::twinny_msgs::MD_ModeRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::twinny_msgs::MD_ModeRequest_<ContainerAllocator>& v)
  {
    s << indent << "input_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.input_mode);
    s << indent << "argument: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.argument);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TWINNY_MSGS_MESSAGE_MD_MODEREQUEST_H
