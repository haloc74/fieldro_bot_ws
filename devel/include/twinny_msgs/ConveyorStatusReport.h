// Generated by gencpp from file twinny_msgs/ConveyorStatusReport.msg
// DO NOT EDIT!


#ifndef TWINNY_MSGS_MESSAGE_CONVEYORSTATUSREPORT_H
#define TWINNY_MSGS_MESSAGE_CONVEYORSTATUSREPORT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace twinny_msgs
{
template <class ContainerAllocator>
struct ConveyorStatusReport_
{
  typedef ConveyorStatusReport_<ContainerAllocator> Type;

  ConveyorStatusReport_()
    : header()
    , type()
    , conveyor1_status(0)
    , conveyor2_status(0)
    , is_loaded_conveyor1_1(false)
    , is_loaded_conveyor1_2(false)
    , is_loaded_conveyor2_1(false)
    , is_loaded_conveyor2_2(false)
    , is_alarm_conveyor1(false)
    , is_alarm_conveyor2(false)
    , door_open_status(false)
    , fall_prevention_device_status(false)  {
    }
  ConveyorStatusReport_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , type(_alloc)
    , conveyor1_status(0)
    , conveyor2_status(0)
    , is_loaded_conveyor1_1(false)
    , is_loaded_conveyor1_2(false)
    , is_loaded_conveyor2_1(false)
    , is_loaded_conveyor2_2(false)
    , is_alarm_conveyor1(false)
    , is_alarm_conveyor2(false)
    , door_open_status(false)
    , fall_prevention_device_status(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _type_type;
  _type_type type;

   typedef int8_t _conveyor1_status_type;
  _conveyor1_status_type conveyor1_status;

   typedef int8_t _conveyor2_status_type;
  _conveyor2_status_type conveyor2_status;

   typedef uint8_t _is_loaded_conveyor1_1_type;
  _is_loaded_conveyor1_1_type is_loaded_conveyor1_1;

   typedef uint8_t _is_loaded_conveyor1_2_type;
  _is_loaded_conveyor1_2_type is_loaded_conveyor1_2;

   typedef uint8_t _is_loaded_conveyor2_1_type;
  _is_loaded_conveyor2_1_type is_loaded_conveyor2_1;

   typedef uint8_t _is_loaded_conveyor2_2_type;
  _is_loaded_conveyor2_2_type is_loaded_conveyor2_2;

   typedef uint8_t _is_alarm_conveyor1_type;
  _is_alarm_conveyor1_type is_alarm_conveyor1;

   typedef uint8_t _is_alarm_conveyor2_type;
  _is_alarm_conveyor2_type is_alarm_conveyor2;

   typedef uint8_t _door_open_status_type;
  _door_open_status_type door_open_status;

   typedef uint8_t _fall_prevention_device_status_type;
  _fall_prevention_device_status_type fall_prevention_device_status;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(CONVEYOR_STATUS_REVERSE)
  #undef CONVEYOR_STATUS_REVERSE
#endif
#if defined(_WIN32) && defined(CONVEYOR_STATUS_STOP)
  #undef CONVEYOR_STATUS_STOP
#endif
#if defined(_WIN32) && defined(CONVEYOR_STATUS_FORWARD)
  #undef CONVEYOR_STATUS_FORWARD
#endif

  enum {
    CONVEYOR_STATUS_REVERSE = -1,
    CONVEYOR_STATUS_STOP = 0,
    CONVEYOR_STATUS_FORWARD = 1,
  };


  typedef boost::shared_ptr< ::twinny_msgs::ConveyorStatusReport_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::twinny_msgs::ConveyorStatusReport_<ContainerAllocator> const> ConstPtr;

}; // struct ConveyorStatusReport_

typedef ::twinny_msgs::ConveyorStatusReport_<std::allocator<void> > ConveyorStatusReport;

typedef boost::shared_ptr< ::twinny_msgs::ConveyorStatusReport > ConveyorStatusReportPtr;
typedef boost::shared_ptr< ::twinny_msgs::ConveyorStatusReport const> ConveyorStatusReportConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::twinny_msgs::ConveyorStatusReport_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::twinny_msgs::ConveyorStatusReport_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::twinny_msgs::ConveyorStatusReport_<ContainerAllocator1> & lhs, const ::twinny_msgs::ConveyorStatusReport_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.type == rhs.type &&
    lhs.conveyor1_status == rhs.conveyor1_status &&
    lhs.conveyor2_status == rhs.conveyor2_status &&
    lhs.is_loaded_conveyor1_1 == rhs.is_loaded_conveyor1_1 &&
    lhs.is_loaded_conveyor1_2 == rhs.is_loaded_conveyor1_2 &&
    lhs.is_loaded_conveyor2_1 == rhs.is_loaded_conveyor2_1 &&
    lhs.is_loaded_conveyor2_2 == rhs.is_loaded_conveyor2_2 &&
    lhs.is_alarm_conveyor1 == rhs.is_alarm_conveyor1 &&
    lhs.is_alarm_conveyor2 == rhs.is_alarm_conveyor2 &&
    lhs.door_open_status == rhs.door_open_status &&
    lhs.fall_prevention_device_status == rhs.fall_prevention_device_status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::twinny_msgs::ConveyorStatusReport_<ContainerAllocator1> & lhs, const ::twinny_msgs::ConveyorStatusReport_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace twinny_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::twinny_msgs::ConveyorStatusReport_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::twinny_msgs::ConveyorStatusReport_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::twinny_msgs::ConveyorStatusReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::twinny_msgs::ConveyorStatusReport_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::twinny_msgs::ConveyorStatusReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::twinny_msgs::ConveyorStatusReport_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::twinny_msgs::ConveyorStatusReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "edac1cb1f807055427a86099e42b8c69";
  }

  static const char* value(const ::twinny_msgs::ConveyorStatusReport_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xedac1cb1f8070554ULL;
  static const uint64_t static_value2 = 0x27a86099e42b8c69ULL;
};

template<class ContainerAllocator>
struct DataType< ::twinny_msgs::ConveyorStatusReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "twinny_msgs/ConveyorStatusReport";
  }

  static const char* value(const ::twinny_msgs::ConveyorStatusReport_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::twinny_msgs::ConveyorStatusReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"string type\n"
"\n"
"int8 CONVEYOR_STATUS_REVERSE = -1\n"
"int8 CONVEYOR_STATUS_STOP = 0\n"
"int8 CONVEYOR_STATUS_FORWARD = 1\n"
"\n"
"int8 conveyor1_status\n"
"int8 conveyor2_status\n"
"\n"
"bool is_loaded_conveyor1_1\n"
"bool is_loaded_conveyor1_2\n"
"bool is_loaded_conveyor2_1\n"
"bool is_loaded_conveyor2_2\n"
"\n"
"bool is_alarm_conveyor1\n"
"bool is_alarm_conveyor2\n"
"\n"
"bool door_open_status\n"
"\n"
"bool fall_prevention_device_status\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::twinny_msgs::ConveyorStatusReport_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::twinny_msgs::ConveyorStatusReport_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.type);
      stream.next(m.conveyor1_status);
      stream.next(m.conveyor2_status);
      stream.next(m.is_loaded_conveyor1_1);
      stream.next(m.is_loaded_conveyor1_2);
      stream.next(m.is_loaded_conveyor2_1);
      stream.next(m.is_loaded_conveyor2_2);
      stream.next(m.is_alarm_conveyor1);
      stream.next(m.is_alarm_conveyor2);
      stream.next(m.door_open_status);
      stream.next(m.fall_prevention_device_status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ConveyorStatusReport_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::twinny_msgs::ConveyorStatusReport_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::twinny_msgs::ConveyorStatusReport_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.type);
    s << indent << "conveyor1_status: ";
    Printer<int8_t>::stream(s, indent + "  ", v.conveyor1_status);
    s << indent << "conveyor2_status: ";
    Printer<int8_t>::stream(s, indent + "  ", v.conveyor2_status);
    s << indent << "is_loaded_conveyor1_1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_loaded_conveyor1_1);
    s << indent << "is_loaded_conveyor1_2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_loaded_conveyor1_2);
    s << indent << "is_loaded_conveyor2_1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_loaded_conveyor2_1);
    s << indent << "is_loaded_conveyor2_2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_loaded_conveyor2_2);
    s << indent << "is_alarm_conveyor1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_alarm_conveyor1);
    s << indent << "is_alarm_conveyor2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_alarm_conveyor2);
    s << indent << "door_open_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.door_open_status);
    s << indent << "fall_prevention_device_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fall_prevention_device_status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TWINNY_MSGS_MESSAGE_CONVEYORSTATUSREPORT_H
