// Generated by gencpp from file twinny_msgs/CargoBoxReport.msg
// DO NOT EDIT!


#ifndef TWINNY_MSGS_MESSAGE_CARGOBOXREPORT_H
#define TWINNY_MSGS_MESSAGE_CARGOBOXREPORT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace twinny_msgs
{
template <class ContainerAllocator>
struct CargoBoxReport_
{
  typedef CargoBoxReport_<ContainerAllocator> Type;

  CargoBoxReport_()
    : header()
    , type()
    , cargobox_id()
    , door_lock_state()
    , door_open_state()
    , door_sensor_state()
    , lamp_state()
    , led_color()
    , led_state()
    , weight()
    , x_coordinate()
    , y_coordinate()  {
    }
  CargoBoxReport_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , type(_alloc)
    , cargobox_id(_alloc)
    , door_lock_state(_alloc)
    , door_open_state(_alloc)
    , door_sensor_state(_alloc)
    , lamp_state(_alloc)
    , led_color(_alloc)
    , led_state(_alloc)
    , weight(_alloc)
    , x_coordinate(_alloc)
    , y_coordinate(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _type_type;
  _type_type type;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _cargobox_id_type;
  _cargobox_id_type cargobox_id;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _door_lock_state_type;
  _door_lock_state_type door_lock_state;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _door_open_state_type;
  _door_open_state_type door_open_state;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _door_sensor_state_type;
  _door_sensor_state_type door_sensor_state;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _lamp_state_type;
  _lamp_state_type lamp_state;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _led_color_type;
  _led_color_type led_color;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _led_state_type;
  _led_state_type led_state;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _weight_type;
  _weight_type weight;

   typedef std::vector<int8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int8_t>> _x_coordinate_type;
  _x_coordinate_type x_coordinate;

   typedef std::vector<int8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int8_t>> _y_coordinate_type;
  _y_coordinate_type y_coordinate;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(DOOR_LOCK_STATE_UNLOCKED)
  #undef DOOR_LOCK_STATE_UNLOCKED
#endif
#if defined(_WIN32) && defined(DOOR_LOCK_STATE_LOCKED)
  #undef DOOR_LOCK_STATE_LOCKED
#endif
#if defined(_WIN32) && defined(DOOR_LOCK_STATE_ERROR)
  #undef DOOR_LOCK_STATE_ERROR
#endif

  enum {
    DOOR_LOCK_STATE_UNLOCKED = 0,
    DOOR_LOCK_STATE_LOCKED = 1,
    DOOR_LOCK_STATE_ERROR = -1,
  };


  typedef boost::shared_ptr< ::twinny_msgs::CargoBoxReport_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::twinny_msgs::CargoBoxReport_<ContainerAllocator> const> ConstPtr;

}; // struct CargoBoxReport_

typedef ::twinny_msgs::CargoBoxReport_<std::allocator<void> > CargoBoxReport;

typedef boost::shared_ptr< ::twinny_msgs::CargoBoxReport > CargoBoxReportPtr;
typedef boost::shared_ptr< ::twinny_msgs::CargoBoxReport const> CargoBoxReportConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::twinny_msgs::CargoBoxReport_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::twinny_msgs::CargoBoxReport_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::twinny_msgs::CargoBoxReport_<ContainerAllocator1> & lhs, const ::twinny_msgs::CargoBoxReport_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.type == rhs.type &&
    lhs.cargobox_id == rhs.cargobox_id &&
    lhs.door_lock_state == rhs.door_lock_state &&
    lhs.door_open_state == rhs.door_open_state &&
    lhs.door_sensor_state == rhs.door_sensor_state &&
    lhs.lamp_state == rhs.lamp_state &&
    lhs.led_color == rhs.led_color &&
    lhs.led_state == rhs.led_state &&
    lhs.weight == rhs.weight &&
    lhs.x_coordinate == rhs.x_coordinate &&
    lhs.y_coordinate == rhs.y_coordinate;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::twinny_msgs::CargoBoxReport_<ContainerAllocator1> & lhs, const ::twinny_msgs::CargoBoxReport_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace twinny_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::twinny_msgs::CargoBoxReport_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::twinny_msgs::CargoBoxReport_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::twinny_msgs::CargoBoxReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::twinny_msgs::CargoBoxReport_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::twinny_msgs::CargoBoxReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::twinny_msgs::CargoBoxReport_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::twinny_msgs::CargoBoxReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "691cdd8fb0f467254faafb3ddd2b40aa";
  }

  static const char* value(const ::twinny_msgs::CargoBoxReport_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x691cdd8fb0f46725ULL;
  static const uint64_t static_value2 = 0x4faafb3ddd2b40aaULL;
};

template<class ContainerAllocator>
struct DataType< ::twinny_msgs::CargoBoxReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "twinny_msgs/CargoBoxReport";
  }

  static const char* value(const ::twinny_msgs::CargoBoxReport_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::twinny_msgs::CargoBoxReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"string type\n"
"\n"
"int32 DOOR_LOCK_STATE_UNLOCKED=0\n"
"int32 DOOR_LOCK_STATE_LOCKED=1\n"
"int32 DOOR_LOCK_STATE_ERROR=-1\n"
"\n"
"uint8[] cargobox_id                                \n"
"\n"
"int32[] door_lock_state             \n"
"\n"
"bool[] door_open_state              \n"
"\n"
"bool[] door_sensor_state                             \n"
"\n"
"bool[] lamp_state                   \n"
"\n"
"string led_color\n"
"string led_state\n"
"\n"
"float32[] weight    \n"
"\n"
"int8[] x_coordinate                \n"
"\n"
"int8[] y_coordinate                  \n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::twinny_msgs::CargoBoxReport_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::twinny_msgs::CargoBoxReport_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.type);
      stream.next(m.cargobox_id);
      stream.next(m.door_lock_state);
      stream.next(m.door_open_state);
      stream.next(m.door_sensor_state);
      stream.next(m.lamp_state);
      stream.next(m.led_color);
      stream.next(m.led_state);
      stream.next(m.weight);
      stream.next(m.x_coordinate);
      stream.next(m.y_coordinate);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CargoBoxReport_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::twinny_msgs::CargoBoxReport_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::twinny_msgs::CargoBoxReport_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.type);
    s << indent << "cargobox_id[]" << std::endl;
    for (size_t i = 0; i < v.cargobox_id.size(); ++i)
    {
      s << indent << "  cargobox_id[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.cargobox_id[i]);
    }
    s << indent << "door_lock_state[]" << std::endl;
    for (size_t i = 0; i < v.door_lock_state.size(); ++i)
    {
      s << indent << "  door_lock_state[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.door_lock_state[i]);
    }
    s << indent << "door_open_state[]" << std::endl;
    for (size_t i = 0; i < v.door_open_state.size(); ++i)
    {
      s << indent << "  door_open_state[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.door_open_state[i]);
    }
    s << indent << "door_sensor_state[]" << std::endl;
    for (size_t i = 0; i < v.door_sensor_state.size(); ++i)
    {
      s << indent << "  door_sensor_state[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.door_sensor_state[i]);
    }
    s << indent << "lamp_state[]" << std::endl;
    for (size_t i = 0; i < v.lamp_state.size(); ++i)
    {
      s << indent << "  lamp_state[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.lamp_state[i]);
    }
    s << indent << "led_color: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.led_color);
    s << indent << "led_state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.led_state);
    s << indent << "weight[]" << std::endl;
    for (size_t i = 0; i < v.weight.size(); ++i)
    {
      s << indent << "  weight[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.weight[i]);
    }
    s << indent << "x_coordinate[]" << std::endl;
    for (size_t i = 0; i < v.x_coordinate.size(); ++i)
    {
      s << indent << "  x_coordinate[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.x_coordinate[i]);
    }
    s << indent << "y_coordinate[]" << std::endl;
    for (size_t i = 0; i < v.y_coordinate.size(); ++i)
    {
      s << indent << "  y_coordinate[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.y_coordinate[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TWINNY_MSGS_MESSAGE_CARGOBOXREPORT_H
