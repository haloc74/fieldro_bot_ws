// Generated by gencpp from file twinny_msgs/PlcAdditionalCommand.msg
// DO NOT EDIT!


#ifndef TWINNY_MSGS_MESSAGE_PLCADDITIONALCOMMAND_H
#define TWINNY_MSGS_MESSAGE_PLCADDITIONALCOMMAND_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace twinny_msgs
{
template <class ContainerAllocator>
struct PlcAdditionalCommand_
{
  typedef PlcAdditionalCommand_<ContainerAllocator> Type;

  PlcAdditionalCommand_()
    : additional_command(0)  {
    }
  PlcAdditionalCommand_(const ContainerAllocator& _alloc)
    : additional_command(0)  {
  (void)_alloc;
    }



   typedef uint32_t _additional_command_type;
  _additional_command_type additional_command;





  typedef boost::shared_ptr< ::twinny_msgs::PlcAdditionalCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::twinny_msgs::PlcAdditionalCommand_<ContainerAllocator> const> ConstPtr;

}; // struct PlcAdditionalCommand_

typedef ::twinny_msgs::PlcAdditionalCommand_<std::allocator<void> > PlcAdditionalCommand;

typedef boost::shared_ptr< ::twinny_msgs::PlcAdditionalCommand > PlcAdditionalCommandPtr;
typedef boost::shared_ptr< ::twinny_msgs::PlcAdditionalCommand const> PlcAdditionalCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::twinny_msgs::PlcAdditionalCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::twinny_msgs::PlcAdditionalCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::twinny_msgs::PlcAdditionalCommand_<ContainerAllocator1> & lhs, const ::twinny_msgs::PlcAdditionalCommand_<ContainerAllocator2> & rhs)
{
  return lhs.additional_command == rhs.additional_command;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::twinny_msgs::PlcAdditionalCommand_<ContainerAllocator1> & lhs, const ::twinny_msgs::PlcAdditionalCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace twinny_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::twinny_msgs::PlcAdditionalCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::twinny_msgs::PlcAdditionalCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::twinny_msgs::PlcAdditionalCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::twinny_msgs::PlcAdditionalCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::twinny_msgs::PlcAdditionalCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::twinny_msgs::PlcAdditionalCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::twinny_msgs::PlcAdditionalCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e5c07594b5c15ce708f5c56e70ab299e";
  }

  static const char* value(const ::twinny_msgs::PlcAdditionalCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe5c07594b5c15ce7ULL;
  static const uint64_t static_value2 = 0x08f5c56e70ab299eULL;
};

template<class ContainerAllocator>
struct DataType< ::twinny_msgs::PlcAdditionalCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "twinny_msgs/PlcAdditionalCommand";
  }

  static const char* value(const ::twinny_msgs::PlcAdditionalCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::twinny_msgs::PlcAdditionalCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 additional_command\n"
;
  }

  static const char* value(const ::twinny_msgs::PlcAdditionalCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::twinny_msgs::PlcAdditionalCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.additional_command);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PlcAdditionalCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::twinny_msgs::PlcAdditionalCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::twinny_msgs::PlcAdditionalCommand_<ContainerAllocator>& v)
  {
    s << indent << "additional_command: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.additional_command);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TWINNY_MSGS_MESSAGE_PLCADDITIONALCOMMAND_H
