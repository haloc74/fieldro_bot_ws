# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from twinny_msgs/PositionCompensatorCommandRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class PositionCompensatorCommandRequest(genpy.Message):
  _md5sum = "2a1735ad405e3a523cd261b59cc6c1ae"
  _type = "twinny_msgs/PositionCompensatorCommandRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 START = 0
int32 STOP = 1
int32 command

int32 id

float64 localized_line_A_x
float64 localized_line_A_y
float64 localized_line_B_x
float64 localized_line_B_y

int32 HANA_MACHINE_LONG = 1
int32 HANA_MACHINE_SHORT_SINGLE_EDGE = 2
int32 HANA_STOCKER = 3
int32 HANA_MACHINE_SHORT_DOUBLE_EDGE = 4
int32 NEPESARK_SHELF = 5
int32 type

float64 equipment_desired_x
float64 equipment_desired_y
"""
  # Pseudo-constants
  START = 0
  STOP = 1
  HANA_MACHINE_LONG = 1
  HANA_MACHINE_SHORT_SINGLE_EDGE = 2
  HANA_STOCKER = 3
  HANA_MACHINE_SHORT_DOUBLE_EDGE = 4
  NEPESARK_SHELF = 5

  __slots__ = ['command','id','localized_line_A_x','localized_line_A_y','localized_line_B_x','localized_line_B_y','type','equipment_desired_x','equipment_desired_y']
  _slot_types = ['int32','int32','float64','float64','float64','float64','int32','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       command,id,localized_line_A_x,localized_line_A_y,localized_line_B_x,localized_line_B_y,type,equipment_desired_x,equipment_desired_y

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PositionCompensatorCommandRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.command is None:
        self.command = 0
      if self.id is None:
        self.id = 0
      if self.localized_line_A_x is None:
        self.localized_line_A_x = 0.
      if self.localized_line_A_y is None:
        self.localized_line_A_y = 0.
      if self.localized_line_B_x is None:
        self.localized_line_B_x = 0.
      if self.localized_line_B_y is None:
        self.localized_line_B_y = 0.
      if self.type is None:
        self.type = 0
      if self.equipment_desired_x is None:
        self.equipment_desired_x = 0.
      if self.equipment_desired_y is None:
        self.equipment_desired_y = 0.
    else:
      self.command = 0
      self.id = 0
      self.localized_line_A_x = 0.
      self.localized_line_A_y = 0.
      self.localized_line_B_x = 0.
      self.localized_line_B_y = 0.
      self.type = 0
      self.equipment_desired_x = 0.
      self.equipment_desired_y = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2i4di2d().pack(_x.command, _x.id, _x.localized_line_A_x, _x.localized_line_A_y, _x.localized_line_B_x, _x.localized_line_B_y, _x.type, _x.equipment_desired_x, _x.equipment_desired_y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 60
      (_x.command, _x.id, _x.localized_line_A_x, _x.localized_line_A_y, _x.localized_line_B_x, _x.localized_line_B_y, _x.type, _x.equipment_desired_x, _x.equipment_desired_y,) = _get_struct_2i4di2d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2i4di2d().pack(_x.command, _x.id, _x.localized_line_A_x, _x.localized_line_A_y, _x.localized_line_B_x, _x.localized_line_B_y, _x.type, _x.equipment_desired_x, _x.equipment_desired_y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 60
      (_x.command, _x.id, _x.localized_line_A_x, _x.localized_line_A_y, _x.localized_line_B_x, _x.localized_line_B_y, _x.type, _x.equipment_desired_x, _x.equipment_desired_y,) = _get_struct_2i4di2d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i4di2d = None
def _get_struct_2i4di2d():
    global _struct_2i4di2d
    if _struct_2i4di2d is None:
        _struct_2i4di2d = struct.Struct("<2i4di2d")
    return _struct_2i4di2d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from twinny_msgs/PositionCompensatorCommandResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class PositionCompensatorCommandResponse(genpy.Message):
  _md5sum = "40e5817d267ae22e3d2f2cb90f71a2f5"
  _type = "twinny_msgs/PositionCompensatorCommandResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 SUCCESS = 1
int32 NOT_READY = -1
int32 WRONG_COMMAND = -99

int32 result

"""
  # Pseudo-constants
  SUCCESS = 1
  NOT_READY = -1
  WRONG_COMMAND = -99

  __slots__ = ['result']
  _slot_types = ['int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       result

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PositionCompensatorCommandResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.result is None:
        self.result = 0
    else:
      self.result = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.result
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.result,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.result
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.result,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
class PositionCompensatorCommand(object):
  _type          = 'twinny_msgs/PositionCompensatorCommand'
  _md5sum = '64c066ac648eab7e36cd5c86a14aa3c6'
  _request_class  = PositionCompensatorCommandRequest
  _response_class = PositionCompensatorCommandResponse
