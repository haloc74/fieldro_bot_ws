# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from twinny_msgs/StationRecognizerCommandRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class StationRecognizerCommandRequest(genpy.Message):
  _md5sum = "048b682f839d7464bdb8aeb10dc846ee"
  _type = "twinny_msgs/StationRecognizerCommandRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string type

uint8 START = 0
uint8 STOP = 1
uint8 PAUSE = 2
uint8 RESUME = 3
uint8 RESET_KALMAN = 4
uint8 GET_STATION = 5
uint8 command

string frame_name
geometry_msgs/Pose2D current_robot_pose
geometry_msgs/Pose2D candidate_pose

float64 roi_length

string extra_field

================================================================================
MSG: geometry_msgs/Pose2D
# Deprecated
# Please use the full 3D pose.

# In general our recommendation is to use a full 3D representation of everything and for 2D specific applications make the appropriate projections into the plane for their calculations but optimally will preserve the 3D information during processing.

# If we have parallel copies of 2D datatypes every UI and other pipeline will end up needing to have dual interfaces to plot everything. And you will end up with not being able to use 3D tools for 2D use cases even if they're completely valid, as you'd have to reimplement it with different inputs and outputs. It's not particularly hard to plot the 2D pose or compute the yaw error for the Pose message and there are already tools and libraries that can do this for you.


# This expresses a position and orientation on a 2D manifold.

float64 x
float64 y
float64 theta
"""
  # Pseudo-constants
  START = 0
  STOP = 1
  PAUSE = 2
  RESUME = 3
  RESET_KALMAN = 4
  GET_STATION = 5

  __slots__ = ['type','command','frame_name','current_robot_pose','candidate_pose','roi_length','extra_field']
  _slot_types = ['string','uint8','string','geometry_msgs/Pose2D','geometry_msgs/Pose2D','float64','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       type,command,frame_name,current_robot_pose,candidate_pose,roi_length,extra_field

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(StationRecognizerCommandRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.type is None:
        self.type = ''
      if self.command is None:
        self.command = 0
      if self.frame_name is None:
        self.frame_name = ''
      if self.current_robot_pose is None:
        self.current_robot_pose = geometry_msgs.msg.Pose2D()
      if self.candidate_pose is None:
        self.candidate_pose = geometry_msgs.msg.Pose2D()
      if self.roi_length is None:
        self.roi_length = 0.
      if self.extra_field is None:
        self.extra_field = ''
    else:
      self.type = ''
      self.command = 0
      self.frame_name = ''
      self.current_robot_pose = geometry_msgs.msg.Pose2D()
      self.candidate_pose = geometry_msgs.msg.Pose2D()
      self.roi_length = 0.
      self.extra_field = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.command
      buff.write(_get_struct_B().pack(_x))
      _x = self.frame_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.current_robot_pose.x, _x.current_robot_pose.y, _x.current_robot_pose.theta, _x.candidate_pose.x, _x.candidate_pose.y, _x.candidate_pose.theta, _x.roi_length))
      _x = self.extra_field
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.current_robot_pose is None:
        self.current_robot_pose = geometry_msgs.msg.Pose2D()
      if self.candidate_pose is None:
        self.candidate_pose = geometry_msgs.msg.Pose2D()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.type = str[start:end]
      start = end
      end += 1
      (self.command,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frame_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.frame_name = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.current_robot_pose.x, _x.current_robot_pose.y, _x.current_robot_pose.theta, _x.candidate_pose.x, _x.candidate_pose.y, _x.candidate_pose.theta, _x.roi_length,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.extra_field = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.extra_field = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.command
      buff.write(_get_struct_B().pack(_x))
      _x = self.frame_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.current_robot_pose.x, _x.current_robot_pose.y, _x.current_robot_pose.theta, _x.candidate_pose.x, _x.candidate_pose.y, _x.candidate_pose.theta, _x.roi_length))
      _x = self.extra_field
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.current_robot_pose is None:
        self.current_robot_pose = geometry_msgs.msg.Pose2D()
      if self.candidate_pose is None:
        self.candidate_pose = geometry_msgs.msg.Pose2D()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.type = str[start:end]
      start = end
      end += 1
      (self.command,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frame_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.frame_name = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.current_robot_pose.x, _x.current_robot_pose.y, _x.current_robot_pose.theta, _x.candidate_pose.x, _x.candidate_pose.y, _x.candidate_pose.theta, _x.roi_length,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.extra_field = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.extra_field = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from twinny_msgs/StationRecognizerCommandResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class StationRecognizerCommandResponse(genpy.Message):
  _md5sum = "3729f7c52832e836a2c496c7c4b4bf1d"
  _type = "twinny_msgs/StationRecognizerCommandResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 SUCCESS = 1
int32 FAIL = -1
int32 ERROR = -999

int32 INVALID_MODE = -10
int32 INVALID_STATE= -11
int32 INVALID_COMMAND = -12
int32 INVALID_TYPE = -13
int32 INVALID_FRAME = -14
int32 INVALID_CURRENT = -15

int32 NOT_WORKING_DUETO_TOO_CLOSED = -20
int32 FAIL_DUETO_BOUND_ERROR = -21
int32 FAIL_DUETO_SIZE_ERROR = -22
int32 FAIL_DUETO_LENGTH_ERROR = -23

int32 result

bool is_find

geometry_msgs/Pose2D estimated_station_pose
string extra_field


================================================================================
MSG: geometry_msgs/Pose2D
# Deprecated
# Please use the full 3D pose.

# In general our recommendation is to use a full 3D representation of everything and for 2D specific applications make the appropriate projections into the plane for their calculations but optimally will preserve the 3D information during processing.

# If we have parallel copies of 2D datatypes every UI and other pipeline will end up needing to have dual interfaces to plot everything. And you will end up with not being able to use 3D tools for 2D use cases even if they're completely valid, as you'd have to reimplement it with different inputs and outputs. It's not particularly hard to plot the 2D pose or compute the yaw error for the Pose message and there are already tools and libraries that can do this for you.


# This expresses a position and orientation on a 2D manifold.

float64 x
float64 y
float64 theta
"""
  # Pseudo-constants
  SUCCESS = 1
  FAIL = -1
  ERROR = -999
  INVALID_MODE = -10
  INVALID_STATE = -11
  INVALID_COMMAND = -12
  INVALID_TYPE = -13
  INVALID_FRAME = -14
  INVALID_CURRENT = -15
  NOT_WORKING_DUETO_TOO_CLOSED = -20
  FAIL_DUETO_BOUND_ERROR = -21
  FAIL_DUETO_SIZE_ERROR = -22
  FAIL_DUETO_LENGTH_ERROR = -23

  __slots__ = ['result','is_find','estimated_station_pose','extra_field']
  _slot_types = ['int32','bool','geometry_msgs/Pose2D','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       result,is_find,estimated_station_pose,extra_field

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(StationRecognizerCommandResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.result is None:
        self.result = 0
      if self.is_find is None:
        self.is_find = False
      if self.estimated_station_pose is None:
        self.estimated_station_pose = geometry_msgs.msg.Pose2D()
      if self.extra_field is None:
        self.extra_field = ''
    else:
      self.result = 0
      self.is_find = False
      self.estimated_station_pose = geometry_msgs.msg.Pose2D()
      self.extra_field = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_iB3d().pack(_x.result, _x.is_find, _x.estimated_station_pose.x, _x.estimated_station_pose.y, _x.estimated_station_pose.theta))
      _x = self.extra_field
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.estimated_station_pose is None:
        self.estimated_station_pose = geometry_msgs.msg.Pose2D()
      end = 0
      _x = self
      start = end
      end += 29
      (_x.result, _x.is_find, _x.estimated_station_pose.x, _x.estimated_station_pose.y, _x.estimated_station_pose.theta,) = _get_struct_iB3d().unpack(str[start:end])
      self.is_find = bool(self.is_find)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.extra_field = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.extra_field = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_iB3d().pack(_x.result, _x.is_find, _x.estimated_station_pose.x, _x.estimated_station_pose.y, _x.estimated_station_pose.theta))
      _x = self.extra_field
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.estimated_station_pose is None:
        self.estimated_station_pose = geometry_msgs.msg.Pose2D()
      end = 0
      _x = self
      start = end
      end += 29
      (_x.result, _x.is_find, _x.estimated_station_pose.x, _x.estimated_station_pose.y, _x.estimated_station_pose.theta,) = _get_struct_iB3d().unpack(str[start:end])
      self.is_find = bool(self.is_find)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.extra_field = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.extra_field = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_iB3d = None
def _get_struct_iB3d():
    global _struct_iB3d
    if _struct_iB3d is None:
        _struct_iB3d = struct.Struct("<iB3d")
    return _struct_iB3d
class StationRecognizerCommand(object):
  _type          = 'twinny_msgs/StationRecognizerCommand'
  _md5sum = 'fc40b6d334b5e6c2cc71670efc1b918a'
  _request_class  = StationRecognizerCommandRequest
  _response_class = StationRecognizerCommandResponse
