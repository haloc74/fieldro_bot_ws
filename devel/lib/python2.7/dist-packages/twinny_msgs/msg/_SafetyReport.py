# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from twinny_msgs/SafetyReport.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class SafetyReport(genpy.Message):
  _md5sum = "eda7dea195ffb58f6544c2c1d4766176"
  _type = "twinny_msgs/SafetyReport"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header

int8 MODE_NORMAL=0
int8 MODE_OSSD_MUTE_MOVE=1
int8 MODE_MANUAL_MOVE=2
int8 MODE_EMERGENCY_STOP=-1
int8 MODE_PROTECTIVE_STOP=-2
int8 MODE_EXTERNAL_STOP=-3

int8 mode

bool estop_switch_status
bool sto_status
bool ossd_front_status
bool ossd_rear_status
bool reset_switch_toggle
bool manual_move_switch_status
bool external_stop_status
bool lidar_power_status

uint8 MCU_WATCHDOG_NORMAL=0
uint8 MCU_WATCHDOG_ALARM=1
uint8 MCU_WATCHDOG_FAULT=2

uint8 mcu_watchdog_status

bool fault_detected

uint8 FAULT_EMERGENCY_SW_FAULT=1
uint8 FAULT_STO_FAULT=2
uint8 FAULT_OSSD_FRONT=3
uint8 FAULT_OSSD_REAR=4
uint8 FAULT_LIDAR_FRONT=5
uint8 FAULT_LIDAR_REAR=6
uint8 fault_safety_function

uint8 BOARD_FAULT_BIT_MCU_MASTER=1
uint8 BOARD_FAULT_BIT_MCU_SLAVE=2
uint8 BOARD_FAULT_BIT_CAN_MASTER=3
uint8 BOARD_FAULT_BIT_CAN_SLAVE=4
uint8 BOARD_FAULT_BIT_SYNC=5
uint8 BOARD_FAULT_BIT_POWER_MASTER=6
uint8 BOARD_FAULT_BIT_POWER_SLAVE=7
uint8 fault_board

uint8 MCU_FAULT_BIT_CPU=1
uint8 MCU_FAULT_BIT_RAM=2
uint8 MCU_FAULT_BIT_FLASH=3
uint8 MCU_FAULT_BIT_GPIO=4
uint8 MCU_FAULT_BIT_DMA=5
uint8 MCU_FAULT_BIT_NVIC=6
uint8 MCU_FAULT_BIT_WDG=7
uint8 MCU_FAULT_BIT_CAN=8
uint8[2] fault_mcu

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  # Pseudo-constants
  MODE_NORMAL = 0
  MODE_OSSD_MUTE_MOVE = 1
  MODE_MANUAL_MOVE = 2
  MODE_EMERGENCY_STOP = -1
  MODE_PROTECTIVE_STOP = -2
  MODE_EXTERNAL_STOP = -3
  MCU_WATCHDOG_NORMAL = 0
  MCU_WATCHDOG_ALARM = 1
  MCU_WATCHDOG_FAULT = 2
  FAULT_EMERGENCY_SW_FAULT = 1
  FAULT_STO_FAULT = 2
  FAULT_OSSD_FRONT = 3
  FAULT_OSSD_REAR = 4
  FAULT_LIDAR_FRONT = 5
  FAULT_LIDAR_REAR = 6
  BOARD_FAULT_BIT_MCU_MASTER = 1
  BOARD_FAULT_BIT_MCU_SLAVE = 2
  BOARD_FAULT_BIT_CAN_MASTER = 3
  BOARD_FAULT_BIT_CAN_SLAVE = 4
  BOARD_FAULT_BIT_SYNC = 5
  BOARD_FAULT_BIT_POWER_MASTER = 6
  BOARD_FAULT_BIT_POWER_SLAVE = 7
  MCU_FAULT_BIT_CPU = 1
  MCU_FAULT_BIT_RAM = 2
  MCU_FAULT_BIT_FLASH = 3
  MCU_FAULT_BIT_GPIO = 4
  MCU_FAULT_BIT_DMA = 5
  MCU_FAULT_BIT_NVIC = 6
  MCU_FAULT_BIT_WDG = 7
  MCU_FAULT_BIT_CAN = 8

  __slots__ = ['header','mode','estop_switch_status','sto_status','ossd_front_status','ossd_rear_status','reset_switch_toggle','manual_move_switch_status','external_stop_status','lidar_power_status','mcu_watchdog_status','fault_detected','fault_safety_function','fault_board','fault_mcu']
  _slot_types = ['std_msgs/Header','int8','bool','bool','bool','bool','bool','bool','bool','bool','uint8','bool','uint8','uint8','uint8[2]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,mode,estop_switch_status,sto_status,ossd_front_status,ossd_rear_status,reset_switch_toggle,manual_move_switch_status,external_stop_status,lidar_power_status,mcu_watchdog_status,fault_detected,fault_safety_function,fault_board,fault_mcu

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SafetyReport, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.mode is None:
        self.mode = 0
      if self.estop_switch_status is None:
        self.estop_switch_status = False
      if self.sto_status is None:
        self.sto_status = False
      if self.ossd_front_status is None:
        self.ossd_front_status = False
      if self.ossd_rear_status is None:
        self.ossd_rear_status = False
      if self.reset_switch_toggle is None:
        self.reset_switch_toggle = False
      if self.manual_move_switch_status is None:
        self.manual_move_switch_status = False
      if self.external_stop_status is None:
        self.external_stop_status = False
      if self.lidar_power_status is None:
        self.lidar_power_status = False
      if self.mcu_watchdog_status is None:
        self.mcu_watchdog_status = 0
      if self.fault_detected is None:
        self.fault_detected = False
      if self.fault_safety_function is None:
        self.fault_safety_function = 0
      if self.fault_board is None:
        self.fault_board = 0
      if self.fault_mcu is None:
        self.fault_mcu = b'\0'*2
    else:
      self.header = std_msgs.msg.Header()
      self.mode = 0
      self.estop_switch_status = False
      self.sto_status = False
      self.ossd_front_status = False
      self.ossd_rear_status = False
      self.reset_switch_toggle = False
      self.manual_move_switch_status = False
      self.external_stop_status = False
      self.lidar_power_status = False
      self.mcu_watchdog_status = 0
      self.fault_detected = False
      self.fault_safety_function = 0
      self.fault_board = 0
      self.fault_mcu = b'\0'*2

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_b12B().pack(_x.mode, _x.estop_switch_status, _x.sto_status, _x.ossd_front_status, _x.ossd_rear_status, _x.reset_switch_toggle, _x.manual_move_switch_status, _x.external_stop_status, _x.lidar_power_status, _x.mcu_watchdog_status, _x.fault_detected, _x.fault_safety_function, _x.fault_board))
      _x = self.fault_mcu
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_2B().pack(*_x))
      else:
        buff.write(_get_struct_2s().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.mode, _x.estop_switch_status, _x.sto_status, _x.ossd_front_status, _x.ossd_rear_status, _x.reset_switch_toggle, _x.manual_move_switch_status, _x.external_stop_status, _x.lidar_power_status, _x.mcu_watchdog_status, _x.fault_detected, _x.fault_safety_function, _x.fault_board,) = _get_struct_b12B().unpack(str[start:end])
      self.estop_switch_status = bool(self.estop_switch_status)
      self.sto_status = bool(self.sto_status)
      self.ossd_front_status = bool(self.ossd_front_status)
      self.ossd_rear_status = bool(self.ossd_rear_status)
      self.reset_switch_toggle = bool(self.reset_switch_toggle)
      self.manual_move_switch_status = bool(self.manual_move_switch_status)
      self.external_stop_status = bool(self.external_stop_status)
      self.lidar_power_status = bool(self.lidar_power_status)
      self.fault_detected = bool(self.fault_detected)
      start = end
      end += 2
      self.fault_mcu = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_b12B().pack(_x.mode, _x.estop_switch_status, _x.sto_status, _x.ossd_front_status, _x.ossd_rear_status, _x.reset_switch_toggle, _x.manual_move_switch_status, _x.external_stop_status, _x.lidar_power_status, _x.mcu_watchdog_status, _x.fault_detected, _x.fault_safety_function, _x.fault_board))
      _x = self.fault_mcu
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_2B().pack(*_x))
      else:
        buff.write(_get_struct_2s().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.mode, _x.estop_switch_status, _x.sto_status, _x.ossd_front_status, _x.ossd_rear_status, _x.reset_switch_toggle, _x.manual_move_switch_status, _x.external_stop_status, _x.lidar_power_status, _x.mcu_watchdog_status, _x.fault_detected, _x.fault_safety_function, _x.fault_board,) = _get_struct_b12B().unpack(str[start:end])
      self.estop_switch_status = bool(self.estop_switch_status)
      self.sto_status = bool(self.sto_status)
      self.ossd_front_status = bool(self.ossd_front_status)
      self.ossd_rear_status = bool(self.ossd_rear_status)
      self.reset_switch_toggle = bool(self.reset_switch_toggle)
      self.manual_move_switch_status = bool(self.manual_move_switch_status)
      self.external_stop_status = bool(self.external_stop_status)
      self.lidar_power_status = bool(self.lidar_power_status)
      self.fault_detected = bool(self.fault_detected)
      start = end
      end += 2
      self.fault_mcu = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_2s = None
def _get_struct_2s():
    global _struct_2s
    if _struct_2s is None:
        _struct_2s = struct.Struct("<2s")
    return _struct_2s
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_b12B = None
def _get_struct_b12B():
    global _struct_b12B
    if _struct_b12B is None:
        _struct_b12B = struct.Struct("<b12B")
    return _struct_b12B
