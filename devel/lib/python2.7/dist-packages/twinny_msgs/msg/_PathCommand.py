# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from twinny_msgs/PathCommand.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class PathCommand(genpy.Message):
  _md5sum = "07a34c8ab221feb76ed11d3cef84b7c5"
  _type = "twinny_msgs/PathCommand"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header

uint8 MAX_LENGTH=200
uint8 valid_length

geometry_msgs/Pose2D[200] path
geometry_msgs/Twist front_vel
geometry_msgs/Twist current_vel
geometry_msgs/Pose2D current_pose

uint8[200] mode
uint8 DRIVING_MODE=1
uint8 ROTATING_MODE=2
uint8 ROTATING_MODE_IN=3
uint8 ROTATING_MODE_OUT_CW=4
uint8 ROTATING_MODE_OUT_CCW=5
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Pose2D
# Deprecated
# Please use the full 3D pose.

# In general our recommendation is to use a full 3D representation of everything and for 2D specific applications make the appropriate projections into the plane for their calculations but optimally will preserve the 3D information during processing.

# If we have parallel copies of 2D datatypes every UI and other pipeline will end up needing to have dual interfaces to plot everything. And you will end up with not being able to use 3D tools for 2D use cases even if they're completely valid, as you'd have to reimplement it with different inputs and outputs. It's not particularly hard to plot the 2D pose or compute the yaw error for the Pose message and there are already tools and libraries that can do this for you.


# This expresses a position and orientation on a 2D manifold.

float64 x
float64 y
float64 theta

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  # Pseudo-constants
  MAX_LENGTH = 200
  DRIVING_MODE = 1
  ROTATING_MODE = 2
  ROTATING_MODE_IN = 3
  ROTATING_MODE_OUT_CW = 4
  ROTATING_MODE_OUT_CCW = 5

  __slots__ = ['header','valid_length','path','front_vel','current_vel','current_pose','mode']
  _slot_types = ['std_msgs/Header','uint8','geometry_msgs/Pose2D[200]','geometry_msgs/Twist','geometry_msgs/Twist','geometry_msgs/Pose2D','uint8[200]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,valid_length,path,front_vel,current_vel,current_pose,mode

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PathCommand, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.valid_length is None:
        self.valid_length = 0
      if self.path is None:
        self.path = [geometry_msgs.msg.Pose2D() for _ in range(200)]
      if self.front_vel is None:
        self.front_vel = geometry_msgs.msg.Twist()
      if self.current_vel is None:
        self.current_vel = geometry_msgs.msg.Twist()
      if self.current_pose is None:
        self.current_pose = geometry_msgs.msg.Pose2D()
      if self.mode is None:
        self.mode = b'\0'*200
    else:
      self.header = std_msgs.msg.Header()
      self.valid_length = 0
      self.path = [geometry_msgs.msg.Pose2D() for _ in range(200)]
      self.front_vel = geometry_msgs.msg.Twist()
      self.current_vel = geometry_msgs.msg.Twist()
      self.current_pose = geometry_msgs.msg.Pose2D()
      self.mode = b'\0'*200

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.valid_length
      buff.write(_get_struct_B().pack(_x))
      if len(self.path) != 200:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (200, len(self.path), 'self.path')))
      for val1 in self.path:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.theta))
      _x = self
      buff.write(_get_struct_15d().pack(_x.front_vel.linear.x, _x.front_vel.linear.y, _x.front_vel.linear.z, _x.front_vel.angular.x, _x.front_vel.angular.y, _x.front_vel.angular.z, _x.current_vel.linear.x, _x.current_vel.linear.y, _x.current_vel.linear.z, _x.current_vel.angular.x, _x.current_vel.angular.y, _x.current_vel.angular.z, _x.current_pose.x, _x.current_pose.y, _x.current_pose.theta))
      _x = self.mode
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_200B().pack(*_x))
      else:
        buff.write(_get_struct_200s().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.path is None:
        self.path = None
      if self.front_vel is None:
        self.front_vel = geometry_msgs.msg.Twist()
      if self.current_vel is None:
        self.current_vel = geometry_msgs.msg.Twist()
      if self.current_pose is None:
        self.current_pose = geometry_msgs.msg.Pose2D()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.valid_length,) = _get_struct_B().unpack(str[start:end])
      self.path = []
      for i in range(0, 200):
        val1 = geometry_msgs.msg.Pose2D()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _get_struct_3d().unpack(str[start:end])
        self.path.append(val1)
      _x = self
      start = end
      end += 120
      (_x.front_vel.linear.x, _x.front_vel.linear.y, _x.front_vel.linear.z, _x.front_vel.angular.x, _x.front_vel.angular.y, _x.front_vel.angular.z, _x.current_vel.linear.x, _x.current_vel.linear.y, _x.current_vel.linear.z, _x.current_vel.angular.x, _x.current_vel.angular.y, _x.current_vel.angular.z, _x.current_pose.x, _x.current_pose.y, _x.current_pose.theta,) = _get_struct_15d().unpack(str[start:end])
      start = end
      end += 200
      self.mode = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.valid_length
      buff.write(_get_struct_B().pack(_x))
      if len(self.path) != 200:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (200, len(self.path), 'self.path')))
      for val1 in self.path:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.theta))
      _x = self
      buff.write(_get_struct_15d().pack(_x.front_vel.linear.x, _x.front_vel.linear.y, _x.front_vel.linear.z, _x.front_vel.angular.x, _x.front_vel.angular.y, _x.front_vel.angular.z, _x.current_vel.linear.x, _x.current_vel.linear.y, _x.current_vel.linear.z, _x.current_vel.angular.x, _x.current_vel.angular.y, _x.current_vel.angular.z, _x.current_pose.x, _x.current_pose.y, _x.current_pose.theta))
      _x = self.mode
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_200B().pack(*_x))
      else:
        buff.write(_get_struct_200s().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.path is None:
        self.path = None
      if self.front_vel is None:
        self.front_vel = geometry_msgs.msg.Twist()
      if self.current_vel is None:
        self.current_vel = geometry_msgs.msg.Twist()
      if self.current_pose is None:
        self.current_pose = geometry_msgs.msg.Pose2D()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 1
      (self.valid_length,) = _get_struct_B().unpack(str[start:end])
      self.path = []
      for i in range(0, 200):
        val1 = geometry_msgs.msg.Pose2D()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _get_struct_3d().unpack(str[start:end])
        self.path.append(val1)
      _x = self
      start = end
      end += 120
      (_x.front_vel.linear.x, _x.front_vel.linear.y, _x.front_vel.linear.z, _x.front_vel.angular.x, _x.front_vel.angular.y, _x.front_vel.angular.z, _x.current_vel.linear.x, _x.current_vel.linear.y, _x.current_vel.linear.z, _x.current_vel.angular.x, _x.current_vel.angular.y, _x.current_vel.angular.z, _x.current_pose.x, _x.current_pose.y, _x.current_pose.theta,) = _get_struct_15d().unpack(str[start:end])
      start = end
      end += 200
      self.mode = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_15d = None
def _get_struct_15d():
    global _struct_15d
    if _struct_15d is None:
        _struct_15d = struct.Struct("<15d")
    return _struct_15d
_struct_200B = None
def _get_struct_200B():
    global _struct_200B
    if _struct_200B is None:
        _struct_200B = struct.Struct("<200B")
    return _struct_200B
_struct_200s = None
def _get_struct_200s():
    global _struct_200s
    if _struct_200s is None:
        _struct_200s = struct.Struct("<200s")
    return _struct_200s
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
