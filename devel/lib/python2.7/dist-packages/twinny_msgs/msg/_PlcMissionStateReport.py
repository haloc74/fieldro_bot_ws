# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from twinny_msgs/PlcMissionStateReport.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class PlcMissionStateReport(genpy.Message):
  _md5sum = "f2b9c2a3491b99084010a4db4b12614d"
  _type = "twinny_msgs/PlcMissionStateReport"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
string type

bool is_manual

uint8 READY = 0
uint8 WORKING = 1
uint8 COMPLETE = 2
uint8 FAIL = 3
uint8 status

uint32 NO_ALARM = 0
uint32 ALARM_DRIVE_DISABLE = 1

uint32 ALARM_LOAD_VISION_NG = 11
uint32 ALARM_LOAD_WORKSPACE_NG = 12
uint32 ALARM_UNLOAD_BAN = 13
uint32 ALARM_LOAD_RFID_READ_NG = 14
uint32 ALARM_LOAD_RFID_CHECK = 15

uint32 ALARM_UNLOAD_VISION_NG = 21
uint32 ALARM_UNLOAD_WORKSPACE_NG = 22
uint32 ALARM_UNLOAD_RFID_CHECK = 23

uint32 ALARM_BATTERY_VISION_NG = 31
uint32 ALARM_BATTERY_WORKSPACE_NG = 32
uint32 ALARM_PIO_READY_DELAY = 33
uint32 ALARM_PIO_BATTERY_REQUEST_RESPONSE_DELAY = 34
uint32 ALARM_PIO_BATTERY_COMPLETE_DELAY =35
uint32 ALARM_PIO_IF_COMPLETE_DELAY = 36

string[] magazine_slot
uint32 error
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  # Pseudo-constants
  READY = 0
  WORKING = 1
  COMPLETE = 2
  FAIL = 3
  NO_ALARM = 0
  ALARM_DRIVE_DISABLE = 1
  ALARM_LOAD_VISION_NG = 11
  ALARM_LOAD_WORKSPACE_NG = 12
  ALARM_UNLOAD_BAN = 13
  ALARM_LOAD_RFID_READ_NG = 14
  ALARM_LOAD_RFID_CHECK = 15
  ALARM_UNLOAD_VISION_NG = 21
  ALARM_UNLOAD_WORKSPACE_NG = 22
  ALARM_UNLOAD_RFID_CHECK = 23
  ALARM_BATTERY_VISION_NG = 31
  ALARM_BATTERY_WORKSPACE_NG = 32
  ALARM_PIO_READY_DELAY = 33
  ALARM_PIO_BATTERY_REQUEST_RESPONSE_DELAY = 34
  ALARM_PIO_BATTERY_COMPLETE_DELAY = 35
  ALARM_PIO_IF_COMPLETE_DELAY = 36

  __slots__ = ['header','type','is_manual','status','magazine_slot','error']
  _slot_types = ['std_msgs/Header','string','bool','uint8','string[]','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,type,is_manual,status,magazine_slot,error

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PlcMissionStateReport, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.type is None:
        self.type = ''
      if self.is_manual is None:
        self.is_manual = False
      if self.status is None:
        self.status = 0
      if self.magazine_slot is None:
        self.magazine_slot = []
      if self.error is None:
        self.error = 0
    else:
      self.header = std_msgs.msg.Header()
      self.type = ''
      self.is_manual = False
      self.status = 0
      self.magazine_slot = []
      self.error = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B().pack(_x.is_manual, _x.status))
      length = len(self.magazine_slot)
      buff.write(_struct_I.pack(length))
      for val1 in self.magazine_slot:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self.error
      buff.write(_get_struct_I().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.type = str[start:end]
      _x = self
      start = end
      end += 2
      (_x.is_manual, _x.status,) = _get_struct_2B().unpack(str[start:end])
      self.is_manual = bool(self.is_manual)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.magazine_slot = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.magazine_slot.append(val1)
      start = end
      end += 4
      (self.error,) = _get_struct_I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B().pack(_x.is_manual, _x.status))
      length = len(self.magazine_slot)
      buff.write(_struct_I.pack(length))
      for val1 in self.magazine_slot:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self.error
      buff.write(_get_struct_I().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.type = str[start:end]
      _x = self
      start = end
      end += 2
      (_x.is_manual, _x.status,) = _get_struct_2B().unpack(str[start:end])
      self.is_manual = bool(self.is_manual)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.magazine_slot = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.magazine_slot.append(val1)
      start = end
      end += 4
      (self.error,) = _get_struct_I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
