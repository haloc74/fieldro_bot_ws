# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from twinny_msgs/SwitchReport.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class SwitchReport(genpy.Message):
  _md5sum = "a3785c85ae8e5bf04a5bb77839719f66"
  _type = "twinny_msgs/SwitchReport"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header 

bool E_STOP_button
bool SW_0_toggle
bool SW_1_toggle
bool SW_2_toggle
bool SW_3_toggle
bool SW_4_toggle
bool SW_5_toggle

bool Sub_SW_0_toggle
bool Sub_SW_1_toggle
bool Sub_SW_2_toggle
bool Sub_SW_3_toggle
bool Sub_SW_4_toggle
bool Sub_SW_5_toggle


bool Docking_hall_sensor

bool Motor_Brake
bool Main_Power_State
bool DockingIR_Power_State



================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','E_STOP_button','SW_0_toggle','SW_1_toggle','SW_2_toggle','SW_3_toggle','SW_4_toggle','SW_5_toggle','Sub_SW_0_toggle','Sub_SW_1_toggle','Sub_SW_2_toggle','Sub_SW_3_toggle','Sub_SW_4_toggle','Sub_SW_5_toggle','Docking_hall_sensor','Motor_Brake','Main_Power_State','DockingIR_Power_State']
  _slot_types = ['std_msgs/Header','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,E_STOP_button,SW_0_toggle,SW_1_toggle,SW_2_toggle,SW_3_toggle,SW_4_toggle,SW_5_toggle,Sub_SW_0_toggle,Sub_SW_1_toggle,Sub_SW_2_toggle,Sub_SW_3_toggle,Sub_SW_4_toggle,Sub_SW_5_toggle,Docking_hall_sensor,Motor_Brake,Main_Power_State,DockingIR_Power_State

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SwitchReport, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.E_STOP_button is None:
        self.E_STOP_button = False
      if self.SW_0_toggle is None:
        self.SW_0_toggle = False
      if self.SW_1_toggle is None:
        self.SW_1_toggle = False
      if self.SW_2_toggle is None:
        self.SW_2_toggle = False
      if self.SW_3_toggle is None:
        self.SW_3_toggle = False
      if self.SW_4_toggle is None:
        self.SW_4_toggle = False
      if self.SW_5_toggle is None:
        self.SW_5_toggle = False
      if self.Sub_SW_0_toggle is None:
        self.Sub_SW_0_toggle = False
      if self.Sub_SW_1_toggle is None:
        self.Sub_SW_1_toggle = False
      if self.Sub_SW_2_toggle is None:
        self.Sub_SW_2_toggle = False
      if self.Sub_SW_3_toggle is None:
        self.Sub_SW_3_toggle = False
      if self.Sub_SW_4_toggle is None:
        self.Sub_SW_4_toggle = False
      if self.Sub_SW_5_toggle is None:
        self.Sub_SW_5_toggle = False
      if self.Docking_hall_sensor is None:
        self.Docking_hall_sensor = False
      if self.Motor_Brake is None:
        self.Motor_Brake = False
      if self.Main_Power_State is None:
        self.Main_Power_State = False
      if self.DockingIR_Power_State is None:
        self.DockingIR_Power_State = False
    else:
      self.header = std_msgs.msg.Header()
      self.E_STOP_button = False
      self.SW_0_toggle = False
      self.SW_1_toggle = False
      self.SW_2_toggle = False
      self.SW_3_toggle = False
      self.SW_4_toggle = False
      self.SW_5_toggle = False
      self.Sub_SW_0_toggle = False
      self.Sub_SW_1_toggle = False
      self.Sub_SW_2_toggle = False
      self.Sub_SW_3_toggle = False
      self.Sub_SW_4_toggle = False
      self.Sub_SW_5_toggle = False
      self.Docking_hall_sensor = False
      self.Motor_Brake = False
      self.Main_Power_State = False
      self.DockingIR_Power_State = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_17B().pack(_x.E_STOP_button, _x.SW_0_toggle, _x.SW_1_toggle, _x.SW_2_toggle, _x.SW_3_toggle, _x.SW_4_toggle, _x.SW_5_toggle, _x.Sub_SW_0_toggle, _x.Sub_SW_1_toggle, _x.Sub_SW_2_toggle, _x.Sub_SW_3_toggle, _x.Sub_SW_4_toggle, _x.Sub_SW_5_toggle, _x.Docking_hall_sensor, _x.Motor_Brake, _x.Main_Power_State, _x.DockingIR_Power_State))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 17
      (_x.E_STOP_button, _x.SW_0_toggle, _x.SW_1_toggle, _x.SW_2_toggle, _x.SW_3_toggle, _x.SW_4_toggle, _x.SW_5_toggle, _x.Sub_SW_0_toggle, _x.Sub_SW_1_toggle, _x.Sub_SW_2_toggle, _x.Sub_SW_3_toggle, _x.Sub_SW_4_toggle, _x.Sub_SW_5_toggle, _x.Docking_hall_sensor, _x.Motor_Brake, _x.Main_Power_State, _x.DockingIR_Power_State,) = _get_struct_17B().unpack(str[start:end])
      self.E_STOP_button = bool(self.E_STOP_button)
      self.SW_0_toggle = bool(self.SW_0_toggle)
      self.SW_1_toggle = bool(self.SW_1_toggle)
      self.SW_2_toggle = bool(self.SW_2_toggle)
      self.SW_3_toggle = bool(self.SW_3_toggle)
      self.SW_4_toggle = bool(self.SW_4_toggle)
      self.SW_5_toggle = bool(self.SW_5_toggle)
      self.Sub_SW_0_toggle = bool(self.Sub_SW_0_toggle)
      self.Sub_SW_1_toggle = bool(self.Sub_SW_1_toggle)
      self.Sub_SW_2_toggle = bool(self.Sub_SW_2_toggle)
      self.Sub_SW_3_toggle = bool(self.Sub_SW_3_toggle)
      self.Sub_SW_4_toggle = bool(self.Sub_SW_4_toggle)
      self.Sub_SW_5_toggle = bool(self.Sub_SW_5_toggle)
      self.Docking_hall_sensor = bool(self.Docking_hall_sensor)
      self.Motor_Brake = bool(self.Motor_Brake)
      self.Main_Power_State = bool(self.Main_Power_State)
      self.DockingIR_Power_State = bool(self.DockingIR_Power_State)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_17B().pack(_x.E_STOP_button, _x.SW_0_toggle, _x.SW_1_toggle, _x.SW_2_toggle, _x.SW_3_toggle, _x.SW_4_toggle, _x.SW_5_toggle, _x.Sub_SW_0_toggle, _x.Sub_SW_1_toggle, _x.Sub_SW_2_toggle, _x.Sub_SW_3_toggle, _x.Sub_SW_4_toggle, _x.Sub_SW_5_toggle, _x.Docking_hall_sensor, _x.Motor_Brake, _x.Main_Power_State, _x.DockingIR_Power_State))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 17
      (_x.E_STOP_button, _x.SW_0_toggle, _x.SW_1_toggle, _x.SW_2_toggle, _x.SW_3_toggle, _x.SW_4_toggle, _x.SW_5_toggle, _x.Sub_SW_0_toggle, _x.Sub_SW_1_toggle, _x.Sub_SW_2_toggle, _x.Sub_SW_3_toggle, _x.Sub_SW_4_toggle, _x.Sub_SW_5_toggle, _x.Docking_hall_sensor, _x.Motor_Brake, _x.Main_Power_State, _x.DockingIR_Power_State,) = _get_struct_17B().unpack(str[start:end])
      self.E_STOP_button = bool(self.E_STOP_button)
      self.SW_0_toggle = bool(self.SW_0_toggle)
      self.SW_1_toggle = bool(self.SW_1_toggle)
      self.SW_2_toggle = bool(self.SW_2_toggle)
      self.SW_3_toggle = bool(self.SW_3_toggle)
      self.SW_4_toggle = bool(self.SW_4_toggle)
      self.SW_5_toggle = bool(self.SW_5_toggle)
      self.Sub_SW_0_toggle = bool(self.Sub_SW_0_toggle)
      self.Sub_SW_1_toggle = bool(self.Sub_SW_1_toggle)
      self.Sub_SW_2_toggle = bool(self.Sub_SW_2_toggle)
      self.Sub_SW_3_toggle = bool(self.Sub_SW_3_toggle)
      self.Sub_SW_4_toggle = bool(self.Sub_SW_4_toggle)
      self.Sub_SW_5_toggle = bool(self.Sub_SW_5_toggle)
      self.Docking_hall_sensor = bool(self.Docking_hall_sensor)
      self.Motor_Brake = bool(self.Motor_Brake)
      self.Main_Power_State = bool(self.Main_Power_State)
      self.DockingIR_Power_State = bool(self.DockingIR_Power_State)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_17B = None
def _get_struct_17B():
    global _struct_17B
    if _struct_17B is None:
        _struct_17B = struct.Struct("<17B")
    return _struct_17B
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
