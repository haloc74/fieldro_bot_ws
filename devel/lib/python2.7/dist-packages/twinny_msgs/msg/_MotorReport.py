# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from twinny_msgs/MotorReport.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class MotorReport(genpy.Message):
  _md5sum = "fe02ce809fad1b492fd33e316a77ebd5"
  _type = "twinny_msgs/MotorReport"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header

float64 current_factor=0.1

uint8 ALARM=0
uint8 CTRL_FAIL=1
uint8 OVER_VOLT=2
uint8 OVER_TEMP=3
uint8 OVER_LOAD=4
uint8 HALL_FAIL=5
uint8 INV_VEL=6
uint8 STALL=7

uint16 motor_driver_mode

uint16 left_status
uint16 right_status
uint8 left_NMT_status
uint8 right_NMT_status

int16 left_current
int16 right_current
int16 left_peak_current
int16 right_peak_current

uint8 motor_error_flag

string left_drive_bridge_status
string left_drive_protection_status
string left_system_protection_status
string left_drive_system_status1

string right_drive_bridge_status
string right_drive_protection_status
string right_system_protection_status
string right_drive_system_status1

bool drive_fault_flag

uint16 DRIVE_INTERNAL_ERROR = 1
uint16 SHORT_CIRCUIT = 2
uint16 CURRENT_OVERSHOOT = 4
uint16 UNDER_VOLTAGE = 8
uint16 OVER_VOLTAGE = 16
uint16 DRIVE_OVER_TEMPERATURE = 32
uint16 INVALID_HALL_STATE = 64
uint16 MOTOR_OVER_TEMPERATURE = 128
uint16 PHASE_DECTION_FAULT = 256
uint16 FEEDBACK_SENSOR_ERROR = 512
uint16 NODE_GUARDING = 1024

uint16 drive_fault_status
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  # Pseudo-constants
  current_factor = 0.1
  ALARM = 0
  CTRL_FAIL = 1
  OVER_VOLT = 2
  OVER_TEMP = 3
  OVER_LOAD = 4
  HALL_FAIL = 5
  INV_VEL = 6
  STALL = 7
  DRIVE_INTERNAL_ERROR = 1
  SHORT_CIRCUIT = 2
  CURRENT_OVERSHOOT = 4
  UNDER_VOLTAGE = 8
  OVER_VOLTAGE = 16
  DRIVE_OVER_TEMPERATURE = 32
  INVALID_HALL_STATE = 64
  MOTOR_OVER_TEMPERATURE = 128
  PHASE_DECTION_FAULT = 256
  FEEDBACK_SENSOR_ERROR = 512
  NODE_GUARDING = 1024

  __slots__ = ['header','motor_driver_mode','left_status','right_status','left_NMT_status','right_NMT_status','left_current','right_current','left_peak_current','right_peak_current','motor_error_flag','left_drive_bridge_status','left_drive_protection_status','left_system_protection_status','left_drive_system_status1','right_drive_bridge_status','right_drive_protection_status','right_system_protection_status','right_drive_system_status1','drive_fault_flag','drive_fault_status']
  _slot_types = ['std_msgs/Header','uint16','uint16','uint16','uint8','uint8','int16','int16','int16','int16','uint8','string','string','string','string','string','string','string','string','bool','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,motor_driver_mode,left_status,right_status,left_NMT_status,right_NMT_status,left_current,right_current,left_peak_current,right_peak_current,motor_error_flag,left_drive_bridge_status,left_drive_protection_status,left_system_protection_status,left_drive_system_status1,right_drive_bridge_status,right_drive_protection_status,right_system_protection_status,right_drive_system_status1,drive_fault_flag,drive_fault_status

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MotorReport, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.motor_driver_mode is None:
        self.motor_driver_mode = 0
      if self.left_status is None:
        self.left_status = 0
      if self.right_status is None:
        self.right_status = 0
      if self.left_NMT_status is None:
        self.left_NMT_status = 0
      if self.right_NMT_status is None:
        self.right_NMT_status = 0
      if self.left_current is None:
        self.left_current = 0
      if self.right_current is None:
        self.right_current = 0
      if self.left_peak_current is None:
        self.left_peak_current = 0
      if self.right_peak_current is None:
        self.right_peak_current = 0
      if self.motor_error_flag is None:
        self.motor_error_flag = 0
      if self.left_drive_bridge_status is None:
        self.left_drive_bridge_status = ''
      if self.left_drive_protection_status is None:
        self.left_drive_protection_status = ''
      if self.left_system_protection_status is None:
        self.left_system_protection_status = ''
      if self.left_drive_system_status1 is None:
        self.left_drive_system_status1 = ''
      if self.right_drive_bridge_status is None:
        self.right_drive_bridge_status = ''
      if self.right_drive_protection_status is None:
        self.right_drive_protection_status = ''
      if self.right_system_protection_status is None:
        self.right_system_protection_status = ''
      if self.right_drive_system_status1 is None:
        self.right_drive_system_status1 = ''
      if self.drive_fault_flag is None:
        self.drive_fault_flag = False
      if self.drive_fault_status is None:
        self.drive_fault_status = 0
    else:
      self.header = std_msgs.msg.Header()
      self.motor_driver_mode = 0
      self.left_status = 0
      self.right_status = 0
      self.left_NMT_status = 0
      self.right_NMT_status = 0
      self.left_current = 0
      self.right_current = 0
      self.left_peak_current = 0
      self.right_peak_current = 0
      self.motor_error_flag = 0
      self.left_drive_bridge_status = ''
      self.left_drive_protection_status = ''
      self.left_system_protection_status = ''
      self.left_drive_system_status1 = ''
      self.right_drive_bridge_status = ''
      self.right_drive_protection_status = ''
      self.right_system_protection_status = ''
      self.right_drive_system_status1 = ''
      self.drive_fault_flag = False
      self.drive_fault_status = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3H2B4hB().pack(_x.motor_driver_mode, _x.left_status, _x.right_status, _x.left_NMT_status, _x.right_NMT_status, _x.left_current, _x.right_current, _x.left_peak_current, _x.right_peak_current, _x.motor_error_flag))
      _x = self.left_drive_bridge_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.left_drive_protection_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.left_system_protection_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.left_drive_system_status1
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.right_drive_bridge_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.right_drive_protection_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.right_system_protection_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.right_drive_system_status1
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BH().pack(_x.drive_fault_flag, _x.drive_fault_status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 17
      (_x.motor_driver_mode, _x.left_status, _x.right_status, _x.left_NMT_status, _x.right_NMT_status, _x.left_current, _x.right_current, _x.left_peak_current, _x.right_peak_current, _x.motor_error_flag,) = _get_struct_3H2B4hB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.left_drive_bridge_status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.left_drive_bridge_status = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.left_drive_protection_status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.left_drive_protection_status = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.left_system_protection_status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.left_system_protection_status = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.left_drive_system_status1 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.left_drive_system_status1 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.right_drive_bridge_status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.right_drive_bridge_status = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.right_drive_protection_status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.right_drive_protection_status = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.right_system_protection_status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.right_system_protection_status = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.right_drive_system_status1 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.right_drive_system_status1 = str[start:end]
      _x = self
      start = end
      end += 3
      (_x.drive_fault_flag, _x.drive_fault_status,) = _get_struct_BH().unpack(str[start:end])
      self.drive_fault_flag = bool(self.drive_fault_flag)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3H2B4hB().pack(_x.motor_driver_mode, _x.left_status, _x.right_status, _x.left_NMT_status, _x.right_NMT_status, _x.left_current, _x.right_current, _x.left_peak_current, _x.right_peak_current, _x.motor_error_flag))
      _x = self.left_drive_bridge_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.left_drive_protection_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.left_system_protection_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.left_drive_system_status1
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.right_drive_bridge_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.right_drive_protection_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.right_system_protection_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.right_drive_system_status1
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BH().pack(_x.drive_fault_flag, _x.drive_fault_status))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 17
      (_x.motor_driver_mode, _x.left_status, _x.right_status, _x.left_NMT_status, _x.right_NMT_status, _x.left_current, _x.right_current, _x.left_peak_current, _x.right_peak_current, _x.motor_error_flag,) = _get_struct_3H2B4hB().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.left_drive_bridge_status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.left_drive_bridge_status = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.left_drive_protection_status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.left_drive_protection_status = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.left_system_protection_status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.left_system_protection_status = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.left_drive_system_status1 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.left_drive_system_status1 = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.right_drive_bridge_status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.right_drive_bridge_status = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.right_drive_protection_status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.right_drive_protection_status = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.right_system_protection_status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.right_system_protection_status = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.right_drive_system_status1 = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.right_drive_system_status1 = str[start:end]
      _x = self
      start = end
      end += 3
      (_x.drive_fault_flag, _x.drive_fault_status,) = _get_struct_BH().unpack(str[start:end])
      self.drive_fault_flag = bool(self.drive_fault_flag)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3H2B4hB = None
def _get_struct_3H2B4hB():
    global _struct_3H2B4hB
    if _struct_3H2B4hB is None:
        _struct_3H2B4hB = struct.Struct("<3H2B4hB")
    return _struct_3H2B4hB
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_BH = None
def _get_struct_BH():
    global _struct_BH
    if _struct_BH is None:
        _struct_BH = struct.Struct("<BH")
    return _struct_BH
