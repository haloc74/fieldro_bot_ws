# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from twinny_msgs/PGVReport.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class PGVReport(genpy.Message):
  _md5sum = "34222d408912e06515bf5962c05f1613"
  _type = "twinny_msgs/PGVReport"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header

bool TagDetected
uint32 TagID

uint8 LineDetected
uint32 LineID

bool ControlDetected
uint32 ControlID

int8 Fault
int8 Warning

float32 X
float32 Y
float32 theta

int8 test_cmd
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','TagDetected','TagID','LineDetected','LineID','ControlDetected','ControlID','Fault','Warning','X','Y','theta','test_cmd']
  _slot_types = ['std_msgs/Header','bool','uint32','uint8','uint32','bool','uint32','int8','int8','float32','float32','float32','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,TagDetected,TagID,LineDetected,LineID,ControlDetected,ControlID,Fault,Warning,X,Y,theta,test_cmd

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PGVReport, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.TagDetected is None:
        self.TagDetected = False
      if self.TagID is None:
        self.TagID = 0
      if self.LineDetected is None:
        self.LineDetected = 0
      if self.LineID is None:
        self.LineID = 0
      if self.ControlDetected is None:
        self.ControlDetected = False
      if self.ControlID is None:
        self.ControlID = 0
      if self.Fault is None:
        self.Fault = 0
      if self.Warning is None:
        self.Warning = 0
      if self.X is None:
        self.X = 0.
      if self.Y is None:
        self.Y = 0.
      if self.theta is None:
        self.theta = 0.
      if self.test_cmd is None:
        self.test_cmd = 0
    else:
      self.header = std_msgs.msg.Header()
      self.TagDetected = False
      self.TagID = 0
      self.LineDetected = 0
      self.LineID = 0
      self.ControlDetected = False
      self.ControlID = 0
      self.Fault = 0
      self.Warning = 0
      self.X = 0.
      self.Y = 0.
      self.theta = 0.
      self.test_cmd = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BIBIBI2b3fb().pack(_x.TagDetected, _x.TagID, _x.LineDetected, _x.LineID, _x.ControlDetected, _x.ControlID, _x.Fault, _x.Warning, _x.X, _x.Y, _x.theta, _x.test_cmd))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 30
      (_x.TagDetected, _x.TagID, _x.LineDetected, _x.LineID, _x.ControlDetected, _x.ControlID, _x.Fault, _x.Warning, _x.X, _x.Y, _x.theta, _x.test_cmd,) = _get_struct_BIBIBI2b3fb().unpack(str[start:end])
      self.TagDetected = bool(self.TagDetected)
      self.ControlDetected = bool(self.ControlDetected)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BIBIBI2b3fb().pack(_x.TagDetected, _x.TagID, _x.LineDetected, _x.LineID, _x.ControlDetected, _x.ControlID, _x.Fault, _x.Warning, _x.X, _x.Y, _x.theta, _x.test_cmd))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 30
      (_x.TagDetected, _x.TagID, _x.LineDetected, _x.LineID, _x.ControlDetected, _x.ControlID, _x.Fault, _x.Warning, _x.X, _x.Y, _x.theta, _x.test_cmd,) = _get_struct_BIBIBI2b3fb().unpack(str[start:end])
      self.TagDetected = bool(self.TagDetected)
      self.ControlDetected = bool(self.ControlDetected)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_BIBIBI2b3fb = None
def _get_struct_BIBIBI2b3fb():
    global _struct_BIBIBI2b3fb
    if _struct_BIBIBI2b3fb is None:
        _struct_BIBIBI2b3fb = struct.Struct("<BIBIBI2b3fb")
    return _struct_BIBIBI2b3fb
