# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from twinny_msgs/JoystickStatus.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class JoystickStatus(genpy.Message):
  _md5sum = "ac111940512caeb23d072699a1470e96"
  _type = "twinny_msgs/JoystickStatus"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header 

string joy_driver_status         

float32[] axes                   

bool[] button    


bool joy_driver_enable_button    
bool reduce_velocity_button      
bool raise_velocity_button       
bool reset_velocity_button       

float32 vel_scale              

float32 linear_velocity          
float32 angular_velocity         


uint8 AXIS_LEFT_STICK_X = 0
uint8 AXIS_LEFT_STICK_Y = 1
uint8 AXIS_RIGHT_STICK_X = 2
uint8 AXIS_RIGHT_STICK_Y = 3
uint8 AXIS_DPAD_X = 4
uint8 AXIS_DPAD_Y = 5
uint8 AXIS_LEFT_TRIGGER = 6
uint8 AXIS_RIGHT_TRIGGER = 7


uint8 BUTTON_A = 0
uint8 BUTTON_B = 1
uint8 BUTTON_X = 2
uint8 BUTTON_Y = 3
uint8 BUTTON_LB = 4
uint8 BUTTON_RB = 5
uint8 BUTTON_BACK = 6
uint8 BUTTON_START = 7
uint8 BUTTON_GUIDE = 8
uint8 BUTTON_LEFT_STICK = 9
uint8 BUTTON_RIGHT_STICK = 10


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  # Pseudo-constants
  AXIS_LEFT_STICK_X = 0
  AXIS_LEFT_STICK_Y = 1
  AXIS_RIGHT_STICK_X = 2
  AXIS_RIGHT_STICK_Y = 3
  AXIS_DPAD_X = 4
  AXIS_DPAD_Y = 5
  AXIS_LEFT_TRIGGER = 6
  AXIS_RIGHT_TRIGGER = 7
  BUTTON_A = 0
  BUTTON_B = 1
  BUTTON_X = 2
  BUTTON_Y = 3
  BUTTON_LB = 4
  BUTTON_RB = 5
  BUTTON_BACK = 6
  BUTTON_START = 7
  BUTTON_GUIDE = 8
  BUTTON_LEFT_STICK = 9
  BUTTON_RIGHT_STICK = 10

  __slots__ = ['header','joy_driver_status','axes','button','joy_driver_enable_button','reduce_velocity_button','raise_velocity_button','reset_velocity_button','vel_scale','linear_velocity','angular_velocity']
  _slot_types = ['std_msgs/Header','string','float32[]','bool[]','bool','bool','bool','bool','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,joy_driver_status,axes,button,joy_driver_enable_button,reduce_velocity_button,raise_velocity_button,reset_velocity_button,vel_scale,linear_velocity,angular_velocity

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(JoystickStatus, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.joy_driver_status is None:
        self.joy_driver_status = ''
      if self.axes is None:
        self.axes = []
      if self.button is None:
        self.button = []
      if self.joy_driver_enable_button is None:
        self.joy_driver_enable_button = False
      if self.reduce_velocity_button is None:
        self.reduce_velocity_button = False
      if self.raise_velocity_button is None:
        self.raise_velocity_button = False
      if self.reset_velocity_button is None:
        self.reset_velocity_button = False
      if self.vel_scale is None:
        self.vel_scale = 0.
      if self.linear_velocity is None:
        self.linear_velocity = 0.
      if self.angular_velocity is None:
        self.angular_velocity = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.joy_driver_status = ''
      self.axes = []
      self.button = []
      self.joy_driver_enable_button = False
      self.reduce_velocity_button = False
      self.raise_velocity_button = False
      self.reset_velocity_button = False
      self.vel_scale = 0.
      self.linear_velocity = 0.
      self.angular_velocity = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.joy_driver_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.axes)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.axes))
      length = len(self.button)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.button))
      _x = self
      buff.write(_get_struct_4B3f().pack(_x.joy_driver_enable_button, _x.reduce_velocity_button, _x.raise_velocity_button, _x.reset_velocity_button, _x.vel_scale, _x.linear_velocity, _x.angular_velocity))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.joy_driver_status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.joy_driver_status = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.axes = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.button = s.unpack(str[start:end])
      self.button = list(map(bool, self.button))
      _x = self
      start = end
      end += 16
      (_x.joy_driver_enable_button, _x.reduce_velocity_button, _x.raise_velocity_button, _x.reset_velocity_button, _x.vel_scale, _x.linear_velocity, _x.angular_velocity,) = _get_struct_4B3f().unpack(str[start:end])
      self.joy_driver_enable_button = bool(self.joy_driver_enable_button)
      self.reduce_velocity_button = bool(self.reduce_velocity_button)
      self.raise_velocity_button = bool(self.raise_velocity_button)
      self.reset_velocity_button = bool(self.reset_velocity_button)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.joy_driver_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.axes)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.axes.tostring())
      length = len(self.button)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.button.tostring())
      _x = self
      buff.write(_get_struct_4B3f().pack(_x.joy_driver_enable_button, _x.reduce_velocity_button, _x.raise_velocity_button, _x.reset_velocity_button, _x.vel_scale, _x.linear_velocity, _x.angular_velocity))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.joy_driver_status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.joy_driver_status = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.axes = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.button = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.button = list(map(bool, self.button))
      _x = self
      start = end
      end += 16
      (_x.joy_driver_enable_button, _x.reduce_velocity_button, _x.raise_velocity_button, _x.reset_velocity_button, _x.vel_scale, _x.linear_velocity, _x.angular_velocity,) = _get_struct_4B3f().unpack(str[start:end])
      self.joy_driver_enable_button = bool(self.joy_driver_enable_button)
      self.reduce_velocity_button = bool(self.reduce_velocity_button)
      self.raise_velocity_button = bool(self.raise_velocity_button)
      self.reset_velocity_button = bool(self.reset_velocity_button)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_4B3f = None
def _get_struct_4B3f():
    global _struct_4B3f
    if _struct_4B3f is None:
        _struct_4B3f = struct.Struct("<4B3f")
    return _struct_4B3f
