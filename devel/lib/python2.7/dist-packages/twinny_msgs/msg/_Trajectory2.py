# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from twinny_msgs/Trajectory2.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg
import twinny_msgs.msg

class Trajectory2(genpy.Message):
  _md5sum = "18cd86ccdebc7c18b59adf258bbbe2f5"
  _type = "twinny_msgs/Trajectory2"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
uint8 MAX_LENGTH=200

uint8 NORMAL=0
uint8 VEL_ONLY=1
uint8 E_STOP=2
uint8 STOP_AND_ROTATION=3

uint8 FOCUSING=4

uint8 command_mode
uint8 command_value
uint8 path_legnth

float64 sampling_period

twinny_msgs/DWMRState[201] state

twinny_msgs/Position object

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: twinny_msgs/DWMRState
twinny_msgs/LinearAngular velocity
twinny_msgs/Pose3D pose
================================================================================
MSG: twinny_msgs/LinearAngular
float64 linear
float64 angular

================================================================================
MSG: twinny_msgs/Pose3D
Header header
float64 x
float64 y
float64 theta

================================================================================
MSG: twinny_msgs/Position
float64 x
float64 y"""
  # Pseudo-constants
  MAX_LENGTH = 200
  NORMAL = 0
  VEL_ONLY = 1
  E_STOP = 2
  STOP_AND_ROTATION = 3
  FOCUSING = 4

  __slots__ = ['header','command_mode','command_value','path_legnth','sampling_period','state','object']
  _slot_types = ['std_msgs/Header','uint8','uint8','uint8','float64','twinny_msgs/DWMRState[201]','twinny_msgs/Position']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,command_mode,command_value,path_legnth,sampling_period,state,object

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Trajectory2, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.command_mode is None:
        self.command_mode = 0
      if self.command_value is None:
        self.command_value = 0
      if self.path_legnth is None:
        self.path_legnth = 0
      if self.sampling_period is None:
        self.sampling_period = 0.
      if self.state is None:
        self.state = [twinny_msgs.msg.DWMRState() for _ in range(201)]
      if self.object is None:
        self.object = twinny_msgs.msg.Position()
    else:
      self.header = std_msgs.msg.Header()
      self.command_mode = 0
      self.command_value = 0
      self.path_legnth = 0
      self.sampling_period = 0.
      self.state = [twinny_msgs.msg.DWMRState() for _ in range(201)]
      self.object = twinny_msgs.msg.Position()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3Bd().pack(_x.command_mode, _x.command_value, _x.path_legnth, _x.sampling_period))
      if len(self.state) != 201:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (201, len(self.state), 'self.state')))
      for val1 in self.state:
        _v1 = val1.velocity
        _x = _v1
        buff.write(_get_struct_2d().pack(_x.linear, _x.angular))
        _v2 = val1.pose
        _v3 = _v2.header
        _x = _v3.seq
        buff.write(_get_struct_I().pack(_x))
        _v4 = _v3.stamp
        _x = _v4
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v3.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v2
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.theta))
      _x = self
      buff.write(_get_struct_2d().pack(_x.object.x, _x.object.y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.state is None:
        self.state = None
      if self.object is None:
        self.object = twinny_msgs.msg.Position()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 11
      (_x.command_mode, _x.command_value, _x.path_legnth, _x.sampling_period,) = _get_struct_3Bd().unpack(str[start:end])
      self.state = []
      for i in range(0, 201):
        val1 = twinny_msgs.msg.DWMRState()
        _v5 = val1.velocity
        _x = _v5
        start = end
        end += 16
        (_x.linear, _x.angular,) = _get_struct_2d().unpack(str[start:end])
        _v6 = val1.pose
        _v7 = _v6.header
        start = end
        end += 4
        (_v7.seq,) = _get_struct_I().unpack(str[start:end])
        _v8 = _v7.stamp
        _x = _v8
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v7.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v7.frame_id = str[start:end]
        _x = _v6
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _get_struct_3d().unpack(str[start:end])
        self.state.append(val1)
      _x = self
      start = end
      end += 16
      (_x.object.x, _x.object.y,) = _get_struct_2d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3Bd().pack(_x.command_mode, _x.command_value, _x.path_legnth, _x.sampling_period))
      if len(self.state) != 201:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (201, len(self.state), 'self.state')))
      for val1 in self.state:
        _v9 = val1.velocity
        _x = _v9
        buff.write(_get_struct_2d().pack(_x.linear, _x.angular))
        _v10 = val1.pose
        _v11 = _v10.header
        _x = _v11.seq
        buff.write(_get_struct_I().pack(_x))
        _v12 = _v11.stamp
        _x = _v12
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v11.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v10
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.theta))
      _x = self
      buff.write(_get_struct_2d().pack(_x.object.x, _x.object.y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.state is None:
        self.state = None
      if self.object is None:
        self.object = twinny_msgs.msg.Position()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 11
      (_x.command_mode, _x.command_value, _x.path_legnth, _x.sampling_period,) = _get_struct_3Bd().unpack(str[start:end])
      self.state = []
      for i in range(0, 201):
        val1 = twinny_msgs.msg.DWMRState()
        _v13 = val1.velocity
        _x = _v13
        start = end
        end += 16
        (_x.linear, _x.angular,) = _get_struct_2d().unpack(str[start:end])
        _v14 = val1.pose
        _v15 = _v14.header
        start = end
        end += 4
        (_v15.seq,) = _get_struct_I().unpack(str[start:end])
        _v16 = _v15.stamp
        _x = _v16
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v15.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v15.frame_id = str[start:end]
        _x = _v14
        start = end
        end += 24
        (_x.x, _x.y, _x.theta,) = _get_struct_3d().unpack(str[start:end])
        self.state.append(val1)
      _x = self
      start = end
      end += 16
      (_x.object.x, _x.object.y,) = _get_struct_2d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2d = None
def _get_struct_2d():
    global _struct_2d
    if _struct_2d is None:
        _struct_2d = struct.Struct("<2d")
    return _struct_2d
_struct_3Bd = None
def _get_struct_3Bd():
    global _struct_3Bd
    if _struct_3Bd is None:
        _struct_3Bd = struct.Struct("<3Bd")
    return _struct_3Bd
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
