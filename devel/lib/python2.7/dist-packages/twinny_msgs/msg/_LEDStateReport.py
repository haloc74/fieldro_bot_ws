# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from twinny_msgs/LEDStateReport.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class LEDStateReport(genpy.Message):
  _md5sum = "fc4c0739dd32f45e85707b08066723b5"
  _type = "twinny_msgs/LEDStateReport"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
string type

uint8 STATE_OFF=0
uint8 STATE_ON=1
uint8 STATE_BLINK=2
uint8 STATE_ERROR=3

uint8 LED_0_state
uint8 LED_1_state
uint8 LED_2_state
uint8 LED_3_state
uint8 LED_4_state
uint8 LED_5_state

uint8 SUB_LED_0_state
uint8 SUB_LED_1_state
uint8 SUB_LED_2_state
uint8 SUB_LED_3_state
uint8 SUB_LED_4_state
uint8 SUB_LED_5_state

uint8 LED_bar_color
uint8 LED_bar_state

uint8 LED_bar2_color
uint8 LED_bar2_state

uint8 LED_BAR_OFF = 0
uint8 LED_BAR_RED = 1
uint8 LED_BAR_GREEN = 2
uint8 LED_BAR_YELLOW = 3
uint8 LED_BAR_BLUE = 4
uint8 LED_BAR_MAGENTA = 5
uint8 LED_BAR_CYAN = 6
uint8 LED_BAR_WHITE = 7

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  # Pseudo-constants
  STATE_OFF = 0
  STATE_ON = 1
  STATE_BLINK = 2
  STATE_ERROR = 3
  LED_BAR_OFF = 0
  LED_BAR_RED = 1
  LED_BAR_GREEN = 2
  LED_BAR_YELLOW = 3
  LED_BAR_BLUE = 4
  LED_BAR_MAGENTA = 5
  LED_BAR_CYAN = 6
  LED_BAR_WHITE = 7

  __slots__ = ['header','type','LED_0_state','LED_1_state','LED_2_state','LED_3_state','LED_4_state','LED_5_state','SUB_LED_0_state','SUB_LED_1_state','SUB_LED_2_state','SUB_LED_3_state','SUB_LED_4_state','SUB_LED_5_state','LED_bar_color','LED_bar_state','LED_bar2_color','LED_bar2_state']
  _slot_types = ['std_msgs/Header','string','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,type,LED_0_state,LED_1_state,LED_2_state,LED_3_state,LED_4_state,LED_5_state,SUB_LED_0_state,SUB_LED_1_state,SUB_LED_2_state,SUB_LED_3_state,SUB_LED_4_state,SUB_LED_5_state,LED_bar_color,LED_bar_state,LED_bar2_color,LED_bar2_state

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LEDStateReport, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.type is None:
        self.type = ''
      if self.LED_0_state is None:
        self.LED_0_state = 0
      if self.LED_1_state is None:
        self.LED_1_state = 0
      if self.LED_2_state is None:
        self.LED_2_state = 0
      if self.LED_3_state is None:
        self.LED_3_state = 0
      if self.LED_4_state is None:
        self.LED_4_state = 0
      if self.LED_5_state is None:
        self.LED_5_state = 0
      if self.SUB_LED_0_state is None:
        self.SUB_LED_0_state = 0
      if self.SUB_LED_1_state is None:
        self.SUB_LED_1_state = 0
      if self.SUB_LED_2_state is None:
        self.SUB_LED_2_state = 0
      if self.SUB_LED_3_state is None:
        self.SUB_LED_3_state = 0
      if self.SUB_LED_4_state is None:
        self.SUB_LED_4_state = 0
      if self.SUB_LED_5_state is None:
        self.SUB_LED_5_state = 0
      if self.LED_bar_color is None:
        self.LED_bar_color = 0
      if self.LED_bar_state is None:
        self.LED_bar_state = 0
      if self.LED_bar2_color is None:
        self.LED_bar2_color = 0
      if self.LED_bar2_state is None:
        self.LED_bar2_state = 0
    else:
      self.header = std_msgs.msg.Header()
      self.type = ''
      self.LED_0_state = 0
      self.LED_1_state = 0
      self.LED_2_state = 0
      self.LED_3_state = 0
      self.LED_4_state = 0
      self.LED_5_state = 0
      self.SUB_LED_0_state = 0
      self.SUB_LED_1_state = 0
      self.SUB_LED_2_state = 0
      self.SUB_LED_3_state = 0
      self.SUB_LED_4_state = 0
      self.SUB_LED_5_state = 0
      self.LED_bar_color = 0
      self.LED_bar_state = 0
      self.LED_bar2_color = 0
      self.LED_bar2_state = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_16B().pack(_x.LED_0_state, _x.LED_1_state, _x.LED_2_state, _x.LED_3_state, _x.LED_4_state, _x.LED_5_state, _x.SUB_LED_0_state, _x.SUB_LED_1_state, _x.SUB_LED_2_state, _x.SUB_LED_3_state, _x.SUB_LED_4_state, _x.SUB_LED_5_state, _x.LED_bar_color, _x.LED_bar_state, _x.LED_bar2_color, _x.LED_bar2_state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.type = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.LED_0_state, _x.LED_1_state, _x.LED_2_state, _x.LED_3_state, _x.LED_4_state, _x.LED_5_state, _x.SUB_LED_0_state, _x.SUB_LED_1_state, _x.SUB_LED_2_state, _x.SUB_LED_3_state, _x.SUB_LED_4_state, _x.SUB_LED_5_state, _x.LED_bar_color, _x.LED_bar_state, _x.LED_bar2_color, _x.LED_bar2_state,) = _get_struct_16B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_16B().pack(_x.LED_0_state, _x.LED_1_state, _x.LED_2_state, _x.LED_3_state, _x.LED_4_state, _x.LED_5_state, _x.SUB_LED_0_state, _x.SUB_LED_1_state, _x.SUB_LED_2_state, _x.SUB_LED_3_state, _x.SUB_LED_4_state, _x.SUB_LED_5_state, _x.LED_bar_color, _x.LED_bar_state, _x.LED_bar2_color, _x.LED_bar2_state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.type = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.LED_0_state, _x.LED_1_state, _x.LED_2_state, _x.LED_3_state, _x.LED_4_state, _x.LED_5_state, _x.SUB_LED_0_state, _x.SUB_LED_1_state, _x.SUB_LED_2_state, _x.SUB_LED_3_state, _x.SUB_LED_4_state, _x.SUB_LED_5_state, _x.LED_bar_color, _x.LED_bar_state, _x.LED_bar2_color, _x.LED_bar2_state,) = _get_struct_16B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_16B = None
def _get_struct_16B():
    global _struct_16B
    if _struct_16B is None:
        _struct_16B = struct.Struct("<16B")
    return _struct_16B
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
