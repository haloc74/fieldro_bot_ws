# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from trash_bot/Pose.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Pose(genpy.Message):
  _md5sum = "253d53f3482ae049afa845efe1727f65"
  _type = "trash_bot/Pose"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 x
float32 y
float32 theta
float32 linear_velocity
float32 angular_velocity
uint8 US_1
uint8 US_2
uint8 US_3
uint8 US_4
uint8 platform_state
uint8 left_motor_state
uint8 right_motor_state
"""
  __slots__ = ['x','y','theta','linear_velocity','angular_velocity','US_1','US_2','US_3','US_4','platform_state','left_motor_state','right_motor_state']
  _slot_types = ['float32','float32','float32','float32','float32','uint8','uint8','uint8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       x,y,theta,linear_velocity,angular_velocity,US_1,US_2,US_3,US_4,platform_state,left_motor_state,right_motor_state

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Pose, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.theta is None:
        self.theta = 0.
      if self.linear_velocity is None:
        self.linear_velocity = 0.
      if self.angular_velocity is None:
        self.angular_velocity = 0.
      if self.US_1 is None:
        self.US_1 = 0
      if self.US_2 is None:
        self.US_2 = 0
      if self.US_3 is None:
        self.US_3 = 0
      if self.US_4 is None:
        self.US_4 = 0
      if self.platform_state is None:
        self.platform_state = 0
      if self.left_motor_state is None:
        self.left_motor_state = 0
      if self.right_motor_state is None:
        self.right_motor_state = 0
    else:
      self.x = 0.
      self.y = 0.
      self.theta = 0.
      self.linear_velocity = 0.
      self.angular_velocity = 0.
      self.US_1 = 0
      self.US_2 = 0
      self.US_3 = 0
      self.US_4 = 0
      self.platform_state = 0
      self.left_motor_state = 0
      self.right_motor_state = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_5f7B().pack(_x.x, _x.y, _x.theta, _x.linear_velocity, _x.angular_velocity, _x.US_1, _x.US_2, _x.US_3, _x.US_4, _x.platform_state, _x.left_motor_state, _x.right_motor_state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 27
      (_x.x, _x.y, _x.theta, _x.linear_velocity, _x.angular_velocity, _x.US_1, _x.US_2, _x.US_3, _x.US_4, _x.platform_state, _x.left_motor_state, _x.right_motor_state,) = _get_struct_5f7B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_5f7B().pack(_x.x, _x.y, _x.theta, _x.linear_velocity, _x.angular_velocity, _x.US_1, _x.US_2, _x.US_3, _x.US_4, _x.platform_state, _x.left_motor_state, _x.right_motor_state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 27
      (_x.x, _x.y, _x.theta, _x.linear_velocity, _x.angular_velocity, _x.US_1, _x.US_2, _x.US_3, _x.US_4, _x.platform_state, _x.left_motor_state, _x.right_motor_state,) = _get_struct_5f7B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5f7B = None
def _get_struct_5f7B():
    global _struct_5f7B
    if _struct_5f7B is None:
        _struct_5f7B = struct.Struct("<5f7B")
    return _struct_5f7B
