# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from trash_bot/UnitActionComplete.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class UnitActionComplete(genpy.Message):
  _md5sum = "8cfdf36b4b872dd50c9838483632d5fd"
  _type = "trash_bot/UnitActionComplete"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
## 각 구성 unit이 요청된 동작을 완료 시킨면 발생되는 메세지

time  time_stamp        # 발행시간
int32 receive_object    # 수신객체    (unit_index.h)
int32 action_object     # 동작 객체   (unit_index.h)
int32 complete_action   # 완료 동작   (unit_action_index.h)
int32 error_code        # Error-Code  (error_code.h) """
  __slots__ = ['time_stamp','receive_object','action_object','complete_action','error_code']
  _slot_types = ['time','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       time_stamp,receive_object,action_object,complete_action,error_code

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(UnitActionComplete, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.time_stamp is None:
        self.time_stamp = genpy.Time()
      if self.receive_object is None:
        self.receive_object = 0
      if self.action_object is None:
        self.action_object = 0
      if self.complete_action is None:
        self.complete_action = 0
      if self.error_code is None:
        self.error_code = 0
    else:
      self.time_stamp = genpy.Time()
      self.receive_object = 0
      self.action_object = 0
      self.complete_action = 0
      self.error_code = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2I4i().pack(_x.time_stamp.secs, _x.time_stamp.nsecs, _x.receive_object, _x.action_object, _x.complete_action, _x.error_code))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.time_stamp is None:
        self.time_stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 24
      (_x.time_stamp.secs, _x.time_stamp.nsecs, _x.receive_object, _x.action_object, _x.complete_action, _x.error_code,) = _get_struct_2I4i().unpack(str[start:end])
      self.time_stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2I4i().pack(_x.time_stamp.secs, _x.time_stamp.nsecs, _x.receive_object, _x.action_object, _x.complete_action, _x.error_code))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.time_stamp is None:
        self.time_stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 24
      (_x.time_stamp.secs, _x.time_stamp.nsecs, _x.receive_object, _x.action_object, _x.complete_action, _x.error_code,) = _get_struct_2I4i().unpack(str[start:end])
      self.time_stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I4i = None
def _get_struct_2I4i():
    global _struct_2I4i
    if _struct_2I4i is None:
        _struct_2I4i = struct.Struct("<2I4i")
    return _struct_2I4i
